#ifndef conv3x3_halide_SCHEDULE_H
#define conv3x3_halide_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=hexagon-32-qurt-hvx-hvx_128  // NOLINT
// with machine_params=16,16777216,40

#include "Halide.h"


inline void apply_schedule_conv3x3_halide(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(5);
    Func mask_im = pipeline.get_func(4);
    Func input_bounded = pipeline.get_func(3);
    Func repeat_edge = pipeline.get_func(2);
    Func lambda_0 = pipeline.get_func(1);
    Func input_im = pipeline.get_func(0);
    Var x(output.get_schedule().dims()[0].var);
    Var xi("xi");
    Var xii("xii");
    Var y(output.get_schedule().dims()[1].var);
    Var yi("yi");
    Var yii("yii");
    output
        .split(y, y, yi, 64, TailStrategy::ShiftInwards)
        .split(x, x, xi, 512, TailStrategy::ShiftInwards)
        .split(yi, yi, yii, 16, TailStrategy::ShiftInwards)
        .split(xi, xi, xii, 128, TailStrategy::ShiftInwards)
        .vectorize(xii)
        .align_storage(x, 128)
        .compute_root()
        .reorder({xii, xi, yii, x, yi, y})
        .parallel(y)
        .prefetch(input_im, x, 2);
    input_bounded
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 128, TailStrategy::ShiftInwards)
        .vectorize(xi)
        .align_storage(x, 128)
        .compute_at(output, x)
        .reorder({xi, x, y});

}

#endif  // conv3x3_halide_SCHEDULE_H
