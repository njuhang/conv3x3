
/* MACHINE GENERATED By Halide. */

#if !(__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
#error "This code requires C++11 (or later); please upgrade your compiler."
#endif

#include <assert.h>
#include <float.h>
#include <limits.h>
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <type_traits>

extern "C" {
int64_t halide_current_time_ns(void *ctx);
void halide_profiler_pipeline_end(void *, void *);
}

#ifdef _WIN32
#ifndef _MT
__declspec(dllimport) float __cdecl roundf(float);
__declspec(dllimport) double __cdecl round(double);
#endif
#else
inline float asinh_f32(float x) {return asinhf(x);}
inline float acosh_f32(float x) {return acoshf(x);}
inline float atanh_f32(float x) {return atanhf(x);}
inline double asinh_f64(double x) {return asinh(x);}
inline double acosh_f64(double x) {return acosh(x);}
inline double atanh_f64(double x) {return atanh(x);}
#endif
inline float sqrt_f32(float x) {return sqrtf(x);}
inline float sin_f32(float x) {return sinf(x);}
inline float asin_f32(float x) {return asinf(x);}
inline float cos_f32(float x) {return cosf(x);}
inline float acos_f32(float x) {return acosf(x);}
inline float tan_f32(float x) {return tanf(x);}
inline float atan_f32(float x) {return atanf(x);}
inline float atan2_f32(float x, float y) {return atan2f(x, y);}
inline float sinh_f32(float x) {return sinhf(x);}
inline float cosh_f32(float x) {return coshf(x);}
inline float tanh_f32(float x) {return tanhf(x);}
inline float hypot_f32(float x, float y) {return hypotf(x, y);}
inline float exp_f32(float x) {return expf(x);}
inline float log_f32(float x) {return logf(x);}
inline float pow_f32(float x, float y) {return powf(x, y);}
inline float floor_f32(float x) {return floorf(x);}
inline float ceil_f32(float x) {return ceilf(x);}
inline float round_f32(float x) {return roundf(x);}

inline double sqrt_f64(double x) {return sqrt(x);}
inline double sin_f64(double x) {return sin(x);}
inline double asin_f64(double x) {return asin(x);}
inline double cos_f64(double x) {return cos(x);}
inline double acos_f64(double x) {return acos(x);}
inline double tan_f64(double x) {return tan(x);}
inline double atan_f64(double x) {return atan(x);}
inline double atan2_f64(double x, double y) {return atan2(x, y);}
inline double sinh_f64(double x) {return sinh(x);}
inline double cosh_f64(double x) {return cosh(x);}
inline double tanh_f64(double x) {return tanh(x);}
inline double hypot_f64(double x, double y) {return hypot(x, y);}
inline double exp_f64(double x) {return exp(x);}
inline double log_f64(double x) {return log(x);}
inline double pow_f64(double x, double y) {return pow(x, y);}
inline double floor_f64(double x) {return floor(x);}
inline double ceil_f64(double x) {return ceil(x);}
inline double round_f64(double x) {return round(x);}

inline float nan_f32() {return NAN;}
inline float neg_inf_f32() {return -INFINITY;}
inline float inf_f32() {return INFINITY;}
inline bool is_nan_f32(float x) {return isnan(x);}
inline bool is_nan_f64(double x) {return isnan(x);}
inline bool is_inf_f32(float x) {return isinf(x);}
inline bool is_inf_f64(double x) {return isinf(x);}
inline bool is_finite_f32(float x) {return isfinite(x);}
inline bool is_finite_f64(double x) {return isfinite(x);}

template<typename A, typename B>
inline A reinterpret(const B &b) {
    static_assert(sizeof(A) == sizeof(B), "type size mismatch");
    A a;
    memcpy(&a, &b, sizeof(a));
    return a;
}
inline float float_from_bits(uint32_t bits) {
    return reinterpret<float, uint32_t>(bits);
}

template<typename T>
inline int halide_popcount(T a) {
    int bits_set = 0;
    while (a != 0) {
        bits_set += a & 1;
        a >>= 1;
    }
    return bits_set;
}

template<typename T>
inline int halide_count_leading_zeros(T a) {
    int leading_zeros = 0;
    int bit = sizeof(a) * 8 - 1;
    while (bit >= 0 && (a & (((T)1) << bit)) == 0) {
        leading_zeros++;
        bit--;
    }
    return leading_zeros;
}

template<typename T>
inline int halide_count_trailing_zeros(T a) {
    int trailing_zeros = 0;
    constexpr int bits = sizeof(a) * 8;
    int bit = 0;
    while (bit < bits && (a & (((T)1) << bit)) == 0) {
        trailing_zeros++;
        bit++;
    }
    return trailing_zeros;
}

template<typename T>
inline T halide_cpp_max(const T &a, const T &b) {return (a > b) ? a : b;}

template<typename T>
inline T halide_cpp_min(const T &a, const T &b) {return (a < b) ? a : b;}

template<typename T>
inline void halide_unused(const T&) {}

template<typename A, typename B>
const B &return_second(const A &a, const B &b) {
    halide_unused(a);
    return b;
}

namespace {
class HalideFreeHelper {
    typedef void (*FreeFunction)(void *user_context, void *p);
    void * user_context;
    void *p;
    FreeFunction free_function;
public:
    HalideFreeHelper(void *user_context, void *p, FreeFunction free_function)
        : user_context(user_context), p(p), free_function(free_function) {}
    ~HalideFreeHelper() { free(); }
    void free() {
        if (p) {
            // TODO: do all free_functions guarantee to ignore a nullptr?
            free_function(user_context, p);
            p = nullptr;
        }
    }
};
} // namespace
 #ifndef HALIDE_HALIDERUNTIME_H
#define HALIDE_HALIDERUNTIME_H

#ifndef COMPILING_HALIDE_RUNTIME
#ifdef __cplusplus
#include <cstddef>
#include <cstdint>
#include <cstring>
#else
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <string.h>
#endif
#else
#include "runtime_internal.h"
#endif

#ifdef __cplusplus
// Forward declare type to allow naming typed handles.
// See Type.h for documentation.
template<typename T>
struct halide_handle_traits;
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _MSC_VER
// Note that (for MSVC) you should not use "inline" along with HALIDE_ALWAYS_INLINE;
// it is not necessary, and may produce warnings for some build configurations.
#define HALIDE_ALWAYS_INLINE __forceinline
#define HALIDE_NEVER_INLINE __declspec(noinline)
#else
// Note that (for Posixy compilers) you should always use "inline" along with HALIDE_ALWAYS_INLINE;
// otherwise some corner-case scenarios may erroneously report link errors.
#define HALIDE_ALWAYS_INLINE inline __attribute__((always_inline))
#define HALIDE_NEVER_INLINE __attribute__((noinline))
#endif

#ifndef HALIDE_MUST_USE_RESULT
#ifdef __has_attribute
#if __has_attribute(nodiscard)
// C++17 or later
#define HALIDE_MUST_USE_RESULT [[nodiscard]]
#elif __has_attribute(warn_unused_result)
// Clang/GCC
#define HALIDE_MUST_USE_RESULT __attribute__((warn_unused_result))
#else
#define HALIDE_MUST_USE_RESULT
#endif
#else
#define HALIDE_MUST_USE_RESULT
#endif
#endif

/** \file
 *
 * This file declares the routines used by Halide internally in its
 * runtime. On platforms that support weak linking, these can be
 * replaced with user-defined versions by defining an extern "C"
 * function with the same name and signature.
 *
 * When doing Just In Time (JIT) compilation methods on the Func being
 * compiled must be called instead. The corresponding methods are
 * documented below.
 *
 * All of these functions take a "void *user_context" parameter as their
 * first argument; if the Halide kernel that calls back to any of these
 * functions has been compiled with the UserContext feature set on its Target,
 * then the value of that pointer passed from the code that calls the
 * Halide kernel is piped through to the function.
 *
 * Some of these are also useful to call when using the default
 * implementation. E.g. halide_shutdown_thread_pool.
 *
 * Note that even on platforms with weak linking, some linker setups
 * may not respect the override you provide. E.g. if the override is
 * in a shared library and the halide object files are linked directly
 * into the output, the builtin versions of the runtime functions will
 * be called. See your linker documentation for more details. On
 * Linux, LD_DYNAMIC_WEAK=1 may help.
 *
 */

// Forward-declare to suppress warnings if compiling as C.
struct halide_buffer_t;

/** Print a message to stderr. Main use is to support tracing
 * functionality, print, and print_when calls. Also called by the default
 * halide_error.  This function can be replaced in JITed code by using
 * halide_custom_print and providing an implementation of halide_print
 * in AOT code. See Func::set_custom_print.
 */
// @{
extern void halide_print(void *user_context, const char *);
extern void halide_vprint(void *user_context, const char *);
extern void halide_default_print(void *user_context, const char *);
typedef void (*halide_print_t)(void *, const char *);
extern halide_print_t halide_set_custom_print(halide_print_t print);
// @}

/** Halide calls this function on runtime errors (for example bounds
 * checking failures). This function can be replaced in JITed code by
 * using Func::set_error_handler, or in AOT code by calling
 * halide_set_error_handler. In AOT code on platforms that support
 * weak linking (i.e. not Windows), you can also override it by simply
 * defining your own halide_error.
 */
// @{
extern void halide_error(void *user_context, const char *);
extern void halide_default_error(void *user_context, const char *);
typedef void (*halide_error_handler_t)(void *, const char *);
extern halide_error_handler_t halide_set_error_handler(halide_error_handler_t handler);
// @}

/** Cross-platform mutex. Must be initialized with zero and implementation
 * must treat zero as an unlocked mutex with no waiters, etc.
 */
struct halide_mutex {
    uintptr_t _private[1];
};

/** Cross platform condition variable. Must be initialized to 0. */
struct halide_cond {
    uintptr_t _private[1];
};

/** A basic set of mutex and condition variable functions, which call
 * platform specific code for mutual exclusion. Equivalent to posix
 * calls. */
//@{
extern void halide_mutex_lock(struct halide_mutex *mutex);
extern void halide_mutex_unlock(struct halide_mutex *mutex);
extern void halide_cond_signal(struct halide_cond *cond);
extern void halide_cond_broadcast(struct halide_cond *cond);
extern void halide_cond_wait(struct halide_cond *cond, struct halide_mutex *mutex);
//@}

/** Functions for constructing/destroying/locking/unlocking arrays of mutexes. */
struct halide_mutex_array;
//@{
extern struct halide_mutex_array *halide_mutex_array_create(int sz);
extern void halide_mutex_array_destroy(void *user_context, void *array);
extern int halide_mutex_array_lock(struct halide_mutex_array *array, int entry);
extern int halide_mutex_array_unlock(struct halide_mutex_array *array, int entry);
//@}

/** Define halide_do_par_for to replace the default thread pool
 * implementation. halide_shutdown_thread_pool can also be called to
 * release resources used by the default thread pool on platforms
 * where it makes sense. See Func::set_custom_do_task and
 * Func::set_custom_do_par_for. Should return zero if all the jobs
 * return zero, or an arbitrarily chosen return value from one of the
 * jobs otherwise.
 */
//@{
typedef int (*halide_task_t)(void *user_context, int task_number, uint8_t *closure);
extern int halide_do_par_for(void *user_context,
                             halide_task_t task,
                             int min, int size, uint8_t *closure);
extern void halide_shutdown_thread_pool();
//@}

/** Set a custom method for performing a parallel for loop. Returns
 * the old do_par_for handler. */
typedef int (*halide_do_par_for_t)(void *, halide_task_t, int, int, uint8_t *);
extern halide_do_par_for_t halide_set_custom_do_par_for(halide_do_par_for_t do_par_for);

/** An opaque struct representing a semaphore. Used by the task system for async tasks. */
struct halide_semaphore_t {
    uint64_t _private[2];
};

/** A struct representing a semaphore and a number of items that must
 * be acquired from it. Used in halide_parallel_task_t below. */
struct halide_semaphore_acquire_t {
    struct halide_semaphore_t *semaphore;
    int count;
};
extern int halide_semaphore_init(struct halide_semaphore_t *, int n);
extern int halide_semaphore_release(struct halide_semaphore_t *, int n);
extern bool halide_semaphore_try_acquire(struct halide_semaphore_t *, int n);
typedef int (*halide_semaphore_init_t)(struct halide_semaphore_t *, int);
typedef int (*halide_semaphore_release_t)(struct halide_semaphore_t *, int);
typedef bool (*halide_semaphore_try_acquire_t)(struct halide_semaphore_t *, int);

/** A task representing a serial for loop evaluated over some range.
 * Note that task_parent is a pass through argument that should be
 * passed to any dependent taks that are invokved using halide_do_parallel_tasks
 * underneath this call. */
typedef int (*halide_loop_task_t)(void *user_context, int min, int extent,
                                  uint8_t *closure, void *task_parent);

/** A parallel task to be passed to halide_do_parallel_tasks. This
 * task may recursively call halide_do_parallel_tasks, and there may
 * be complex dependencies between seemingly unrelated tasks expressed
 * using semaphores. If you are using a custom task system, care must
 * be taken to avoid potential deadlock. This can be done by carefully
 * respecting the static metadata at the end of the task struct.*/
struct halide_parallel_task_t {
    // The function to call. It takes a user context, a min and
    // extent, a closure, and a task system pass through argument.
    halide_loop_task_t fn;

    // The closure to pass it
    uint8_t *closure;

    // The name of the function to be called. For debugging purposes only.
    const char *name;

    // An array of semaphores that must be acquired before the
    // function is called. Must be reacquired for every call made.
    struct halide_semaphore_acquire_t *semaphores;
    int num_semaphores;

    // The entire range the function should be called over. This range
    // may be sliced up and the function called multiple times.
    int min, extent;

    // A parallel task provides several pieces of metadata to prevent
    // unbounded resource usage or deadlock.

    // The first is the minimum number of execution contexts (call
    // stacks or threads) necessary for the function to run to
    // completion. This may be greater than one when there is nested
    // parallelism with internal producer-consumer relationships
    // (calling the function recursively spawns and blocks on parallel
    // sub-tasks that communicate with each other via semaphores). If
    // a parallel runtime calls the function when fewer than this many
    // threads are idle, it may need to create more threads to
    // complete the task, or else risk deadlock due to committing all
    // threads to tasks that cannot complete without more.
    //
    // FIXME: Note that extern stages are assumed to only require a
    // single thread to complete. If the extern stage is itself a
    // Halide pipeline, this may be an underestimate.
    int min_threads;

    // The calls to the function should be in serial order from min to min+extent-1, with only
    // one executing at a time. If false, any order is fine, and
    // concurrency is fine.
    bool serial;
};

/** Enqueue some number of the tasks described above and wait for them
 * to complete. While waiting, the calling threads assists with either
 * the tasks enqueued, or other non-blocking tasks in the task
 * system. Note that task_parent should be NULL for top-level calls
 * and the pass through argument if this call is being made from
 * another task. */
extern int halide_do_parallel_tasks(void *user_context, int num_tasks,
                                    struct halide_parallel_task_t *tasks,
                                    void *task_parent);

/** If you use the default do_par_for, you can still set a custom
 * handler to perform each individual task. Returns the old handler. */
//@{
typedef int (*halide_do_task_t)(void *, halide_task_t, int, uint8_t *);
extern halide_do_task_t halide_set_custom_do_task(halide_do_task_t do_task);
extern int halide_do_task(void *user_context, halide_task_t f, int idx,
                          uint8_t *closure);
//@}

/** The version of do_task called for loop tasks. By default calls the
 * loop task with the same arguments. */
// @{
typedef int (*halide_do_loop_task_t)(void *, halide_loop_task_t, int, int, uint8_t *, void *);
extern halide_do_loop_task_t halide_set_custom_do_loop_task(halide_do_loop_task_t do_task);
extern int halide_do_loop_task(void *user_context, halide_loop_task_t f, int min, int extent,
                               uint8_t *closure, void *task_parent);
//@}

/** Provide an entire custom tasking runtime via function
 * pointers. Note that do_task and semaphore_try_acquire are only ever
 * called by halide_default_do_par_for and
 * halide_default_do_parallel_tasks, so it's only necessary to provide
 * those if you are mixing in the default implementations of
 * do_par_for and do_parallel_tasks. */
// @{
typedef int (*halide_do_parallel_tasks_t)(void *, int, struct halide_parallel_task_t *,
                                          void *task_parent);
extern void halide_set_custom_parallel_runtime(
    halide_do_par_for_t,
    halide_do_task_t,
    halide_do_loop_task_t,
    halide_do_parallel_tasks_t,
    halide_semaphore_init_t,
    halide_semaphore_try_acquire_t,
    halide_semaphore_release_t);
// @}

/** The default versions of the parallel runtime functions. */
// @{
extern int halide_default_do_par_for(void *user_context,
                                     halide_task_t task,
                                     int min, int size, uint8_t *closure);
extern int halide_default_do_parallel_tasks(void *user_context,
                                            int num_tasks,
                                            struct halide_parallel_task_t *tasks,
                                            void *task_parent);
extern int halide_default_do_task(void *user_context, halide_task_t f, int idx,
                                  uint8_t *closure);
extern int halide_default_do_loop_task(void *user_context, halide_loop_task_t f,
                                       int min, int extent,
                                       uint8_t *closure, void *task_parent);
extern int halide_default_semaphore_init(struct halide_semaphore_t *, int n);
extern int halide_default_semaphore_release(struct halide_semaphore_t *, int n);
extern bool halide_default_semaphore_try_acquire(struct halide_semaphore_t *, int n);
// @}

struct halide_thread;

/** Spawn a thread. Returns a handle to the thread for the purposes of
 * joining it. The thread must be joined in order to clean up any
 * resources associated with it. */
extern struct halide_thread *halide_spawn_thread(void (*f)(void *), void *closure);

/** Join a thread. */
extern void halide_join_thread(struct halide_thread *);

/** Set the number of threads used by Halide's thread pool. Returns
 * the old number.
 *
 * n < 0  : error condition
 * n == 0 : use a reasonable system default (typically, number of cpus online).
 * n == 1 : use exactly one thread; this will always enforce serial execution
 * n > 1  : use a pool of exactly n threads.
 *
 * (Note that this is only guaranteed when using the default implementations
 * of halide_do_par_for(); custom implementations may completely ignore values
 * passed to halide_set_num_threads().)
 */
extern int halide_set_num_threads(int n);

/** Halide calls these functions to allocate and free memory. To
 * replace in AOT code, use the halide_set_custom_malloc and
 * halide_set_custom_free, or (on platforms that support weak
 * linking), simply define these functions yourself. In JIT-compiled
 * code use Func::set_custom_allocator.
 *
 * If you override them, and find yourself wanting to call the default
 * implementation from within your override, use
 * halide_default_malloc/free.
 *
 * Note that halide_malloc must return a pointer aligned to the
 * maximum meaningful alignment for the platform for the purpose of
 * vector loads and stores. The default implementation uses 32-byte
 * alignment, which is safe for arm and x86. Additionally, it must be
 * safe to read at least 8 bytes before the start and beyond the
 * end.
 */
//@{
extern void *halide_malloc(void *user_context, size_t x);
extern void halide_free(void *user_context, void *ptr);
extern void *halide_default_malloc(void *user_context, size_t x);
extern void halide_default_free(void *user_context, void *ptr);
typedef void *(*halide_malloc_t)(void *, size_t);
typedef void (*halide_free_t)(void *, void *);
extern halide_malloc_t halide_set_custom_malloc(halide_malloc_t user_malloc);
extern halide_free_t halide_set_custom_free(halide_free_t user_free);
//@}

/** Halide calls these functions to interact with the underlying
 * system runtime functions. To replace in AOT code on platforms that
 * support weak linking, define these functions yourself, or use
 * the halide_set_custom_load_library() and halide_set_custom_get_library_symbol()
 * functions. In JIT-compiled code, use JITSharedRuntime::set_default_handlers().
 *
 * halide_load_library and halide_get_library_symbol are equivalent to
 * dlopen and dlsym. halide_get_symbol(sym) is equivalent to
 * dlsym(RTLD_DEFAULT, sym).
 */
//@{
extern void *halide_get_symbol(const char *name);
extern void *halide_load_library(const char *name);
extern void *halide_get_library_symbol(void *lib, const char *name);
extern void *halide_default_get_symbol(const char *name);
extern void *halide_default_load_library(const char *name);
extern void *halide_default_get_library_symbol(void *lib, const char *name);
typedef void *(*halide_get_symbol_t)(const char *name);
typedef void *(*halide_load_library_t)(const char *name);
typedef void *(*halide_get_library_symbol_t)(void *lib, const char *name);
extern halide_get_symbol_t halide_set_custom_get_symbol(halide_get_symbol_t user_get_symbol);
extern halide_load_library_t halide_set_custom_load_library(halide_load_library_t user_load_library);
extern halide_get_library_symbol_t halide_set_custom_get_library_symbol(halide_get_library_symbol_t user_get_library_symbol);
//@}

/** Called when debug_to_file is used inside %Halide code.  See
 * Func::debug_to_file for how this is called
 *
 * Cannot be replaced in JITted code at present.
 */
extern int32_t halide_debug_to_file(void *user_context, const char *filename,
                                    int32_t type_code,
                                    struct halide_buffer_t *buf);

/** Types in the halide type system. They can be ints, unsigned ints,
 * or floats (of various bit-widths), or a handle (which is always 64-bits).
 * Note that the int/uint/float values do not imply a specific bit width
 * (the bit width is expected to be encoded in a separate value).
 */
typedef enum halide_type_code_t
#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    : uint8_t
#endif
{
    halide_type_int = 0,     ///< signed integers
    halide_type_uint = 1,    ///< unsigned integers
    halide_type_float = 2,   ///< IEEE floating point numbers
    halide_type_handle = 3,  ///< opaque pointer type (void *)
    halide_type_bfloat = 4,  ///< floating point numbers in the bfloat format
} halide_type_code_t;

// Note that while __attribute__ can go before or after the declaration,
// __declspec apparently is only allowed before.
#ifndef HALIDE_ATTRIBUTE_ALIGN
#ifdef _MSC_VER
#define HALIDE_ATTRIBUTE_ALIGN(x) __declspec(align(x))
#else
#define HALIDE_ATTRIBUTE_ALIGN(x) __attribute__((aligned(x)))
#endif
#endif

/** A runtime tag for a type in the halide type system. Can be ints,
 * unsigned ints, or floats of various bit-widths (the 'bits'
 * field). Can also be vectors of the same (by setting the 'lanes'
 * field to something larger than one). This struct should be
 * exactly 32-bits in size. */
struct halide_type_t {
    /** The basic type code: signed integer, unsigned integer, or floating point. */
#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    HALIDE_ATTRIBUTE_ALIGN(1)
    halide_type_code_t code;  // halide_type_code_t
#else
    HALIDE_ATTRIBUTE_ALIGN(1)
    uint8_t code;  // halide_type_code_t
#endif

    /** The number of bits of precision of a single scalar value of this type. */
    HALIDE_ATTRIBUTE_ALIGN(1)
    uint8_t bits;

    /** How many elements in a vector. This is 1 for scalar types. */
    HALIDE_ATTRIBUTE_ALIGN(2)
    uint16_t lanes;

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    /** Construct a runtime representation of a Halide type from:
     * code: The fundamental type from an enum.
     * bits: The bit size of one element.
     * lanes: The number of vector elements in the type. */
    HALIDE_ALWAYS_INLINE halide_type_t(halide_type_code_t code, uint8_t bits, uint16_t lanes = 1)
        : code(code), bits(bits), lanes(lanes) {
    }

    /** Default constructor is required e.g. to declare halide_trace_event
     * instances. */
    HALIDE_ALWAYS_INLINE halide_type_t()
        : code((halide_type_code_t)0), bits(0), lanes(0) {
    }

    HALIDE_ALWAYS_INLINE halide_type_t with_lanes(uint16_t new_lanes) const {
        return halide_type_t((halide_type_code_t)code, bits, new_lanes);
    }

    /** Compare two types for equality. */
    HALIDE_ALWAYS_INLINE bool operator==(const halide_type_t &other) const {
        return as_u32() == other.as_u32();
    }

    HALIDE_ALWAYS_INLINE bool operator!=(const halide_type_t &other) const {
        return !(*this == other);
    }

    HALIDE_ALWAYS_INLINE bool operator<(const halide_type_t &other) const {
        return as_u32() < other.as_u32();
    }

    /** Size in bytes for a single element, even if width is not 1, of this type. */
    HALIDE_ALWAYS_INLINE int bytes() const {
        return (bits + 7) / 8;
    }

    HALIDE_ALWAYS_INLINE uint32_t as_u32() const {
        uint32_t u;
        memcpy(&u, this, sizeof(u));
        return u;
    }
#endif
};

enum halide_trace_event_code_t { halide_trace_load = 0,
                                 halide_trace_store = 1,
                                 halide_trace_begin_realization = 2,
                                 halide_trace_end_realization = 3,
                                 halide_trace_produce = 4,
                                 halide_trace_end_produce = 5,
                                 halide_trace_consume = 6,
                                 halide_trace_end_consume = 7,
                                 halide_trace_begin_pipeline = 8,
                                 halide_trace_end_pipeline = 9,
                                 halide_trace_tag = 10 };

struct halide_trace_event_t {
    /** The name of the Func or Pipeline that this event refers to */
    const char *func;

    /** If the event type is a load or a store, this points to the
     * value being loaded or stored. Use the type field to safely cast
     * this to a concrete pointer type and retrieve it. For other
     * events this is null. */
    void *value;

    /** For loads and stores, an array which contains the location
     * being accessed. For vector loads or stores it is an array of
     * vectors of coordinates (the vector dimension is innermost).
     *
     * For realization or production-related events, this will contain
     * the mins and extents of the region being accessed, in the order
     * min0, extent0, min1, extent1, ...
     *
     * For pipeline-related events, this will be null.
     */
    int32_t *coordinates;

    /** For halide_trace_tag, this points to a read-only null-terminated string
     * of arbitrary text. For all other events, this will be null.
     */
    const char *trace_tag;

    /** If the event type is a load or a store, this is the type of
     * the data. Otherwise, the value is meaningless. */
    struct halide_type_t type;

    /** The type of event */
    enum halide_trace_event_code_t event;

    /* The ID of the parent event (see below for an explanation of
     * event ancestry). */
    int32_t parent_id;

    /** If this was a load or store of a Tuple-valued Func, this is
     * which tuple element was accessed. */
    int32_t value_index;

    /** The length of the coordinates array */
    int32_t dimensions;

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    // If we don't explicitly mark the default ctor as inline,
    // certain build configurations can fail (notably iOS)
    HALIDE_ALWAYS_INLINE halide_trace_event_t() = default;
#endif
};

/** Called when Funcs are marked as trace_load, trace_store, or
 * trace_realization. See Func::set_custom_trace. The default
 * implementation either prints events via halide_print, or if
 * HL_TRACE_FILE is defined, dumps the trace to that file in a
 * sequence of trace packets. The header for a trace packet is defined
 * below. If the trace is going to be large, you may want to make the
 * file a named pipe, and then read from that pipe into gzip.
 *
 * halide_trace returns a unique ID which will be passed to future
 * events that "belong" to the earlier event as the parent id. The
 * ownership hierarchy looks like:
 *
 * begin_pipeline
 * +--trace_tag (if any)
 * +--trace_tag (if any)
 * ...
 * +--begin_realization
 * |  +--produce
 * |  |  +--load/store
 * |  |  +--end_produce
 * |  +--consume
 * |  |  +--load
 * |  |  +--end_consume
 * |  +--end_realization
 * +--end_pipeline
 *
 * Threading means that ownership cannot be inferred from the ordering
 * of events. There can be many active realizations of a given
 * function, or many active productions for a single
 * realization. Within a single production, the ordering of events is
 * meaningful.
 *
 * Note that all trace_tag events (if any) will occur just after the begin_pipeline
 * event, but before any begin_realization events. All trace_tags for a given Func
 * will be emitted in the order added.
 */
// @}
extern int32_t halide_trace(void *user_context, const struct halide_trace_event_t *event);
extern int32_t halide_default_trace(void *user_context, const struct halide_trace_event_t *event);
typedef int32_t (*halide_trace_t)(void *user_context, const struct halide_trace_event_t *);
extern halide_trace_t halide_set_custom_trace(halide_trace_t trace);
// @}

/** The header of a packet in a binary trace. All fields are 32-bit. */
struct halide_trace_packet_t {
    /** The total size of this packet in bytes. Always a multiple of
     * four. Equivalently, the number of bytes until the next
     * packet. */
    uint32_t size;

    /** The id of this packet (for the purpose of parent_id). */
    int32_t id;

    /** The remaining fields are equivalent to those in halide_trace_event_t */
    // @{
    struct halide_type_t type;
    enum halide_trace_event_code_t event;
    int32_t parent_id;
    int32_t value_index;
    int32_t dimensions;
    // @}

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    // If we don't explicitly mark the default ctor as inline,
    // certain build configurations can fail (notably iOS)
    HALIDE_ALWAYS_INLINE halide_trace_packet_t() = default;

    /** Get the coordinates array, assuming this packet is laid out in
     * memory as it was written. The coordinates array comes
     * immediately after the packet header. */
    HALIDE_ALWAYS_INLINE const int *coordinates() const {
        return (const int *)(this + 1);
    }

    HALIDE_ALWAYS_INLINE int *coordinates() {
        return (int *)(this + 1);
    }

    /** Get the value, assuming this packet is laid out in memory as
     * it was written. The packet comes immediately after the coordinates
     * array. */
    HALIDE_ALWAYS_INLINE const void *value() const {
        return (const void *)(coordinates() + dimensions);
    }

    HALIDE_ALWAYS_INLINE void *value() {
        return (void *)(coordinates() + dimensions);
    }

    /** Get the func name, assuming this packet is laid out in memory
     * as it was written. It comes after the value. */
    HALIDE_ALWAYS_INLINE const char *func() const {
        return (const char *)value() + type.lanes * type.bytes();
    }

    HALIDE_ALWAYS_INLINE char *func() {
        return (char *)value() + type.lanes * type.bytes();
    }

    /** Get the trace_tag (if any), assuming this packet is laid out in memory
     * as it was written. It comes after the func name. If there is no trace_tag,
     * this will return a pointer to an empty string. */
    HALIDE_ALWAYS_INLINE const char *trace_tag() const {
        const char *f = func();
        // strlen may not be available here
        while (*f++) {
            // nothing
        }
        return f;
    }

    HALIDE_ALWAYS_INLINE char *trace_tag() {
        char *f = func();
        // strlen may not be available here
        while (*f++) {
            // nothing
        }
        return f;
    }
#endif
};

/** Set the file descriptor that Halide should write binary trace
 * events to. If called with 0 as the argument, Halide outputs trace
 * information to stdout in a human-readable format. If never called,
 * Halide checks the for existence of an environment variable called
 * HL_TRACE_FILE and opens that file. If HL_TRACE_FILE is not defined,
 * it outputs trace information to stdout in a human-readable
 * format. */
extern void halide_set_trace_file(int fd);

/** Halide calls this to retrieve the file descriptor to write binary
 * trace events to. The default implementation returns the value set
 * by halide_set_trace_file. Implement it yourself if you wish to use
 * a custom file descriptor per user_context. Return zero from your
 * implementation to tell Halide to print human-readable trace
 * information to stdout. */
extern int halide_get_trace_file(void *user_context);

/** If tracing is writing to a file. This call closes that file
 * (flushing the trace). Returns zero on success. */
extern int halide_shutdown_trace();

/** All Halide GPU or device backend implementations provide an
 * interface to be used with halide_device_malloc, etc. This is
 * accessed via the functions below.
 */

/** An opaque struct containing per-GPU API implementations of the
 * device functions. */
struct halide_device_interface_impl_t;

/** Each GPU API provides a halide_device_interface_t struct pointing
 * to the code that manages device allocations. You can access these
 * functions directly from the struct member function pointers, or by
 * calling the functions declared below. Note that the global
 * functions are not available when using Halide as a JIT compiler.
 * If you are using raw halide_buffer_t in that context you must use
 * the function pointers in the device_interface struct.
 *
 * The function pointers below are currently the same for every GPU
 * API; only the impl field varies. These top-level functions do the
 * bookkeeping that is common across all GPU APIs, and then dispatch
 * to more API-specific functions via another set of function pointers
 * hidden inside the impl field.
 */
struct halide_device_interface_t {
    int (*device_malloc)(void *user_context, struct halide_buffer_t *buf,
                         const struct halide_device_interface_t *device_interface);
    int (*device_free)(void *user_context, struct halide_buffer_t *buf);
    int (*device_sync)(void *user_context, struct halide_buffer_t *buf);
    void (*device_release)(void *user_context,
                           const struct halide_device_interface_t *device_interface);
    int (*copy_to_host)(void *user_context, struct halide_buffer_t *buf);
    int (*copy_to_device)(void *user_context, struct halide_buffer_t *buf,
                          const struct halide_device_interface_t *device_interface);
    int (*device_and_host_malloc)(void *user_context, struct halide_buffer_t *buf,
                                  const struct halide_device_interface_t *device_interface);
    int (*device_and_host_free)(void *user_context, struct halide_buffer_t *buf);
    int (*buffer_copy)(void *user_context, struct halide_buffer_t *src,
                       const struct halide_device_interface_t *dst_device_interface, struct halide_buffer_t *dst);
    int (*device_crop)(void *user_context, const struct halide_buffer_t *src,
                       struct halide_buffer_t *dst);
    int (*device_slice)(void *user_context, const struct halide_buffer_t *src,
                        int slice_dim, int slice_pos, struct halide_buffer_t *dst);
    int (*device_release_crop)(void *user_context, struct halide_buffer_t *buf);
    int (*wrap_native)(void *user_context, struct halide_buffer_t *buf, uint64_t handle,
                       const struct halide_device_interface_t *device_interface);
    int (*detach_native)(void *user_context, struct halide_buffer_t *buf);
    int (*compute_capability)(void *user_context, int *major, int *minor);
    const struct halide_device_interface_impl_t *impl;
};

/** Release all data associated with the given device interface, in
 * particular all resources (memory, texture, context handles)
 * allocated by Halide. Must be called explicitly when using AOT
 * compilation. This is *not* thread-safe with respect to actively
 * running Halide code. Ensure all pipelines are finished before
 * calling this. */
extern void halide_device_release(void *user_context,
                                  const struct halide_device_interface_t *device_interface);

/** Copy image data from device memory to host memory. This must be called
 * explicitly to copy back the results of a GPU-based filter. */
extern int halide_copy_to_host(void *user_context, struct halide_buffer_t *buf);

/** Copy image data from host memory to device memory. This should not
 * be called directly; Halide handles copying to the device
 * automatically.  If interface is NULL and the buf has a non-zero dev
 * field, the device associated with the dev handle will be
 * used. Otherwise if the dev field is 0 and interface is NULL, an
 * error is returned. */
extern int halide_copy_to_device(void *user_context, struct halide_buffer_t *buf,
                                 const struct halide_device_interface_t *device_interface);

/** Copy data from one buffer to another. The buffers may have
 * different shapes and sizes, but the destination buffer's shape must
 * be contained within the source buffer's shape. That is, for each
 * dimension, the min on the destination buffer must be greater than
 * or equal to the min on the source buffer, and min+extent on the
 * destination buffer must be less that or equal to min+extent on the
 * source buffer. The source data is pulled from either device or
 * host memory on the source, depending on the dirty flags. host is
 * preferred if both are valid. The dst_device_interface parameter
 * controls the destination memory space. NULL means host memory. */
extern int halide_buffer_copy(void *user_context, struct halide_buffer_t *src,
                              const struct halide_device_interface_t *dst_device_interface,
                              struct halide_buffer_t *dst);


/** Copy data from one buffer to another using user DMA instructions in Hexagon.
 * This is supported only on Hexagon v68 and above. Therefore, this requires
 * use of target feature 'hvx_v68'. */
extern int halide_hexagon_user_dma_buffer_copy(void *user_context, struct halide_buffer_t *src,
                                               const struct halide_device_interface_t *dst_device_interface,
                                               struct halide_buffer_t *dst);

/** Copy compressed/linear data from one buffer to another using UBWCDMA engine in Hexagon.
 * UBWCDMA engine transfers to/from Locked L2 cache of Hexagon.*/
extern int halide_hexagon_dma_buffer_copy(void *user_context, struct halide_buffer_t *src,
                                          const struct halide_device_interface_t *dst_device_interface,
                                          struct halide_buffer_t *dst);

/** At runtime, this function decides if the buffer copy should be dispatched to
 * UBWCDMA or other buffer-copy call. Halide compiler will insert this call in the
 * pipeline itself without user requiring to call this explicitly.*/
extern int halide_hexagon_dma_buffer_copy_dispatch(void *user_context, struct halide_buffer_t *src,
                                                   const struct halide_device_interface_t *dst_device_interface,
                                                   struct halide_buffer_t *dst);

/** Give the destination buffer a device allocation which is an alias
 * for the same coordinate range in the source buffer. Modifies the
 * device, device_interface, and the device_dirty flag only. Only
 * supported by some device APIs (others will return
 * halide_error_code_device_crop_unsupported). Call
 * halide_device_release_crop instead of halide_device_free to clean
 * up resources associated with the cropped view. Do not free the
 * device allocation on the source buffer while the destination buffer
 * still lives. Note that the two buffers do not share dirty flags, so
 * care must be taken to update them together as needed. Note that src
 * and dst are required to have the same number of dimensions.
 *
 * Note also that (in theory) device interfaces which support cropping may
 * still not support cropping a crop (instead, create a new crop of the parent
 * buffer); in practice, no known implementation has this limitation, although
 * it is possible that some future implementations may require it. */
extern int halide_device_crop(void *user_context,
                              const struct halide_buffer_t *src,
                              struct halide_buffer_t *dst);

/** Give the destination buffer a device allocation which is an alias
 * for a similar coordinate range in the source buffer, but with one dimension
 * sliced away in the dst. Modifies the device, device_interface, and the
 * device_dirty flag only. Only supported by some device APIs (others will return
 * halide_error_code_device_crop_unsupported). Call
 * halide_device_release_crop instead of halide_device_free to clean
 * up resources associated with the sliced view. Do not free the
 * device allocation on the source buffer while the destination buffer
 * still lives. Note that the two buffers do not share dirty flags, so
 * care must be taken to update them together as needed. Note that the dst buffer
 * must have exactly one fewer dimension than the src buffer, and that slice_dim
 * and slice_pos must be valid within src. */
extern int halide_device_slice(void *user_context,
                               const struct halide_buffer_t *src,
                               int slice_dim, int slice_pos,
                               struct halide_buffer_t *dst);

/** Release any resources associated with a cropped/sliced view of another
 * buffer. */
extern int halide_device_release_crop(void *user_context,
                                      struct halide_buffer_t *buf);

/** Wait for current GPU operations to complete. Calling this explicitly
 * should rarely be necessary, except maybe for profiling. */
extern int halide_device_sync(void *user_context, struct halide_buffer_t *buf);

/** Allocate device memory to back a halide_buffer_t. */
extern int halide_device_malloc(void *user_context, struct halide_buffer_t *buf,
                                const struct halide_device_interface_t *device_interface);

/** Free device memory. */
extern int halide_device_free(void *user_context, struct halide_buffer_t *buf);

/** Wrap or detach a native device handle, setting the device field
 * and device_interface field as appropriate for the given GPU
 * API. The meaning of the opaque handle is specific to the device
 * interface, so if you know the device interface in use, call the
 * more specific functions in the runtime headers for your specific
 * device API instead (e.g. HalideRuntimeCuda.h). */
// @{
extern int halide_device_wrap_native(void *user_context,
                                     struct halide_buffer_t *buf,
                                     uint64_t handle,
                                     const struct halide_device_interface_t *device_interface);
extern int halide_device_detach_native(void *user_context, struct halide_buffer_t *buf);
// @}

/** Selects which gpu device to use. 0 is usually the display
 * device. If never called, Halide uses the environment variable
 * HL_GPU_DEVICE. If that variable is unset, Halide uses the last
 * device. Set this to -1 to use the last device. */
extern void halide_set_gpu_device(int n);

/** Halide calls this to get the desired halide gpu device
 * setting. Implement this yourself to use a different gpu device per
 * user_context. The default implementation returns the value set by
 * halide_set_gpu_device, or the environment variable
 * HL_GPU_DEVICE. */
extern int halide_get_gpu_device(void *user_context);

/** Set the soft maximum amount of memory, in bytes, that the LRU
 *  cache will use to memoize Func results.  This is not a strict
 *  maximum in that concurrency and simultaneous use of memoized
 *  reults larger than the cache size can both cause it to
 *  temporariliy be larger than the size specified here.
 */
extern void halide_memoization_cache_set_size(int64_t size);

/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, determine if the result is in the cache and
 *  return it if so. (The internals of the cache key should be
 *  considered opaque by this function.) If this routine returns true,
 *  it is a cache miss. Otherwise, it will return false and the
 *  buffers passed in will be filled, via copying, with memoized
 *  data. The last argument is a list if halide_buffer_t pointers which
 *  represents the outputs of the memoized Func. If the Func does not
 *  return a Tuple, there will only be one halide_buffer_t in the list. The
 *  tuple_count parameters determines the length of the list.
 *
 * The return values are:
 * -1: Signals an error.
 *  0: Success and cache hit.
 *  1: Success and cache miss.
 */
extern int halide_memoization_cache_lookup(void *user_context, const uint8_t *cache_key, int32_t size,
                                           struct halide_buffer_t *realized_bounds,
                                           int32_t tuple_count, struct halide_buffer_t **tuple_buffers);

/** Given a cache key for a memoized result, currently constructed
 *  from the Func name and top-level Func name plus the arguments of
 *  the computation, store the result in the cache for futre access by
 *  halide_memoization_cache_lookup. (The internals of the cache key
 *  should be considered opaque by this function.) Data is copied out
 *  from the inputs and inputs are unmodified. The last argument is a
 *  list if halide_buffer_t pointers which represents the outputs of the
 *  memoized Func. If the Func does not return a Tuple, there will
 *  only be one halide_buffer_t in the list. The tuple_count parameters
 *  determines the length of the list.
 *
 * If there is a memory allocation failure, the store does not store
 * the data into the cache.
 *
 * If has_eviction_key is true, the entry is marked with eviction_key to
 * allow removing the key with halide_memoization_cache_evict.
 */
extern int halide_memoization_cache_store(void *user_context, const uint8_t *cache_key, int32_t size,
                                          struct halide_buffer_t *realized_bounds,
                                          int32_t tuple_count,
                                          struct halide_buffer_t **tuple_buffers,
                                          bool has_eviction_key, uint64_t eviction_key);

/** Evict all cache entries that were tagged with the given
 *  eviction_key in the memoize scheduling directive.
 */
extern void halide_memoization_cache_evict(void *user_context, uint64_t eviction_key);

/** If halide_memoization_cache_lookup succeeds,
 * halide_memoization_cache_release must be called to signal the
 * storage is no longer being used by the caller. It will be passed
 * the host pointer of one the buffers returned by
 * halide_memoization_cache_lookup. That is
 * halide_memoization_cache_release will be called multiple times for
 * the case where halide_memoization_cache_lookup is handling multiple
 * buffers.  (This corresponds to memoizing a Tuple in Halide.) Note
 * that the host pointer must be sufficient to get to all information
 * the relase operation needs. The default Halide cache impleemntation
 * accomplishes this by storing extra data before the start of the user
 * modifiable host storage.
 *
 * This call is like free and does not have a failure return.
 */
extern void halide_memoization_cache_release(void *user_context, void *host);

/** Free all memory and resources associated with the memoization cache.
 * Must be called at a time when no other threads are accessing the cache.
 */
extern void halide_memoization_cache_cleanup();

/** Verify that a given range of memory has been initialized; only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_check_mem_is_initialized() function.
 *
 * The return value should always be zero.
 */
extern int halide_msan_check_memory_is_initialized(void *user_context, const void *ptr, uint64_t len, const char *name);

/** Verify that the data pointed to by the halide_buffer_t is initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_check_memory_is_initialized() for checking.
 *
 * The default implementation takes pains to only check the active memory ranges
 * (skipping padding), and sorting into ranges to always check the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */
extern int halide_msan_check_buffer_is_initialized(void *user_context, struct halide_buffer_t *buffer, const char *buf_name);

/** Annotate that a given range of memory has been initialized;
 * only used when Target::MSAN is enabled.
 *
 * The default implementation simply calls the LLVM-provided __msan_unpoison() function.
 *
 * The return value should always be zero.
 */
extern int halide_msan_annotate_memory_is_initialized(void *user_context, const void *ptr, uint64_t len);

/** Mark the data pointed to by the halide_buffer_t as initialized (but *not* the halide_buffer_t itself),
 * using halide_msan_annotate_memory_is_initialized() for marking.
 *
 * The default implementation takes pains to only mark the active memory ranges
 * (skipping padding), and sorting into ranges to always mark the smallest number of
 * ranges, in monotonically increasing memory order.
 *
 * Most client code should never need to replace the default implementation.
 *
 * The return value should always be zero.
 */
extern int halide_msan_annotate_buffer_is_initialized(void *user_context, struct halide_buffer_t *buffer);
extern void halide_msan_annotate_buffer_is_initialized_as_destructor(void *user_context, void *buffer);

/** The error codes that may be returned by a Halide pipeline. */
enum halide_error_code_t {
    /** There was no error. This is the value returned by Halide on success. */
    halide_error_code_success = 0,

    /** An uncategorized error occurred. Refer to the string passed to halide_error. */
    halide_error_code_generic_error = -1,

    /** A Func was given an explicit bound via Func::bound, but this
     * was not large enough to encompass the region that is used of
     * the Func by the rest of the pipeline. */
    halide_error_code_explicit_bounds_too_small = -2,

    /** The elem_size field of a halide_buffer_t does not match the size in
     * bytes of the type of that ImageParam. Probable type mismatch. */
    halide_error_code_bad_type = -3,

    /** A pipeline would access memory outside of the halide_buffer_t passed
     * in. */
    halide_error_code_access_out_of_bounds = -4,

    /** A halide_buffer_t was given that spans more than 2GB of memory. */
    halide_error_code_buffer_allocation_too_large = -5,

    /** A halide_buffer_t was given with extents that multiply to a number
     * greater than 2^31-1 */
    halide_error_code_buffer_extents_too_large = -6,

    /** Applying explicit constraints on the size of an input or
     * output buffer shrank the size of that buffer below what will be
     * accessed by the pipeline. */
    halide_error_code_constraints_make_required_region_smaller = -7,

    /** A constraint on a size or stride of an input or output buffer
     * was not met by the halide_buffer_t passed in. */
    halide_error_code_constraint_violated = -8,

    /** A scalar parameter passed in was smaller than its minimum
     * declared value. */
    halide_error_code_param_too_small = -9,

    /** A scalar parameter passed in was greater than its minimum
     * declared value. */
    halide_error_code_param_too_large = -10,

    /** A call to halide_malloc returned NULL. */
    halide_error_code_out_of_memory = -11,

    /** A halide_buffer_t pointer passed in was NULL. */
    halide_error_code_buffer_argument_is_null = -12,

    /** debug_to_file failed to open or write to the specified
     * file. */
    halide_error_code_debug_to_file_failed = -13,

    /** The Halide runtime encountered an error while trying to copy
     * from device to host. Turn on -debug in your target string to
     * see more details. */
    halide_error_code_copy_to_host_failed = -14,

    /** The Halide runtime encountered an error while trying to copy
     * from host to device. Turn on -debug in your target string to
     * see more details. */
    halide_error_code_copy_to_device_failed = -15,

    /** The Halide runtime encountered an error while trying to
     * allocate memory on device. Turn on -debug in your target string
     * to see more details. */
    halide_error_code_device_malloc_failed = -16,

    /** The Halide runtime encountered an error while trying to
     * synchronize with a device. Turn on -debug in your target string
     * to see more details. */
    halide_error_code_device_sync_failed = -17,

    /** The Halide runtime encountered an error while trying to free a
     * device allocation. Turn on -debug in your target string to see
     * more details. */
    halide_error_code_device_free_failed = -18,

    /** Buffer has a non-zero device but no device interface, which
     * violates a Halide invariant. */
    halide_error_code_no_device_interface = -19,

    /** An error occurred when attempting to initialize the Matlab
     * runtime. */
    halide_error_code_matlab_init_failed = -20,

    /** The type of an mxArray did not match the expected type. */
    halide_error_code_matlab_bad_param_type = -21,

    /** There is a bug in the Halide compiler. */
    halide_error_code_internal_error = -22,

    /** The Halide runtime encountered an error while trying to launch
     * a GPU kernel. Turn on -debug in your target string to see more
     * details. */
    halide_error_code_device_run_failed = -23,

    /** The Halide runtime encountered a host pointer that violated
     * the alignment set for it by way of a call to
     * set_host_alignment */
    halide_error_code_unaligned_host_ptr = -24,

    /** A fold_storage directive was used on a dimension that is not
     * accessed in a monotonically increasing or decreasing fashion. */
    halide_error_code_bad_fold = -25,

    /** A fold_storage directive was used with a fold factor that was
     * too small to store all the values of a producer needed by the
     * consumer. */
    halide_error_code_fold_factor_too_small = -26,

    /** User-specified require() expression was not satisfied. */
    halide_error_code_requirement_failed = -27,

    /** At least one of the buffer's extents are negative. */
    halide_error_code_buffer_extents_negative = -28,

    halide_error_code_unused_29 = -29,

    halide_error_code_unused_30 = -30,

    /** A specialize_fail() schedule branch was selected at runtime. */
    halide_error_code_specialize_fail = -31,

    /** The Halide runtime encountered an error while trying to wrap a
     * native device handle.  Turn on -debug in your target string to
     * see more details. */
    halide_error_code_device_wrap_native_failed = -32,

    /** The Halide runtime encountered an error while trying to detach
     * a native device handle.  Turn on -debug in your target string
     * to see more details. */
    halide_error_code_device_detach_native_failed = -33,

    /** The host field on an input or output was null, the device
     * field was not zero, and the pipeline tries to use the buffer on
     * the host. You may be passing a GPU-only buffer to a pipeline
     * which is scheduled to use it on the CPU. */
    halide_error_code_host_is_null = -34,

    /** A folded buffer was passed to an extern stage, but the region
     * touched wraps around the fold boundary. */
    halide_error_code_bad_extern_fold = -35,

    /** Buffer has a non-null device_interface but device is 0, which
     * violates a Halide invariant. */
    halide_error_code_device_interface_no_device = -36,

    /** Buffer has both host and device dirty bits set, which violates
     * a Halide invariant. */
    halide_error_code_host_and_device_dirty = -37,

    /** The halide_buffer_t * passed to a halide runtime routine is
     * nullptr and this is not allowed. */
    halide_error_code_buffer_is_null = -38,

    /** The Halide runtime encountered an error while trying to copy
     * from one buffer to another. Turn on -debug in your target
     * string to see more details. */
    halide_error_code_device_buffer_copy_failed = -39,

    /** Attempted to make cropped/sliced alias of a buffer with a device
     * field, but the device_interface does not support cropping. */
    halide_error_code_device_crop_unsupported = -40,

    /** Cropping/slicing a buffer failed for some other reason. Turn on -debug
     * in your target string. */
    halide_error_code_device_crop_failed = -41,

    /** An operation on a buffer required an allocation on a
     * particular device interface, but a device allocation already
     * existed on a different device interface. Free the old one
     * first. */
    halide_error_code_incompatible_device_interface = -42,

    /** The dimensions field of a halide_buffer_t does not match the dimensions of that ImageParam. */
    halide_error_code_bad_dimensions = -43,

    /** A buffer with the device_dirty flag set was passed to a
     * pipeline compiled with no device backends enabled, so it
     * doesn't know how to copy the data back from device memory to
     * host memory. Either call copy_to_host before calling the Halide
     * pipeline, or enable the appropriate device backend. */
    halide_error_code_device_dirty_with_no_device_support = -44,

    /** A call to halide_vtcm_malloc returned NULL. */
    halide_error_code_vtcm_out_of_memory = -45,

    /** A call to halide_locked_cache_malloc returned NULL. */
    halide_error_code_locked_cache_out_of_memory = -46,

    /** A call to halide_malloc for MemoryType::GPUShared returned NULL. */
    halide_error_code_gpu_shared_out_of_memory = -47,

    /** Allocation for Hexagon User DMA Descriptor failed. */
    halide_hexagon_user_dma_alloc_desc_and_set_value_fail = -48,

    /** Hexagon User DMA operation failed. */
    halide_hexagon_user_dma_fail = -49,

    /** Resetting Hexagon User DMA Engine failed. */
    halide_hexagon_user_dma_reset_fail = -50,
};

/** Halide calls the functions below on various error conditions. The
 * default implementations construct an error message, call
 * halide_error, then return the matching error code above. On
 * platforms that support weak linking, you can override these to
 * catch the errors individually. */

/** A call into an extern stage for the purposes of bounds inference
 * failed. Returns the error code given by the extern stage. */
extern int halide_error_bounds_inference_call_failed(void *user_context, const char *extern_stage_name, int result);

/** A call to an extern stage failed. Returned the error code given by
 * the extern stage. */
extern int halide_error_extern_stage_failed(void *user_context, const char *extern_stage_name, int result);

/** Various other error conditions. See the enum above for a
 * description of each. */
// @{
extern int halide_error_explicit_bounds_too_small(void *user_context, const char *func_name, const char *var_name,
                                                  int min_bound, int max_bound, int min_required, int max_required);
extern int halide_error_bad_type(void *user_context, const char *func_name,
                                 uint32_t type_given, uint32_t correct_type);  // N.B. The last two args are the bit representation of a halide_type_t
extern int halide_error_bad_dimensions(void *user_context, const char *func_name,
                                       int32_t dimensions_given, int32_t correct_dimensions);
extern int halide_error_access_out_of_bounds(void *user_context, const char *func_name,
                                             int dimension, int min_touched, int max_touched,
                                             int min_valid, int max_valid);
extern int halide_error_buffer_allocation_too_large(void *user_context, const char *buffer_name,
                                                    uint64_t allocation_size, uint64_t max_size);
extern int halide_error_buffer_extents_negative(void *user_context, const char *buffer_name, int dimension, int extent);
extern int halide_error_buffer_extents_too_large(void *user_context, const char *buffer_name,
                                                 int64_t actual_size, int64_t max_size);
extern int halide_error_constraints_make_required_region_smaller(void *user_context, const char *buffer_name,
                                                                 int dimension,
                                                                 int constrained_min, int constrained_extent,
                                                                 int required_min, int required_extent);
extern int halide_error_constraint_violated(void *user_context, const char *var, int val,
                                            const char *constrained_var, int constrained_val);
extern int halide_error_param_too_small_i64(void *user_context, const char *param_name,
                                            int64_t val, int64_t min_val);
extern int halide_error_param_too_small_u64(void *user_context, const char *param_name,
                                            uint64_t val, uint64_t min_val);
extern int halide_error_param_too_small_f64(void *user_context, const char *param_name,
                                            double val, double min_val);
extern int halide_error_param_too_large_i64(void *user_context, const char *param_name,
                                            int64_t val, int64_t max_val);
extern int halide_error_param_too_large_u64(void *user_context, const char *param_name,
                                            uint64_t val, uint64_t max_val);
extern int halide_error_param_too_large_f64(void *user_context, const char *param_name,
                                            double val, double max_val);
extern int halide_error_out_of_memory(void *user_context);
extern int halide_error_vtcm_out_of_memory(void *user_context);
extern int halide_error_locked_cache_out_of_memory(void *user_context);
extern int halide_error_gpu_shared_out_of_memory(void *user_context);
extern int halide_error_buffer_argument_is_null(void *user_context, const char *buffer_name);
extern int halide_error_debug_to_file_failed(void *user_context, const char *func,
                                             const char *filename, int error_code);
extern int halide_error_unaligned_host_ptr(void *user_context, const char *func_name, int alignment);
extern int halide_error_host_is_null(void *user_context, const char *func_name);
extern int halide_error_bad_fold(void *user_context, const char *func_name, const char *var_name,
                                 const char *loop_name);
extern int halide_error_bad_extern_fold(void *user_context, const char *func_name,
                                        int dim, int min, int extent, int valid_min, int fold_factor);

extern int halide_error_fold_factor_too_small(void *user_context, const char *func_name, const char *var_name,
                                              int fold_factor, const char *loop_name, int required_extent);
extern int halide_error_requirement_failed(void *user_context, const char *condition, const char *message);
extern int halide_error_specialize_fail(void *user_context, const char *message);
extern int halide_error_no_device_interface(void *user_context);
extern int halide_error_device_interface_no_device(void *user_context);
extern int halide_error_host_and_device_dirty(void *user_context);
extern int halide_error_buffer_is_null(void *user_context, const char *routine);
extern int halide_error_device_dirty_with_no_device_support(void *user_context, const char *buffer_name);
// @}

/** Optional features a compilation Target can have.
 * Be sure to keep this in sync with the Feature enum in Target.h and the implementation of
 * get_runtime_compatible_target in Target.cpp if you add a new feature.
 */
typedef enum halide_target_feature_t {
    halide_target_feature_jit = 0,          ///< Generate code that will run immediately inside the calling process.
    halide_target_feature_debug,            ///< Turn on debug info and output for runtime code.
    halide_target_feature_no_asserts,       ///< Disable all runtime checks, for slightly tighter code.
    halide_target_feature_no_bounds_query,  ///< Disable the bounds querying functionality.

    halide_target_feature_sse41,  ///< Use SSE 4.1 and earlier instructions. Only relevant on x86.
    halide_target_feature_avx,    ///< Use AVX 1 instructions. Only relevant on x86.
    halide_target_feature_avx2,   ///< Use AVX 2 instructions. Only relevant on x86.
    halide_target_feature_fma,    ///< Enable x86 FMA instruction
    halide_target_feature_fma4,   ///< Enable x86 (AMD) FMA4 instruction set
    halide_target_feature_f16c,   ///< Enable x86 16-bit float support

    halide_target_feature_armv7s,   ///< Generate code for ARMv7s. Only relevant for 32-bit ARM.
    halide_target_feature_no_neon,  ///< Avoid using NEON instructions. Only relevant for 32-bit ARM.

    halide_target_feature_vsx,              ///< Use VSX instructions. Only relevant on POWERPC.
    halide_target_feature_power_arch_2_07,  ///< Use POWER ISA 2.07 new instructions. Only relevant on POWERPC.

    halide_target_feature_cuda,               ///< Enable the CUDA runtime. Defaults to compute capability 2.0 (Fermi)
    halide_target_feature_cuda_capability30,  ///< Enable CUDA compute capability 3.0 (Kepler)
    halide_target_feature_cuda_capability32,  ///< Enable CUDA compute capability 3.2 (Tegra K1)
    halide_target_feature_cuda_capability35,  ///< Enable CUDA compute capability 3.5 (Kepler)
    halide_target_feature_cuda_capability50,  ///< Enable CUDA compute capability 5.0 (Maxwell)
    halide_target_feature_cuda_capability61,  ///< Enable CUDA compute capability 6.1 (Pascal)
    halide_target_feature_cuda_capability70,  ///< Enable CUDA compute capability 7.0 (Volta)
    halide_target_feature_cuda_capability75,  ///< Enable CUDA compute capability 7.5 (Turing)
    halide_target_feature_cuda_capability80,  ///< Enable CUDA compute capability 8.0 (Ampere)

    halide_target_feature_opencl,       ///< Enable the OpenCL runtime.
    halide_target_feature_cl_doubles,   ///< Enable double support on OpenCL targets
    halide_target_feature_cl_atomic64,  ///< Enable 64-bit atomics operations on OpenCL targets

    halide_target_feature_openglcompute,  ///< Enable OpenGL Compute runtime.

    halide_target_feature_user_context,  ///< Generated code takes a user_context pointer as first argument

    halide_target_feature_matlab,  ///< Generate a mexFunction compatible with Matlab mex libraries. See tools/mex_halide.m.

    halide_target_feature_profile,     ///< Launch a sampling profiler alongside the Halide pipeline that monitors and reports the runtime used by each Func
    halide_target_feature_no_runtime,  ///< Do not include a copy of the Halide runtime in any generated object file or assembly

    halide_target_feature_metal,  ///< Enable the (Apple) Metal runtime.

    halide_target_feature_c_plus_plus_mangling,  ///< Generate C++ mangled names for result function, et al

    halide_target_feature_large_buffers,  ///< Enable 64-bit buffer indexing to support buffers > 2GB. Ignored if bits != 64.

    halide_target_feature_hvx_128,                ///< Enable HVX 128 byte mode.
    halide_target_feature_fuzz_float_stores,      ///< On every floating point store, set the last bit of the mantissa to zero. Pipelines for which the output is very different with this feature enabled may also produce very different output on different processors.
    halide_target_feature_soft_float_abi,         ///< Enable soft float ABI. This only enables the soft float ABI calling convention, which does not necessarily use soft floats.
    halide_target_feature_msan,                   ///< Enable hooks for MSAN support.
    halide_target_feature_avx512,                 ///< Enable the base AVX512 subset supported by all AVX512 architectures. The specific feature sets are AVX-512F and AVX512-CD. See https://en.wikipedia.org/wiki/AVX-512 for a description of each AVX subset.
    halide_target_feature_avx512_knl,             ///< Enable the AVX512 features supported by Knight's Landing chips, such as the Xeon Phi x200. This includes the base AVX512 set, and also AVX512-CD and AVX512-ER.
    halide_target_feature_avx512_skylake,         ///< Enable the AVX512 features supported by Skylake Xeon server processors. This adds AVX512-VL, AVX512-BW, and AVX512-DQ to the base set. The main difference from the base AVX512 set is better support for small integer ops. Note that this does not include the Knight's Landing features. Note also that these features are not available on Skylake desktop and mobile processors.
    halide_target_feature_avx512_cannonlake,      ///< Enable the AVX512 features expected to be supported by future Cannonlake processors. This includes all of the Skylake features, plus AVX512-IFMA and AVX512-VBMI.
    halide_target_feature_avx512_sapphirerapids,  ///< Enable the AVX512 features supported by Sapphire Rapids processors. This include all of the Cannonlake features, plus AVX512-VNNI and AVX512-BF16.
    halide_target_feature_hvx_use_shared_object,  ///< Deprecated
    halide_target_feature_trace_loads,            ///< Trace all loads done by the pipeline. Equivalent to calling Func::trace_loads on every non-inlined Func.
    halide_target_feature_trace_stores,           ///< Trace all stores done by the pipeline. Equivalent to calling Func::trace_stores on every non-inlined Func.
    halide_target_feature_trace_realizations,     ///< Trace all realizations done by the pipeline. Equivalent to calling Func::trace_realizations on every non-inlined Func.
    halide_target_feature_trace_pipeline,         ///< Trace the pipeline.
    halide_target_feature_hvx_v66,                ///< Enable Hexagon v66 architecture.
    halide_target_feature_hvx_v68,                ///< Enable Hexagon v68 architecture.
    halide_target_feature_cl_half,                ///< Enable half support on OpenCL targets
    halide_target_feature_strict_float,           ///< Turn off all non-IEEE floating-point optimization. Currently applies only to LLVM targets.
    halide_target_feature_tsan,                   ///< Enable hooks for TSAN support.
    halide_target_feature_asan,                   ///< Enable hooks for ASAN support.
    halide_target_feature_d3d12compute,           ///< Enable Direct3D 12 Compute runtime.
    halide_target_feature_check_unsafe_promises,  ///< Insert assertions for promises.
    halide_target_feature_hvx_sysmon,             ///< Enable sysmon markers
    halide_target_feature_hexagon_dma,            ///< Enable Hexagon DMA buffers.
    halide_target_feature_embed_bitcode,          ///< Emulate clang -fembed-bitcode flag.
    halide_target_feature_enable_llvm_loop_opt,   ///< Enable loop vectorization + unrolling in LLVM. Overrides halide_target_feature_disable_llvm_loop_opt. (Ignored for non-LLVM targets.)
    halide_target_feature_disable_llvm_loop_opt,  ///< Disable loop vectorization + unrolling in LLVM. (Ignored for non-LLVM targets.)
    halide_target_feature_wasm_simd128,           ///< Enable +simd128 instructions for WebAssembly codegen.
    halide_target_feature_wasm_signext,           ///< Enable +sign-ext instructions for WebAssembly codegen.
    halide_target_feature_wasm_sat_float_to_int,  ///< Enable saturating (nontrapping) float-to-int instructions for WebAssembly codegen.
    halide_target_feature_wasm_threads,           ///< Enable the thread pool for WebAssembly codegen. (Also enables +atomics)
    halide_target_feature_wasm_bulk_memory,       ///< Enable +bulk-memory instructions for WebAssembly codegen.
    halide_target_feature_sve,                    ///< Enable ARM Scalable Vector Extensions
    halide_target_feature_sve2,                   ///< Enable ARM Scalable Vector Extensions v2
    halide_target_feature_egl,                    ///< Force use of EGL support.
    halide_target_feature_arm_dot_prod,           ///< Enable ARMv8.2-a dotprod extension (i.e. udot and sdot instructions)
    halide_llvm_large_code_model,                 ///< Use the LLVM large code model to compile
    halide_target_feature_end                     ///< A sentinel. Every target is considered to have this feature, and setting this feature does nothing.
} halide_target_feature_t;

/** This function is called internally by Halide in some situations to determine
 * if the current execution environment can support the given set of
 * halide_target_feature_t flags. The implementation must do the following:
 *
 * -- If there are flags set in features that the function knows *cannot* be supported, return 0.
 * -- Otherwise, return 1.
 * -- Note that any flags set in features that the function doesn't know how to test should be ignored;
 * this implies that a return value of 1 means "not known to be bad" rather than "known to be good".
 *
 * In other words: a return value of 0 means "It is not safe to use code compiled with these features",
 * while a return value of 1 means "It is not obviously unsafe to use code compiled with these features".
 *
 * The default implementation simply calls halide_default_can_use_target_features.
 *
 * Note that `features` points to an array of `count` uint64_t; this array must contain enough
 * bits to represent all the currently known features. Any excess bits must be set to zero.
 */
// @{
extern int halide_can_use_target_features(int count, const uint64_t *features);
typedef int (*halide_can_use_target_features_t)(int count, const uint64_t *features);
extern halide_can_use_target_features_t halide_set_custom_can_use_target_features(halide_can_use_target_features_t);
// @}

/**
 * This is the default implementation of halide_can_use_target_features; it is provided
 * for convenience of user code that may wish to extend halide_can_use_target_features
 * but continue providing existing support, e.g.
 *
 *     int halide_can_use_target_features(int count, const uint64_t *features) {
 *          if (features[halide_target_somefeature >> 6] & (1LL << (halide_target_somefeature & 63))) {
 *              if (!can_use_somefeature()) {
 *                  return 0;
 *              }
 *          }
 *          return halide_default_can_use_target_features(count, features);
 *     }
 */
extern int halide_default_can_use_target_features(int count, const uint64_t *features);

typedef struct halide_dimension_t {
#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    int32_t min = 0, extent = 0, stride = 0;

    // Per-dimension flags. None are defined yet (This is reserved for future use).
    uint32_t flags = 0;

    HALIDE_ALWAYS_INLINE halide_dimension_t() = default;
    HALIDE_ALWAYS_INLINE halide_dimension_t(int32_t m, int32_t e, int32_t s, uint32_t f = 0)
        : min(m), extent(e), stride(s), flags(f) {
    }

    HALIDE_ALWAYS_INLINE bool operator==(const halide_dimension_t &other) const {
        return (min == other.min) &&
               (extent == other.extent) &&
               (stride == other.stride) &&
               (flags == other.flags);
    }

    HALIDE_ALWAYS_INLINE bool operator!=(const halide_dimension_t &other) const {
        return !(*this == other);
    }
#else
    int32_t min, extent, stride;

    // Per-dimension flags. None are defined yet (This is reserved for future use).
    uint32_t flags;
#endif
} halide_dimension_t;

#ifdef __cplusplus
}  // extern "C"
#endif

typedef enum { halide_buffer_flag_host_dirty = 1,
               halide_buffer_flag_device_dirty = 2 } halide_buffer_flags;

/**
 * The raw representation of an image passed around by generated
 * Halide code. It includes some stuff to track whether the image is
 * not actually in main memory, but instead on a device (like a
 * GPU). For a more convenient C++ wrapper, use Halide::Buffer<T>. */
typedef struct halide_buffer_t {
    /** A device-handle for e.g. GPU memory used to back this buffer. */
    uint64_t device;

    /** The interface used to interpret the above handle. */
    const struct halide_device_interface_t *device_interface;

    /** A pointer to the start of the data in main memory. In terms of
     * the Halide coordinate system, this is the address of the min
     * coordinates (defined below). */
    uint8_t *host;

    /** flags with various meanings. */
    uint64_t flags;

    /** The type of each buffer element. */
    struct halide_type_t type;

    /** The dimensionality of the buffer. */
    int32_t dimensions;

    /** The shape of the buffer. Halide does not own this array - you
     * must manage the memory for it yourself. */
    halide_dimension_t *dim;

    /** Pads the buffer up to a multiple of 8 bytes */
    void *padding;

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)
    /** Convenience methods for accessing the flags */
    // @{
    HALIDE_ALWAYS_INLINE bool get_flag(halide_buffer_flags flag) const {
        return (flags & flag) != 0;
    }

    HALIDE_ALWAYS_INLINE void set_flag(halide_buffer_flags flag, bool value) {
        if (value) {
            flags |= flag;
        } else {
            flags &= ~flag;
        }
    }

    HALIDE_ALWAYS_INLINE bool host_dirty() const {
        return get_flag(halide_buffer_flag_host_dirty);
    }

    HALIDE_ALWAYS_INLINE bool device_dirty() const {
        return get_flag(halide_buffer_flag_device_dirty);
    }

    HALIDE_ALWAYS_INLINE void set_host_dirty(bool v = true) {
        set_flag(halide_buffer_flag_host_dirty, v);
    }

    HALIDE_ALWAYS_INLINE void set_device_dirty(bool v = true) {
        set_flag(halide_buffer_flag_device_dirty, v);
    }
    // @}

    /** The total number of elements this buffer represents. Equal to
     * the product of the extents */
    HALIDE_ALWAYS_INLINE size_t number_of_elements() const {
        size_t s = 1;
        for (int i = 0; i < dimensions; i++) {
            s *= dim[i].extent;
        }
        return s;
    }

    /** A pointer to the element with the lowest address. If all
     * strides are positive, equal to the host pointer. */
    HALIDE_ALWAYS_INLINE uint8_t *begin() const {
        ptrdiff_t index = 0;
        for (int i = 0; i < dimensions; i++) {
            if (dim[i].stride < 0) {
                index += (ptrdiff_t)dim[i].stride * (dim[i].extent - 1);
            }
        }
        return host + index * type.bytes();
    }

    /** A pointer to one beyond the element with the highest address. */
    HALIDE_ALWAYS_INLINE uint8_t *end() const {
        ptrdiff_t index = 0;
        for (int i = 0; i < dimensions; i++) {
            if (dim[i].stride > 0) {
                index += (ptrdiff_t)dim[i].stride * (dim[i].extent - 1);
            }
        }
        index += 1;
        return host + index * type.bytes();
    }

    /** The total number of bytes spanned by the data in memory. */
    HALIDE_ALWAYS_INLINE size_t size_in_bytes() const {
        return (size_t)(end() - begin());
    }

    /** A pointer to the element at the given location. */
    HALIDE_ALWAYS_INLINE uint8_t *address_of(const int *pos) const {
        ptrdiff_t index = 0;
        for (int i = 0; i < dimensions; i++) {
            index += (ptrdiff_t)dim[i].stride * (pos[i] - dim[i].min);
        }
        return host + index * type.bytes();
    }

    /** Attempt to call device_sync for the buffer. If the buffer
     * has no device_interface (or no device_sync), this is a quiet no-op.
     * Calling this explicitly should rarely be necessary, except for profiling. */
    HALIDE_ALWAYS_INLINE int device_sync(void *ctx = nullptr) {
        if (device_interface && device_interface->device_sync) {
            return device_interface->device_sync(ctx, this);
        }
        return 0;
    }

    /** Check if an input buffer passed extern stage is a querying
     * bounds. Compared to doing the host pointer check directly,
     * this both adds clarity to code and will facilitate moving to
     * another representation for bounds query arguments. */
    HALIDE_ALWAYS_INLINE bool is_bounds_query() const {
        return host == nullptr && device == 0;
    }

#endif
} halide_buffer_t;

#ifdef __cplusplus
extern "C" {
#endif

#ifndef HALIDE_ATTRIBUTE_DEPRECATED
#ifdef HALIDE_ALLOW_DEPRECATED
#define HALIDE_ATTRIBUTE_DEPRECATED(x)
#else
#ifdef _MSC_VER
#define HALIDE_ATTRIBUTE_DEPRECATED(x) __declspec(deprecated(x))
#else
#define HALIDE_ATTRIBUTE_DEPRECATED(x) __attribute__((deprecated(x)))
#endif
#endif
#endif

/** halide_scalar_value_t is a simple union able to represent all the well-known
 * scalar values in a filter argument. Note that it isn't tagged with a type;
 * you must ensure you know the proper type before accessing. Most user
 * code will never need to create instances of this struct; its primary use
 * is to hold def/min/max values in a halide_filter_argument_t. (Note that
 * this is conceptually just a union; it's wrapped in a struct to ensure
 * that it doesn't get anonymized by LLVM.)
 */
struct halide_scalar_value_t {
    union {
        bool b;
        int8_t i8;
        int16_t i16;
        int32_t i32;
        int64_t i64;
        uint8_t u8;
        uint16_t u16;
        uint32_t u32;
        uint64_t u64;
        float f32;
        double f64;
        void *handle;
    } u;
#ifdef __cplusplus
    HALIDE_ALWAYS_INLINE halide_scalar_value_t() {
        u.u64 = 0;
    }
#endif
};

enum halide_argument_kind_t {
    halide_argument_kind_input_scalar = 0,
    halide_argument_kind_input_buffer = 1,
    halide_argument_kind_output_buffer = 2
};

/*
    These structs must be robust across different compilers and settings; when
    modifying them, strive for the following rules:

    1) All fields are explicitly sized. I.e. must use int32_t and not "int"
    2) All fields must land on an alignment boundary that is the same as their size
    3) Explicit padding is added to make that so
    4) The sizeof the struct is padded out to a multiple of the largest natural size thing in the struct
    5) don't forget that 32 and 64 bit pointers are different sizes
*/

/**
 * Obsolete version of halide_filter_argument_t; only present in
 * code that wrote halide_filter_metadata_t version 0.
 */
struct halide_filter_argument_t_v0 {
    const char *name;
    int32_t kind;
    int32_t dimensions;
    struct halide_type_t type;
    const struct halide_scalar_value_t *def, *min, *max;
};

/**
 * halide_filter_argument_t is essentially a plain-C-struct equivalent to
 * Halide::Argument; most user code will never need to create one.
 */
struct halide_filter_argument_t {
    const char *name;    // name of the argument; will never be null or empty.
    int32_t kind;        // actually halide_argument_kind_t
    int32_t dimensions;  // always zero for scalar arguments
    struct halide_type_t type;
    // These pointers should always be null for buffer arguments,
    // and *may* be null for scalar arguments. (A null value means
    // there is no def/min/max/estimate specified for this argument.)
    const struct halide_scalar_value_t *scalar_def, *scalar_min, *scalar_max, *scalar_estimate;
    // This pointer should always be null for scalar arguments,
    // and *may* be null for buffer arguments. If not null, it should always
    // point to an array of dimensions*2 pointers, which will be the (min, extent)
    // estimates for each dimension of the buffer. (Note that any of the pointers
    // may be null as well.)
    int64_t const *const *buffer_estimates;
};

struct halide_filter_metadata_t {
#ifdef __cplusplus
    static const int32_t VERSION = 1;
#endif

    /** version of this metadata; currently always 1. */
    int32_t version;

    /** The number of entries in the arguments field. This is always >= 1. */
    int32_t num_arguments;

    /** An array of the filters input and output arguments; this will never be
     * null. The order of arguments is not guaranteed (input and output arguments
     * may come in any order); however, it is guaranteed that all arguments
     * will have a unique name within a given filter. */
    const struct halide_filter_argument_t *arguments;

    /** The Target for which the filter was compiled. This is always
     * a canonical Target string (ie a product of Target::to_string). */
    const char *target;

    /** The function name of the filter. */
    const char *name;
};

/** halide_register_argv_and_metadata() is a **user-defined** function that
 * must be provided in order to use the registration.cc files produced
 * by Generators when the 'registration' output is requested. Each registration.cc
 * file provides a static initializer that calls this function with the given
 * filter's argv-call variant, its metadata, and (optionally) and additional
 * textual data that the build system chooses to tack on for its own purposes.
 * Note that this will be called at static-initializer time (i.e., before
 * main() is called), and in an unpredictable order. Note that extra_key_value_pairs
 * may be nullptr; if it's not null, it's expected to be a null-terminated list
 * of strings, with an even number of entries. */
void halide_register_argv_and_metadata(
    int (*filter_argv_call)(void **),
    const struct halide_filter_metadata_t *filter_metadata,
    const char *const *extra_key_value_pairs);

/** The functions below here are relevant for pipelines compiled with
 * the -profile target flag, which runs a sampling profiler thread
 * alongside the pipeline. */

/** Per-Func state tracked by the sampling profiler. */
struct halide_profiler_func_stats {
    /** Total time taken evaluating this Func (in nanoseconds). */
    uint64_t time;

    /** The current memory allocation of this Func. */
    uint64_t memory_current;

    /** The peak memory allocation of this Func. */
    uint64_t memory_peak;

    /** The total memory allocation of this Func. */
    uint64_t memory_total;

    /** The peak stack allocation of this Func's threads. */
    uint64_t stack_peak;

    /** The average number of thread pool worker threads active while computing this Func. */
    uint64_t active_threads_numerator, active_threads_denominator;

    /** The name of this Func. A global constant string. */
    const char *name;

    /** The total number of memory allocation of this Func. */
    int num_allocs;
};

/** Per-pipeline state tracked by the sampling profiler. These exist
 * in a linked list. */
struct halide_profiler_pipeline_stats {
    /** Total time spent inside this pipeline (in nanoseconds) */
    uint64_t time;

    /** The current memory allocation of funcs in this pipeline. */
    uint64_t memory_current;

    /** The peak memory allocation of funcs in this pipeline. */
    uint64_t memory_peak;

    /** The total memory allocation of funcs in this pipeline. */
    uint64_t memory_total;

    /** The average number of thread pool worker threads doing useful
     * work while computing this pipeline. */
    uint64_t active_threads_numerator, active_threads_denominator;

    /** The name of this pipeline. A global constant string. */
    const char *name;

    /** An array containing states for each Func in this pipeline. */
    struct halide_profiler_func_stats *funcs;

    /** The next pipeline_stats pointer. It's a void * because types
     * in the Halide runtime may not currently be recursive. */
    void *next;

    /** The number of funcs in this pipeline. */
    int num_funcs;

    /** An internal base id used to identify the funcs in this pipeline. */
    int first_func_id;

    /** The number of times this pipeline has been run. */
    int runs;

    /** The total number of samples taken inside of this pipeline. */
    int samples;

    /** The total number of memory allocation of funcs in this pipeline. */
    int num_allocs;
};

/** The global state of the profiler. */

struct halide_profiler_state {
    /** Guards access to the fields below. If not locked, the sampling
     * profiler thread is free to modify things below (including
     * reordering the linked list of pipeline stats). */
    struct halide_mutex lock;

    /** The amount of time the profiler thread sleeps between samples
     * in milliseconds. Defaults to 1 */
    int sleep_time;

    /** An internal id used for bookkeeping. */
    int first_free_id;

    /** The id of the current running Func. Set by the pipeline, read
     * periodically by the profiler thread. */
    int current_func;

    /** The number of threads currently doing work. */
    int active_threads;

    /** A linked list of stats gathered for each pipeline. */
    struct halide_profiler_pipeline_stats *pipelines;

    /** Retrieve remote profiler state. Used so that the sampling
     * profiler can follow along with execution that occurs elsewhere,
     * e.g. on a DSP. If null, it reads from the int above instead. */
    void (*get_remote_profiler_state)(int *func, int *active_workers);

    /** Sampling thread reference to be joined at shutdown. */
    struct halide_thread *sampling_thread;
};

/** Profiler func ids with special meanings. */
enum {
    /// current_func takes on this value when not inside Halide code
    halide_profiler_outside_of_halide = -1,
    /// Set current_func to this value to tell the profiling thread to
    /// halt. It will start up again next time you run a pipeline with
    /// profiling enabled.
    halide_profiler_please_stop = -2
};

/** Get a pointer to the global profiler state for programmatic
 * inspection. Lock it before using to pause the profiler. */
extern struct halide_profiler_state *halide_profiler_get_state();

/** Get a pointer to the pipeline state associated with pipeline_name.
 * This function grabs the global profiler state's lock on entry. */
extern struct halide_profiler_pipeline_stats *halide_profiler_get_pipeline_state(const char *pipeline_name);

/** Reset profiler state cheaply. May leave threads running or some
 * memory allocated but all accumluated statistics are reset.
 * WARNING: Do NOT call this method while any halide pipeline is
 * running; halide_profiler_memory_allocate/free and
 * halide_profiler_stack_peak_update update the profiler pipeline's
 * state without grabbing the global profiler state's lock. */
extern void halide_profiler_reset();

/** Reset all profiler state.
 * WARNING: Do NOT call this method while any halide pipeline is
 * running; halide_profiler_memory_allocate/free and
 * halide_profiler_stack_peak_update update the profiler pipeline's
 * state without grabbing the global profiler state's lock. */
void halide_profiler_shutdown();

/** Print out timing statistics for everything run since the last
 * reset. Also happens at process exit. */
extern void halide_profiler_report(void *user_context);

/// \name "Float16" functions
/// These functions operate of bits (``uint16_t``) representing a half
/// precision floating point number (IEEE-754 2008 binary16).
//{@

/** Read bits representing a half precision floating point number and return
 *  the float that represents the same value */
extern float halide_float16_bits_to_float(uint16_t);

/** Read bits representing a half precision floating point number and return
 *  the double that represents the same value */
extern double halide_float16_bits_to_double(uint16_t);

// TODO: Conversion functions to half

//@}

// Allocating and freeing device memory is often very slow. The
// methods below give Halide's runtime permission to hold onto device
// memory to service future requests instead of returning it to the
// underlying device API. The API does not manage an allocation pool,
// all it does is provide access to a shared counter that acts as a
// limit on the unused memory not yet returned to the underlying
// device API. It makes callbacks to participants when memory needs to
// be released because the limit is about to be exceeded (either
// because the limit has been reduced, or because the memory owned by
// some participant becomes unused).

/** Tell Halide whether or not it is permitted to hold onto device
 * allocations to service future requests instead of returning them
 * eagerly to the underlying device API. Many device allocators are
 * quite slow, so it can be beneficial to set this to true. The
 * default value for now is false.
 *
 * Note that if enabled, the eviction policy is very simplistic. The
 * 32 most-recently used allocations are preserved, regardless of
 * their size. Additionally, if a call to cuMalloc results in an
 * out-of-memory error, the entire cache is flushed and the allocation
 * is retried. See https://github.com/halide/Halide/issues/4093
 *
 * If set to false, releases all unused device allocations back to the
 * underlying device APIs. For finer-grained control, see specific
 * methods in each device api runtime. */
extern int halide_reuse_device_allocations(void *user_context, bool);

/** Determines whether on device_free the memory is returned
 * immediately to the device API, or placed on a free list for future
 * use. Override and switch based on the user_context for
 * finer-grained control. By default just returns the value most
 * recently set by the method above. */
extern bool halide_can_reuse_device_allocations(void *user_context);

struct halide_device_allocation_pool {
    int (*release_unused)(void *user_context);
    struct halide_device_allocation_pool *next;
};

/** Register a callback to be informed when
 * halide_reuse_device_allocations(false) is called, and all unused
 * device allocations must be released. The object passed should have
 * global lifetime, and its next field will be clobbered. */
extern void halide_register_device_allocation_pool(struct halide_device_allocation_pool *);

#ifdef __cplusplus
}  // End extern "C"
#endif

#if (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)

namespace {
template<typename T>
struct check_is_pointer;
template<typename T>
struct check_is_pointer<T *> {};
}  // namespace

/** Construct the halide equivalent of a C type */
template<typename T>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of() {
    // Create a compile-time error if T is not a pointer (without
    // using any includes - this code goes into the runtime).
    check_is_pointer<T> check;
    (void)check;
    return halide_type_t(halide_type_handle, 64);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<float>() {
    return halide_type_t(halide_type_float, 32);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<double>() {
    return halide_type_t(halide_type_float, 64);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<bool>() {
    return halide_type_t(halide_type_uint, 1);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<uint8_t>() {
    return halide_type_t(halide_type_uint, 8);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<uint16_t>() {
    return halide_type_t(halide_type_uint, 16);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<uint32_t>() {
    return halide_type_t(halide_type_uint, 32);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<uint64_t>() {
    return halide_type_t(halide_type_uint, 64);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<int8_t>() {
    return halide_type_t(halide_type_int, 8);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<int16_t>() {
    return halide_type_t(halide_type_int, 16);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<int32_t>() {
    return halide_type_t(halide_type_int, 32);
}

template<>
HALIDE_ALWAYS_INLINE halide_type_t halide_type_of<int64_t>() {
    return halide_type_t(halide_type_int, 64);
}

#endif  // (__cplusplus >= 201103L || _MSVC_LANG >= 201103L)

#endif  // HALIDE_HALIDERUNTIME_H

#ifdef COMPILING_HALIDE_RUNTIME
#include "HalideRuntime.h"
#define HALIDE_BUFFER_HELPER_ATTRS WEAK_INLINE
#else
#define HALIDE_BUFFER_HELPER_ATTRS inline
#endif

// Structs are annoying to deal with from within Halide Stmts. These
// utility functions are for dealing with halide_buffer_t in that
// context. They are not intended for use outside of Halide code, and
// not exposed in HalideRuntime.h. The symbols are private to the
// module and should be inlined and then stripped. This blob of code
// also gets copy-pasted into C outputs.

extern "C" {

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_dimensions(const halide_buffer_t *buf) {
    return buf->dimensions;
}

HALIDE_BUFFER_HELPER_ATTRS
uint8_t *_halide_buffer_get_host(const halide_buffer_t *buf) {
    return buf->host;
}

HALIDE_BUFFER_HELPER_ATTRS
uint64_t _halide_buffer_get_device(const halide_buffer_t *buf) {
    return buf->device;
}

HALIDE_BUFFER_HELPER_ATTRS
const struct halide_device_interface_t *_halide_buffer_get_device_interface(const halide_buffer_t *buf) {
    return buf->device_interface;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_min(const halide_buffer_t *buf, int d) {
    return buf->dim[d].min;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_max(const halide_buffer_t *buf, int d) {
    return buf->dim[d].min + buf->dim[d].extent - 1;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_extent(const halide_buffer_t *buf, int d) {
    return buf->dim[d].extent;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_get_stride(const halide_buffer_t *buf, int d) {
    return buf->dim[d].stride;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_set_host_dirty(halide_buffer_t *buf, bool val) {
    buf->set_host_dirty(val);
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_set_device_dirty(halide_buffer_t *buf, bool val) {
    buf->set_device_dirty(val);
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
bool _halide_buffer_get_host_dirty(const halide_buffer_t *buf) {
    return buf->host_dirty();
}

HALIDE_BUFFER_HELPER_ATTRS
bool _halide_buffer_get_device_dirty(const halide_buffer_t *buf) {
    return buf->device_dirty();
}

HALIDE_BUFFER_HELPER_ATTRS
halide_dimension_t *_halide_buffer_get_shape(halide_buffer_t *buf) {
    return buf->dim;
}

HALIDE_BUFFER_HELPER_ATTRS
bool _halide_buffer_is_bounds_query(const halide_buffer_t *buf) {
    return buf->host == nullptr && buf->device == 0;
}

HALIDE_BUFFER_HELPER_ATTRS
uint32_t _halide_buffer_get_type(const halide_buffer_t *buf) {
    return buf->type.as_u32();
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_init(halide_buffer_t *dst,
                                     halide_dimension_t *dst_shape,
                                     void *host,
                                     uint64_t device,
                                     const halide_device_interface_t *device_interface,
                                     int type_code, int type_bits,
                                     int dimensions,
                                     halide_dimension_t *shape,
                                     uint64_t flags) {
    dst->host = (uint8_t *)host;
    dst->device = device;
    dst->device_interface = device_interface;
    dst->type.code = (halide_type_code_t)type_code;
    dst->type.bits = (uint8_t)type_bits;
    dst->type.lanes = 1;
    dst->dimensions = dimensions;
    dst->dim = dst_shape;
    if (shape != dst->dim) {
        for (int i = 0; i < dimensions; i++) {
            dst->dim[i] = shape[i];
        }
    }
    dst->flags = flags;
    return dst;
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_init_from_buffer(halide_buffer_t *dst,
                                                 halide_dimension_t *dst_shape,
                                                 const halide_buffer_t *src) {
    dst->host = src->host;
    dst->device = src->device;
    dst->device_interface = src->device_interface;
    dst->type = src->type;
    dst->dimensions = src->dimensions;
    dst->dim = dst_shape;
    dst->flags = src->flags;
    for (int i = 0; i < dst->dimensions; i++) {
        dst->dim[i] = src->dim[i];
    }
    return dst;
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_crop(void *user_context,
                                     halide_buffer_t *dst,
                                     halide_dimension_t *dst_shape,
                                     const halide_buffer_t *src,
                                     const int *min, const int *extent) {
    *dst = *src;
    dst->dim = dst_shape;
    int64_t offset = 0;
    for (int i = 0; i < dst->dimensions; i++) {
        dst->dim[i] = src->dim[i];
        dst->dim[i].min = min[i];
        dst->dim[i].extent = extent[i];
        offset += (min[i] - src->dim[i].min) * src->dim[i].stride;
    }
    if (dst->host) {
        dst->host += offset * src->type.bytes();
    }
    dst->device_interface = nullptr;
    dst->device = 0;
    if (src->device_interface) {
        src->device_interface->device_crop(user_context, src, dst);
    }
    return dst;
}

// Called on return from an extern stage where the output buffer was a
// crop of some other larger buffer. This happens for extern stages
// with distinct store_at/compute_at levels. Each call to the stage
// only fills in part of the buffer.
HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_retire_crop_after_extern_stage(void *user_context,
                                                  void *obj) {
    halide_buffer_t **buffers = (halide_buffer_t **)obj;
    halide_buffer_t *crop = buffers[0];
    halide_buffer_t *parent = buffers[1];

    if (crop->device) {
        if (!parent->device) {
            // We have been given a device allocation by the extern
            // stage. It only represents the cropped region, so we
            // can't just give it to the parent.
            if (crop->device_dirty()) {
                crop->device_interface->copy_to_host(user_context, crop);
            }
            crop->device_interface->device_free(user_context, crop);
        } else {
            // We are a crop of an existing device allocation.
            if (crop->device_dirty()) {
                parent->set_device_dirty();
            }
            crop->device_interface->device_release_crop(user_context, crop);
        }
    }
    if (crop->host_dirty()) {
        parent->set_host_dirty();
    }
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
int _halide_buffer_retire_crops_after_extern_stage(void *user_context,
                                                   void *obj) {
    halide_buffer_t **buffers = (halide_buffer_t **)obj;
    while (*buffers) {
        _halide_buffer_retire_crop_after_extern_stage(user_context, buffers);
        buffers += 2;
    }
    return 0;
}

HALIDE_BUFFER_HELPER_ATTRS
halide_buffer_t *_halide_buffer_set_bounds(halide_buffer_t *buf,
                                           int dim, int min, int extent) {
    buf->dim[dim].min = min;
    buf->dim[dim].extent = extent;
    return buf;
}
}

#undef HALIDE_BUFFER_HELPER_ATTRS


#ifndef HALIDE_MUST_USE_RESULT
#ifdef __has_attribute
#if __has_attribute(nodiscard)
#define HALIDE_MUST_USE_RESULT [[nodiscard]]
#elif __has_attribute(warn_unused_result)
#define HALIDE_MUST_USE_RESULT __attribute__((warn_unused_result))
#else
#define HALIDE_MUST_USE_RESULT
#endif
#else
#define HALIDE_MUST_USE_RESULT
#endif
#endif

#ifndef HALIDE_FUNCTION_ATTRS
#define HALIDE_FUNCTION_ATTRS
#endif



#if !defined(__has_attribute)
    #define __has_attribute(x) 0
#endif

#if !defined(__has_builtin)
    #define __has_builtin(x) 0
#endif

namespace {

// We can't use std::array because that has its own overload of operator<, etc,
// which will interfere with ours.
template <typename ElementType, size_t Lanes>
struct CppVector {
    ElementType elements[Lanes];

    HALIDE_ALWAYS_INLINE
    ElementType& operator[](size_t i) {
        return elements[i];
    }

    HALIDE_ALWAYS_INLINE
    const ElementType operator[](size_t i) const {
        return elements[i];
    }

    HALIDE_ALWAYS_INLINE
    ElementType *data() {
        return elements;
    }

    HALIDE_ALWAYS_INLINE
    const ElementType *data() const {
        return elements;
    }
};

template <typename ElementType_, size_t Lanes_>
class CppVectorOps {
public:
    using ElementType = ElementType_ ;
    static constexpr size_t Lanes = Lanes_;

    using Vec = CppVector<ElementType, Lanes>;
    using Mask = CppVector<uint8_t, Lanes>;

    CppVectorOps() = delete;

    static Vec broadcast(const ElementType v) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = v;
        }
        return r;
    }

    static Vec ramp(const ElementType base, const ElementType stride) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = base + stride * i;
        }
        return r;
    }

    static Vec load(const void *base, int32_t offset) {
        Vec r;
        memcpy(r.data(), ((const ElementType*)base + offset), sizeof(ElementType) * Lanes);
        return r;
    }

    static Vec load_gather(const void *base, const CppVector<int32_t, Lanes> &offset) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = ((const ElementType*)base)[offset[i]];
        }
        return r;
    }

    static void store(const Vec &v, void *base, int32_t offset) {
        memcpy(((ElementType*)base + offset), v.data(), sizeof(ElementType) * Lanes);
    }

    static void store_scatter(const Vec &v, void *base, const CppVector<int32_t, Lanes> &offset) {
        for (size_t i = 0; i < Lanes; i++) {
            ((ElementType*)base)[offset[i]] = v[i];
        }
    }

    template<int... Indices>
    static Vec shuffle(const Vec &a) {
        static_assert(sizeof...(Indices) == Lanes, "shuffle() requires an exact match of lanes");
        Vec r = { a[Indices]... };
        return r;
    }

    static Vec replace(const Vec &v, size_t i, const ElementType b) {
        Vec r = v;
        r[i] = b;
        return r;
    }

    template <typename OtherVec>
    static Vec convert_from(const OtherVec &src) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = static_cast<ElementType>(src[i]);
        }
        return r;
    }

    static Vec max(const Vec &a, const Vec &b) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = ::halide_cpp_max(a[i], b[i]);
        }
        return r;
    }

    static Vec min(const Vec &a, const Vec &b) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = ::halide_cpp_min(a[i], b[i]);
        }
        return r;
    }

    static Vec select(const Mask &cond, const Vec &true_value, const Vec &false_value) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = cond[i] ? true_value[i] : false_value[i];
        }
        return r;
    }

    static Mask logical_or(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] || b[i] ? 0xff : 0x00;
        }
        return r;
    }

    static Mask logical_and(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] && b[i] ? 0xff : 0x00;
        }
        return r;
    }

    static Mask lt(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] < b[i] ? 0xff : 0x00;
        }
        return r;
    }

    static Mask le(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] <= b[i] ? 0xff : 0x00;
        }
        return r;
    }

    static Mask gt(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] > b[i] ? 0xff : 0x00;
        }
        return r;
    }

    static Mask ge(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] >= b[i] ? 0xff : 0x00;
        }
        return r;
    }

    static Mask eq(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] == b[i] ? 0xff : 0x00;
        }
        return r;
    }

    static Mask ne(const Vec &a, const Vec &b) {
        CppVector<uint8_t, Lanes> r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] != b[i] ? 0xff : 0x00;
        }
        return r;
    }
};

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator~(const CppVector<ElementType, Lanes> &v) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = ~v[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator!(const CppVector<ElementType, Lanes> &v) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = !v[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator+(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] + b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator-(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] - b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator*(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] * b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator/(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] / b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator%(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] % b[i];
    }
    return r;
}

template <typename ElementType, size_t Lanes, typename OtherElementType>
CppVector<ElementType, Lanes> operator<<(const CppVector<ElementType, Lanes> &a, const CppVector<OtherElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] << b[i];
    }
    return r;
}

template <typename ElementType, size_t Lanes, typename OtherElementType>
CppVector<ElementType, Lanes> operator>>(const CppVector<ElementType, Lanes> &a, const CppVector<OtherElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] >> b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator&(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] & b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator|(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] | b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator^(const CppVector<ElementType, Lanes> &a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] ^ b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator+(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] + b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator-(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] - b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator*(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] * b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator/(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] / b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator%(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] % b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator>>(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] >> b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator<<(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] << b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator&(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] & b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator|(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] | b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator^(const CppVector<ElementType, Lanes> &a, const ElementType b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a[i] ^ b;
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator+(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a + b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator-(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a - b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator*(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a * b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator/(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a / b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator%(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a % b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator>>(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a >> b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator<<(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a << b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator&(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a & b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator|(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a | b[i];
    }
    return r;
}

template<typename ElementType, size_t Lanes>
CppVector<ElementType, Lanes> operator^(const ElementType a, const CppVector<ElementType, Lanes> &b) {
    CppVector<ElementType, Lanes> r;
    for (size_t i = 0; i < Lanes; i++) {
        r[i] = a ^ b[i];
    }
    return r;
}

}  // namespace



namespace {

#if __has_attribute(ext_vector_type) || __has_attribute(vector_size)

#if __has_attribute(ext_vector_type)
    // Clang
    template<typename ElementType, size_t Lanes>
    using NativeVector __attribute__((ext_vector_type(Lanes), aligned(sizeof(ElementType)))) = ElementType;
#elif __has_attribute(vector_size) || defined(__GNUC__)
    // GCC
    template<typename ElementType, size_t Lanes>
    using NativeVector __attribute__((vector_size(Lanes * sizeof(ElementType)), aligned(sizeof(ElementType)))) = ElementType;
#else
    #error
#endif

template<typename T>
struct NativeVectorComparisonType {
    using type = void;
};

template<>
struct NativeVectorComparisonType<int8_t> { using type = char; };

template<>
struct NativeVectorComparisonType<int16_t> { using type = int16_t; };

template<>
struct NativeVectorComparisonType<int32_t> { using type = int32_t; };

template<>
struct NativeVectorComparisonType<int64_t> { using type = int64_t; };

template<>
struct NativeVectorComparisonType<uint8_t> { using type = char; };

template<>
struct NativeVectorComparisonType<uint16_t> { using type = int16_t; };

template<>
struct NativeVectorComparisonType<uint32_t> { using type = int32_t; };

template<>
struct NativeVectorComparisonType<uint64_t> { using type = int64_t; };

template<>
struct NativeVectorComparisonType<float> { using type = int32_t; };

template<>
struct NativeVectorComparisonType<double> { using type = int64_t; };

template <typename ElementType_, size_t Lanes_>
class NativeVectorOps {
public:
    using ElementType = ElementType_ ;
    static constexpr size_t Lanes = Lanes_;

    using Vec = NativeVector<ElementType, Lanes>;
    using Mask = NativeVector<uint8_t, Lanes>;

    NativeVectorOps() = delete;

    static Vec broadcast(const ElementType v) {
        const Vec zero = {}; // Zero-initialized native vector.
        return v - zero;
    }

    static Vec ramp(const ElementType base, const ElementType stride) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = base + stride * i;
        }
        return r;
    }

    static Vec load(const void *base, int32_t offset) {
        Vec r;
        // We only require Vec to be element-aligned, so we can't safely just read
        // directly from memory (might segfault). Use memcpy for safety.
        //
        // If Vec is a non-power-of-two (e.g. uint8x48), the actual implementation
        // might be larger (e.g. it might really be a uint8x64). Only copy the amount
        // that is in the logical type, to avoid possible overreads.
        memcpy(&r, ((const ElementType*)base + offset), sizeof(ElementType) * Lanes);
        return r;
    }

    static Vec load_gather(const void *base, const NativeVector<int32_t, Lanes> offset) {
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = ((const ElementType*)base)[offset[i]];
        }
        return r;
    }

    static void store(const Vec v, void *base, int32_t offset) {
        // We only require Vec to be element-aligned, so we can't safely just write
        // directly from memory (might segfault). Use memcpy for safety.
        //
        // If Vec is a non-power-of-two (e.g. uint8x48), the actual implementation
        // might be larger (e.g. it might really be a uint8x64). Only copy the amount
        // that is in the logical type, to avoid possible overreads.
        memcpy(((ElementType*)base + offset), &v, sizeof(ElementType) * Lanes);
    }

    static void store_scatter(const Vec v, void *base, const NativeVector<int32_t, Lanes> offset) {
        for (size_t i = 0; i < Lanes; i++) {
            ((ElementType*)base)[offset[i]] = v[i];
        }
    }

    template<int... Indices>
    static Vec shuffle(const Vec a) {
        static_assert(sizeof...(Indices) == Lanes, "shuffle() requires an exact match of lanes");
#if __has_builtin(__builtin_shufflevector)
        // Clang
        return __builtin_shufflevector(a, a, Indices...);
#elif __has_builtin(__builtin_shuffle) || defined(__GNUC__)
        // GCC
        return __builtin_shuffle(a, NativeVector<int, sizeof...(Indices)>{Indices...});
#else
        Vec r = { a[Indices]... };
        return r;
#endif
    }

    static Vec replace(Vec v, size_t i, const ElementType b) {
        v[i] = b;
        return v;
    }

    template <typename OtherVec>
    static Vec convert_from(const OtherVec src) {
#if __has_builtin(__builtin_convertvector)
        // Don't use __builtin_convertvector for float->int: it appears to have
        // different float->int rounding behavior in at least some situations;
        // for now we'll use the much-slower-but-correct explicit C++ code.
        // (https://github.com/halide/Halide/issues/2080)
        constexpr bool is_float_to_int = std::is_floating_point<OtherVec>::value &&
                                         std::is_integral<Vec>::value;
        if (!is_float_to_int) {
            return __builtin_convertvector(src, Vec);
        }
#endif
        // Fallthru for float->int, or degenerate compilers that support native vectors
        // but not __builtin_convertvector (Intel?)
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = static_cast<ElementType>(src[i]);
        }
        return r;
    }

    static Vec max(const Vec a, const Vec b) {
#if defined(__GNUC__) && !defined(__clang__)
        // TODO: GCC doesn't seem to recognize this pattern, and scalarizes instead
        return a > b ? a : b;
#else
        // Clang doesn't do ternary operator for vectors, but recognizes this pattern
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] > b[i] ? a[i] : b[i];
        }
        return r;
#endif
    }

    static Vec min(const Vec a, const Vec b) {
#if defined(__GNUC__) && !defined(__clang__)
        // TODO: GCC doesn't seem to recognize this pattern, and scalarizes instead
        return a < b ? a : b;
#else
        // Clang doesn't do ternary operator for vectors, but recognizes this pattern
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = a[i] < b[i] ? a[i] : b[i];
        }
        return r;
#endif
    }

    static Vec select(const Mask cond, const Vec true_value, const Vec false_value) {
#if defined(__GNUC__) && !defined(__clang__)
        // This should do the correct lane-wise select.
        using T = typename NativeVectorComparisonType<ElementType>::type;
        auto b = NativeVectorOps<T, Lanes>::convert_from(cond);
        return b ? true_value : false_value;
#else
        // Clang doesn't do ternary operator for vectors, but recognizes this pattern
        Vec r;
        for (size_t i = 0; i < Lanes; i++) {
            r[i] = cond[i] ? true_value[i] : false_value[i];
        }
        return r;
#endif
    }

    // The relational operators produce signed-int of same width as input; our codegen expects uint8.
    static Mask logical_or(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a || b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }

    static Mask logical_and(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a && b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }

    static Mask lt(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a < b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }

    static Mask le(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a <= b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }

    static Mask gt(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a > b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }

    static Mask ge(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a >= b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }

    static Mask eq(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a == b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }

    static Mask ne(const Vec a, const Vec b) {
        using T = typename NativeVectorComparisonType<ElementType>::type;
        const NativeVector<T, Lanes> r = a != b;
        return NativeVectorOps<uint8_t, Lanes>::convert_from(r);
    }
};


#endif  // __has_attribute(ext_vector_type) || __has_attribute(vector_size)

}  // namespace


// Dec. 1, 2018: Apparently emscripten compilation runs with the __has_attribute true,
// then fails to handle the vector intrinsics later.
#if !defined(__EMSCRIPTEN__) && (__has_attribute(ext_vector_type) || __has_attribute(vector_size))
    #if __GNUC__ && !__clang__
        // GCC only allows powers-of-two; fall back to CppVector for other widths
        #define halide_cpp_use_native_vector(type, lanes) ((lanes & (lanes - 1)) == 0)
    #else
        #define halide_cpp_use_native_vector(type, lanes) (true)
    #endif
#else
    // No NativeVector available
    #define halide_cpp_use_native_vector(type, lanes) (false)
#endif  // __has_attribute(ext_vector_type) || __has_attribute(vector_size)

// Failsafe to allow forcing non-native vectors in case of unruly compilers
#if HALIDE_CPP_ALWAYS_USE_CPP_VECTORS
    #undef halide_cpp_use_native_vector
    #define halide_cpp_use_native_vector(type, lanes) (false)
#endif

#if halide_cpp_use_native_vector(uint8_t, 128)
using uint8x128_t = NativeVector<uint8_t, 128>;
using uint8x128_t_ops = NativeVectorOps<uint8_t, 128>;
#else
using uint8x128_t = CppVector<uint8_t, 128>;
using uint8x128_t_ops = CppVectorOps<uint8_t, 128>;
#endif
#if halide_cpp_use_native_vector(int16_t, 128)
using int16x128_t = NativeVector<int16_t, 128>;
using int16x128_t_ops = NativeVectorOps<int16_t, 128>;
#else
using int16x128_t = CppVector<int16_t, 128>;
using int16x128_t_ops = CppVectorOps<int16_t, 128>;
#endif
#if halide_cpp_use_native_vector(uint16_t, 128)
using uint16x128_t = NativeVector<uint16_t, 128>;
using uint16x128_t_ops = NativeVectorOps<uint16_t, 128>;
#else
using uint16x128_t = CppVector<uint16_t, 128>;
using uint16x128_t_ops = CppVectorOps<uint16_t, 128>;
#endif
#if halide_cpp_use_native_vector(int32_t, 128)
using int32x128_t = NativeVector<int32_t, 128>;
using int32x128_t_ops = NativeVectorOps<int32_t, 128>;
#else
using int32x128_t = CppVector<int32_t, 128>;
using int32x128_t_ops = CppVectorOps<int32_t, 128>;
#endif
#if halide_cpp_use_native_vector(uint32_t, 128)
using uint32x128_t = NativeVector<uint32_t, 128>;
using uint32x128_t_ops = NativeVectorOps<uint32_t, 128>;
#else
using uint32x128_t = CppVector<uint32_t, 128>;
using uint32x128_t_ops = CppVectorOps<uint32_t, 128>;
#endif

#ifdef __cplusplus
extern "C" {
#endif

HALIDE_FUNCTION_ATTRS
int conv3x3_halide(struct halide_buffer_t *_input_buffer, struct halide_buffer_t *_mask_buffer, struct halide_buffer_t *_output_buffer) {
 void * const _ucon = nullptr;
 uint64_t _1 = (uint64_t)(_output_buffer);
 uint64_t _2 = (uint64_t)(0ull);
 bool _3 = _1 != _2;
 if (!_3)
 {
  int32_t _4 = halide_error_buffer_argument_is_null(_ucon, "output");
  return _4;
 }
 uint64_t _5 = (uint64_t)(_mask_buffer);
 uint64_t _6 = (uint64_t)(0ull);
 bool _7 = _5 != _6;
 if (!_7)
 {
  int32_t _8 = halide_error_buffer_argument_is_null(_ucon, "mask");
  return _8;
 }
 uint64_t _9 = (uint64_t)(_input_buffer);
 uint64_t _10 = (uint64_t)(0ull);
 bool _11 = _9 != _10;
 if (!_11)
 {
  int32_t _12 = halide_error_buffer_argument_is_null(_ucon, "input");
  return _12;
 }
 void *_13 = _halide_buffer_get_host(_input_buffer);
 void * _input = _13;
 uint32_t _14 = _halide_buffer_get_type(_input_buffer);
 bool _15 = _halide_buffer_get_device_dirty(_input_buffer);
 int32_t _16 = _halide_buffer_get_dimensions(_input_buffer);
 int32_t _17 = _halide_buffer_get_min(_input_buffer, 0);
 int32_t _18 = _halide_buffer_get_extent(_input_buffer, 0);
 int32_t _19 = _halide_buffer_get_stride(_input_buffer, 0);
 int32_t _20 = _halide_buffer_get_min(_input_buffer, 1);
 int32_t _21 = _halide_buffer_get_extent(_input_buffer, 1);
 int32_t _22 = _halide_buffer_get_stride(_input_buffer, 1);
 void *_23 = _halide_buffer_get_host(_mask_buffer);
 void * _mask = _23;
 uint32_t _24 = _halide_buffer_get_type(_mask_buffer);
 bool _25 = _halide_buffer_get_device_dirty(_mask_buffer);
 int32_t _26 = _halide_buffer_get_dimensions(_mask_buffer);
 int32_t _27 = _halide_buffer_get_min(_mask_buffer, 0);
 int32_t _28 = _halide_buffer_get_extent(_mask_buffer, 0);
 int32_t _29 = _halide_buffer_get_stride(_mask_buffer, 0);
 int32_t _30 = _halide_buffer_get_min(_mask_buffer, 1);
 int32_t _31 = _halide_buffer_get_extent(_mask_buffer, 1);
 int32_t _32 = _halide_buffer_get_stride(_mask_buffer, 1);
 void *_33 = _halide_buffer_get_host(_output_buffer);
 void * _output = _33;
 uint32_t _34 = _halide_buffer_get_type(_output_buffer);
 bool _35 = _halide_buffer_get_device_dirty(_output_buffer);
 int32_t _36 = _halide_buffer_get_dimensions(_output_buffer);
 int32_t _37 = _halide_buffer_get_min(_output_buffer, 0);
 int32_t _38 = _halide_buffer_get_extent(_output_buffer, 0);
 int32_t _39 = _halide_buffer_get_stride(_output_buffer, 0);
 int32_t _40 = _halide_buffer_get_min(_output_buffer, 1);
 int32_t _41 = _halide_buffer_get_extent(_output_buffer, 1);
 int32_t _42 = _halide_buffer_get_stride(_output_buffer, 1);
 int32_t _43 = _38 + -1;
 int32_t _44 = _43 >> 7;
 int32_t _45 = _44 * 128;
 int32_t _46 = _45 + 129;
 int32_t _47 = _18 + _17;
 int32_t _48 = ::halide_cpp_min(_46, _47);
 int32_t _49 = _17 + 1;
 int32_t _50 = ::halide_cpp_max(_48, _49);
 int32_t _51 = ::halide_cpp_min(_47, 0);
 int32_t _52 = _51 + -1;
 int32_t _53 = ::halide_cpp_max(_52, _17);
 int32_t _54 = _50 - _53;
 bool _55 = _41 < 0;
 int32_t _56 = _41 >> 1;
 int32_t _57 = _56 + _41;
 bool _58 = _57 < 1;
 int32_t _59 = (int32_t)(_58 ? -1 : 0);
 bool _60 = _56 == 0;
 int32_t _61 = (int32_t)(_60 ? -1 : 0);
 int32_t _62 = (int32_t)(_55 ? -1 : 0);
 int32_t _63 = _57 - _59;
 int32_t _64 = _63 + -1;
 int32_t _65 = _56 - _61;
 int32_t _66 = _64 / _65;
 int32_t _67 = ~_62;
 int32_t _68 = _67 - _62;
 int32_t _69 = _59 & _68;
 int32_t _70 = _66 + _69;
 int32_t _71 = ~_61;
 int32_t _72 = _70 & _71;
 int32_t _73 = _72 + -1;
 int32_t _74 = _56 * _73;
 int32_t _75 = _41 - _56;
 int32_t _76 = (int32_t)(_55 ? 0 : _74);
 int32_t _77 = ::halide_cpp_min(_76, _75);
 int32_t _78 = _41 + -2;
 int32_t _79 = _78 >> 4;
 int32_t _80 = _79 * 8;
 int32_t _81 = _77 + _80;
 int32_t _82 = _81 + 9;
 int32_t _83 = _21 + _20;
 int32_t _84 = ::halide_cpp_min(_82, _83);
 int32_t _85 = _84 + -1;
 int32_t _86 = ::halide_cpp_max(_85, _20);
 int32_t _87 = (int32_t)(_55 ? _74 : 0);
 int32_t _88 = ::halide_cpp_min(_87, _75);
 int32_t _89 = ::halide_cpp_min(_88, _83);
 int32_t _90 = _89 + -1;
 int32_t _91 = ::halide_cpp_max(_90, _20);
 int32_t _92 = _86 - _91;
 int32_t _93 = _81 - _88;
 bool _94 = _halide_buffer_is_bounds_query(_input_buffer);
 bool _95 = !(_94);
 bool _96 = 0 <= _53;
 bool _97 = _53 <= 0;
 bool _98 = _96 && _97;
 bool _99 = _95 || _98;
 if (!_99)
 {
  int32_t _100 = _54 + -1;
  int32_t _101 = _54 + _53;
  int32_t _102 = _101 + -1;
  int32_t _103 = halide_error_constraints_make_required_region_smaller(_ucon, "Input buffer input", 0, 0, _100, _53, _102);
  return _103;
 }
 bool _104 = _halide_buffer_is_bounds_query(_input_buffer);
 bool _105 = !(_104);
 bool _106 = 0 <= _91;
 bool _107 = _91 <= 0;
 bool _108 = _106 && _107;
 bool _109 = _105 || _108;
 if (!_109)
 {
  int32_t _110 = _92 + _91;
  int32_t _111 = halide_error_constraints_make_required_region_smaller(_ucon, "Input buffer input", 1, 0, _92, _91, _110);
  return _111;
 }
 bool _112 = _halide_buffer_is_bounds_query(_output_buffer);
 bool _113 = !(_112);
 bool _114 = 0 <= _88;
 bool _115 = _88 <= 0;
 bool _116 = _114 && _115;
 bool _117 = _113 || _116;
 if (!_117)
 {
  int32_t _118 = _93 + 7;
  int32_t _119 = _93 + _88;
  int32_t _120 = _119 + 7;
  int32_t _121 = halide_error_constraints_make_required_region_smaller(_ucon, "Output buffer output", 1, 0, _118, _88, _120);
  return _121;
 }
 bool _122 = _halide_buffer_is_bounds_query(_input_buffer);
 if (_122)
 {
  struct halide_dimension_t *_123 = _halide_buffer_get_shape(_input_buffer);
  uint64_t _124 = (uint64_t)(0ull);
  void *_125 = (void *)(_124);
  struct halide_device_interface_t *_126 = (struct halide_device_interface_t *)(_124);
  int32_t _127 = _92 + 1;
  int32_t _128 = _54 >> 7;
  int32_t _129 = _128 * 128;
  struct halide_dimension_t s0[2] = {
   {0, _54, 1, 0},
   {0, _127, _129, 0},
  };
  struct halide_dimension_t *_130 = s0;
  struct halide_buffer_t *_131 = _halide_buffer_init(_input_buffer, _123, _125, _124, _126, 1, 8, 2, _130, _124);
  halide_unused(_131);
 } // if _122
 bool _132 = _halide_buffer_is_bounds_query(_mask_buffer);
 if (_132)
 {
  struct halide_dimension_t *_133 = _halide_buffer_get_shape(_mask_buffer);
  uint64_t _134 = (uint64_t)(0ull);
  void *_135 = (void *)(_134);
  struct halide_device_interface_t *_136 = (struct halide_device_interface_t *)(_134);
  struct halide_dimension_t s1[2] = {
   {0, 3, 1, 0},
   {0, 3, 3, 0},
  };
  struct halide_dimension_t *_137 = s1;
  struct halide_buffer_t *_138 = _halide_buffer_init(_mask_buffer, _133, _135, _134, _136, 1, 8, 2, _137, _134);
  halide_unused(_138);
 } // if _132
 bool _139 = _halide_buffer_is_bounds_query(_output_buffer);
 if (_139)
 {
  struct halide_dimension_t *_140 = _halide_buffer_get_shape(_output_buffer);
  uint64_t _141 = (uint64_t)(0ull);
  void *_142 = (void *)(_141);
  struct halide_device_interface_t *_143 = (struct halide_device_interface_t *)(_141);
  int32_t _144 = _38 + -1;
  int32_t _145 = _144 >> 7;
  int32_t _146 = _145 * 128;
  int32_t _147 = _146 + 128;
  int32_t _148 = _93 + 8;
  int32_t _149 = _38 + 127;
  int32_t _150 = _149 >> 7;
  int32_t _151 = _150 * 128;
  struct halide_dimension_t s2[2] = {
   {0, _147, 1, 0},
   {0, _148, _151, 0},
  };
  struct halide_dimension_t *_152 = s2;
  struct halide_buffer_t *_153 = _halide_buffer_init(_output_buffer, _140, _142, _141, _143, 1, 8, 2, _152, _141);
  halide_unused(_153);
 } // if _139
 bool _154 = _halide_buffer_is_bounds_query(_output_buffer);
 bool _155 = _halide_buffer_is_bounds_query(_input_buffer);
 bool _156 = _halide_buffer_is_bounds_query(_mask_buffer);
 bool _157 = _155 || _156;
 bool _158 = _154 || _157;
 bool _159 = !(_158);
 if (_159)
 {
  uint32_t _160 = (uint32_t)(67585ull);
  bool _161 = _14 == _160;
  if (!_161)
  {
   uint32_t _162 = (uint32_t)(67585ull);
   int32_t _163 = halide_error_bad_type(_ucon, "Input buffer input", _14, _162);
   return _163;
  }
  bool _164 = _16 == 2;
  if (!_164)
  {
   int32_t _165 = halide_error_bad_dimensions(_ucon, "Input buffer input", _16, 2);
   return _165;
  }
  uint32_t _166 = (uint32_t)(67585ull);
  bool _167 = _24 == _166;
  if (!_167)
  {
   uint32_t _168 = (uint32_t)(67585ull);
   int32_t _169 = halide_error_bad_type(_ucon, "Input buffer mask", _24, _168);
   return _169;
  }
  bool _170 = _26 == 2;
  if (!_170)
  {
   int32_t _171 = halide_error_bad_dimensions(_ucon, "Input buffer mask", _26, 2);
   return _171;
  }
  uint32_t _172 = (uint32_t)(67585ull);
  bool _173 = _34 == _172;
  if (!_173)
  {
   uint32_t _174 = (uint32_t)(67585ull);
   int32_t _175 = halide_error_bad_type(_ucon, "Output buffer output", _34, _174);
   return _175;
  }
  bool _176 = _36 == 2;
  if (!_176)
  {
   int32_t _177 = halide_error_bad_dimensions(_ucon, "Output buffer output", _36, 2);
   return _177;
  }
  bool _178 = _17 <= _53;
  int32_t _179 = _54 + _53;
  int32_t _180 = _18 + _17;
  bool _181 = _179 <= _180;
  bool _182 = _178 && _181;
  if (!_182)
  {
   int32_t _183 = _54 + _53;
   int32_t _184 = _183 + -1;
   int32_t _185 = _18 + _17;
   int32_t _186 = _185 + -1;
   int32_t _187 = halide_error_access_out_of_bounds(_ucon, "Input buffer input", 0, _53, _184, _17, _186);
   return _187;
  }
  bool _188 = 0 <= _18;
  if (!_188)
  {
   int32_t _189 = halide_error_buffer_extents_negative(_ucon, "Input buffer input", 0, _18);
   return _189;
  }
  bool _190 = _20 <= _91;
  int32_t _191 = _92 + _91;
  int32_t _192 = _191 + 1;
  int32_t _193 = _21 + _20;
  bool _194 = _192 <= _193;
  bool _195 = _190 && _194;
  if (!_195)
  {
   int32_t _196 = _92 + _91;
   int32_t _197 = _21 + _20;
   int32_t _198 = _197 + -1;
   int32_t _199 = halide_error_access_out_of_bounds(_ucon, "Input buffer input", 1, _91, _196, _20, _198);
   return _199;
  }
  bool _200 = 0 <= _21;
  if (!_200)
  {
   int32_t _201 = halide_error_buffer_extents_negative(_ucon, "Input buffer input", 1, _21);
   return _201;
  }
  bool _202 = _27 <= 0;
  int32_t _203 = _28 + _27;
  bool _204 = 3 <= _203;
  bool _205 = _202 && _204;
  if (!_205)
  {
   int32_t _206 = _28 + _27;
   int32_t _207 = _206 + -1;
   int32_t _208 = halide_error_access_out_of_bounds(_ucon, "Input buffer mask", 0, 0, 2, _27, _207);
   return _208;
  }
  bool _209 = 0 <= _28;
  if (!_209)
  {
   int32_t _210 = halide_error_buffer_extents_negative(_ucon, "Input buffer mask", 0, _28);
   return _210;
  }
  bool _211 = _30 <= 0;
  int32_t _212 = _31 + _30;
  bool _213 = 3 <= _212;
  bool _214 = _211 && _213;
  if (!_214)
  {
   int32_t _215 = _31 + _30;
   int32_t _216 = _215 + -1;
   int32_t _217 = halide_error_access_out_of_bounds(_ucon, "Input buffer mask", 1, 0, 2, _30, _216);
   return _217;
  }
  bool _218 = 0 <= _31;
  if (!_218)
  {
   int32_t _219 = halide_error_buffer_extents_negative(_ucon, "Input buffer mask", 1, _31);
   return _219;
  }
  bool _220 = _37 <= 0;
  int32_t _221 = _38 + 127;
  int32_t _222 = _221 & 127;
  int32_t _223 = _222 + _37;
  bool _224 = 127 <= _223;
  bool _225 = _220 && _224;
  if (!_225)
  {
   int32_t _226 = _38 + -1;
   int32_t _227 = _226 >> 7;
   int32_t _228 = _227 * 128;
   int32_t _229 = _228 + 127;
   int32_t _230 = _38 + _37;
   int32_t _231 = _230 + -1;
   int32_t _232 = halide_error_access_out_of_bounds(_ucon, "Output buffer output", 0, 0, _229, _37, _231);
   return _232;
  }
  bool _233 = 0 <= _38;
  if (!_233)
  {
   int32_t _234 = halide_error_buffer_extents_negative(_ucon, "Output buffer output", 0, _38);
   return _234;
  }
  bool _235 = _40 <= _88;
  int32_t _236 = _93 + _88;
  int32_t _237 = _236 + 8;
  int32_t _238 = _41 + _40;
  bool _239 = _237 <= _238;
  bool _240 = _235 && _239;
  if (!_240)
  {
   int32_t _241 = _93 + _88;
   int32_t _242 = _241 + 7;
   int32_t _243 = _41 + _40;
   int32_t _244 = _243 + -1;
   int32_t _245 = halide_error_access_out_of_bounds(_ucon, "Output buffer output", 1, _88, _242, _40, _244);
   return _245;
  }
  bool _246 = 0 <= _41;
  if (!_246)
  {
   int32_t _247 = halide_error_buffer_extents_negative(_ucon, "Output buffer output", 1, _41);
   return _247;
  }
  bool _248 = _19 == 1;
  if (!_248)
  {
   int32_t _249 = halide_error_constraint_violated(_ucon, "input.stride.0", _19, "1", 1);
   return _249;
  }
  bool _250 = _17 == 0;
  if (!_250)
  {
   int32_t _251 = halide_error_constraint_violated(_ucon, "input.min.0", _17, "0", 0);
   return _251;
  }
  int32_t _252 = _22 & 127;
  bool _253 = _252 == 0;
  if (!_253)
  {
   int32_t _254 = _22 >> 7;
   int32_t _255 = _254 * 128;
   int32_t _256 = halide_error_constraint_violated(_ucon, "input.stride.1", _22, "((input.stride.1/128)*128)", _255);
   return _256;
  }
  bool _257 = _20 == 0;
  if (!_257)
  {
   int32_t _258 = halide_error_constraint_violated(_ucon, "input.min.1", _20, "0", 0);
   return _258;
  }
  bool _259 = _29 == 1;
  if (!_259)
  {
   int32_t _260 = halide_error_constraint_violated(_ucon, "mask.stride.0", _29, "1", 1);
   return _260;
  }
  bool _261 = _39 == 1;
  if (!_261)
  {
   int32_t _262 = halide_error_constraint_violated(_ucon, "output.stride.0", _39, "1", 1);
   return _262;
  }
  bool _263 = _37 == 0;
  if (!_263)
  {
   int32_t _264 = halide_error_constraint_violated(_ucon, "output.min.0", _37, "0", 0);
   return _264;
  }
  int32_t _265 = _42 & 127;
  bool _266 = _265 == 0;
  if (!_266)
  {
   int32_t _267 = _42 >> 7;
   int32_t _268 = _267 * 128;
   int32_t _269 = halide_error_constraint_violated(_ucon, "output.stride.1", _42, "((output.stride.1/128)*128)", _268);
   return _269;
  }
  bool _270 = _40 == 0;
  if (!_270)
  {
   int32_t _271 = halide_error_constraint_violated(_ucon, "output.min.1", _40, "0", 0);
   return _271;
  }
  int64_t _272 = (int64_t)(_21);
  int64_t _273 = (int64_t)(_18);
  int64_t _274 = _272 * _273;
  int64_t _275 = (int64_t)(_31);
  int64_t _276 = (int64_t)(_28);
  int64_t _277 = _275 * _276;
  int64_t _278 = (int64_t)(_41);
  int64_t _279 = (int64_t)(_38);
  int64_t _280 = _278 * _279;
  int64_t _281 = (int64_t)(0ll);
  int64_t _282 = _281 - _273;
  bool _283 = _273 > _281;
  int64_t _284 = (int64_t)(_283 ? _273 : _282);
  uint64_t _285 = (uint64_t)(_284);
  uint64_t _286 = _285;
  uint64_t _287 = (uint64_t)(2147483647ull);
  bool _288 = _286 <= _287;
  if (!_288)
  {
   int64_t _289 = (int64_t)(_18);
   int64_t _290 = (int64_t)(0ll);
   int64_t _291 = _290 - _289;
   bool _292 = _289 > _290;
   int64_t _293 = (int64_t)(_292 ? _289 : _291);
   uint64_t _294 = (uint64_t)(_293);
   uint64_t _295 = _294;
   uint64_t _296 = (uint64_t)(2147483647ull);
   int32_t _297 = halide_error_buffer_allocation_too_large(_ucon, "input", _295, _296);
   return _297;
  }
  int64_t _298 = (int64_t)(_21);
  int32_t _299 = _22 >> 7;
  int32_t _300 = _299 * 128;
  int64_t _301 = (int64_t)(_300);
  int64_t _302 = _298 * _301;
  int64_t _303 = (int64_t)(0ll);
  int64_t _304 = _303 - _302;
  bool _305 = _302 > _303;
  int64_t _306 = (int64_t)(_305 ? _302 : _304);
  uint64_t _307 = (uint64_t)(_306);
  uint64_t _308 = _307;
  uint64_t _309 = (uint64_t)(2147483647ull);
  bool _310 = _308 <= _309;
  if (!_310)
  {
   int64_t _311 = (int64_t)(_21);
   int32_t _312 = _22 >> 7;
   int32_t _313 = _312 * 128;
   int64_t _314 = (int64_t)(_313);
   int64_t _315 = _311 * _314;
   int64_t _316 = (int64_t)(0ll);
   int64_t _317 = _316 - _315;
   bool _318 = _315 > _316;
   int64_t _319 = (int64_t)(_318 ? _315 : _317);
   uint64_t _320 = (uint64_t)(_319);
   uint64_t _321 = _320;
   uint64_t _322 = (uint64_t)(2147483647ull);
   int32_t _323 = halide_error_buffer_allocation_too_large(_ucon, "input", _321, _322);
   return _323;
  }
  int64_t _324 = (int64_t)(2147483647ll);
  bool _325 = _274 <= _324;
  if (!_325)
  {
   int64_t _326 = (int64_t)(2147483647ll);
   int32_t _327 = halide_error_buffer_extents_too_large(_ucon, "input", _274, _326);
   return _327;
  }
  int64_t _328 = (int64_t)(_28);
  int64_t _329 = (int64_t)(0ll);
  int64_t _330 = _329 - _328;
  bool _331 = _328 > _329;
  int64_t _332 = (int64_t)(_331 ? _328 : _330);
  uint64_t _333 = (uint64_t)(_332);
  uint64_t _334 = _333;
  uint64_t _335 = (uint64_t)(2147483647ull);
  bool _336 = _334 <= _335;
  if (!_336)
  {
   int64_t _337 = (int64_t)(_28);
   int64_t _338 = (int64_t)(0ll);
   int64_t _339 = _338 - _337;
   bool _340 = _337 > _338;
   int64_t _341 = (int64_t)(_340 ? _337 : _339);
   uint64_t _342 = (uint64_t)(_341);
   uint64_t _343 = _342;
   uint64_t _344 = (uint64_t)(2147483647ull);
   int32_t _345 = halide_error_buffer_allocation_too_large(_ucon, "mask", _343, _344);
   return _345;
  }
  int64_t _346 = (int64_t)(_31);
  int64_t _347 = (int64_t)(_32);
  int64_t _348 = _346 * _347;
  int64_t _349 = (int64_t)(0ll);
  int64_t _350 = _349 - _348;
  bool _351 = _348 > _349;
  int64_t _352 = (int64_t)(_351 ? _348 : _350);
  uint64_t _353 = (uint64_t)(_352);
  uint64_t _354 = _353;
  uint64_t _355 = (uint64_t)(2147483647ull);
  bool _356 = _354 <= _355;
  if (!_356)
  {
   int64_t _357 = (int64_t)(_31);
   int64_t _358 = (int64_t)(_32);
   int64_t _359 = _357 * _358;
   int64_t _360 = (int64_t)(0ll);
   int64_t _361 = _360 - _359;
   bool _362 = _359 > _360;
   int64_t _363 = (int64_t)(_362 ? _359 : _361);
   uint64_t _364 = (uint64_t)(_363);
   uint64_t _365 = _364;
   uint64_t _366 = (uint64_t)(2147483647ull);
   int32_t _367 = halide_error_buffer_allocation_too_large(_ucon, "mask", _365, _366);
   return _367;
  }
  int64_t _368 = (int64_t)(2147483647ll);
  bool _369 = _277 <= _368;
  if (!_369)
  {
   int64_t _370 = (int64_t)(2147483647ll);
   int32_t _371 = halide_error_buffer_extents_too_large(_ucon, "mask", _277, _370);
   return _371;
  }
  int64_t _372 = (int64_t)(_38);
  int64_t _373 = (int64_t)(0ll);
  int64_t _374 = _373 - _372;
  bool _375 = _372 > _373;
  int64_t _376 = (int64_t)(_375 ? _372 : _374);
  uint64_t _377 = (uint64_t)(_376);
  uint64_t _378 = _377;
  uint64_t _379 = (uint64_t)(2147483647ull);
  bool _380 = _378 <= _379;
  if (!_380)
  {
   int64_t _381 = (int64_t)(_38);
   int64_t _382 = (int64_t)(0ll);
   int64_t _383 = _382 - _381;
   bool _384 = _381 > _382;
   int64_t _385 = (int64_t)(_384 ? _381 : _383);
   uint64_t _386 = (uint64_t)(_385);
   uint64_t _387 = _386;
   uint64_t _388 = (uint64_t)(2147483647ull);
   int32_t _389 = halide_error_buffer_allocation_too_large(_ucon, "output", _387, _388);
   return _389;
  }
  int64_t _390 = (int64_t)(_41);
  int32_t _391 = _42 >> 7;
  int32_t _392 = _391 * 128;
  int64_t _393 = (int64_t)(_392);
  int64_t _394 = _390 * _393;
  int64_t _395 = (int64_t)(0ll);
  int64_t _396 = _395 - _394;
  bool _397 = _394 > _395;
  int64_t _398 = (int64_t)(_397 ? _394 : _396);
  uint64_t _399 = (uint64_t)(_398);
  uint64_t _400 = _399;
  uint64_t _401 = (uint64_t)(2147483647ull);
  bool _402 = _400 <= _401;
  if (!_402)
  {
   int64_t _403 = (int64_t)(_41);
   int32_t _404 = _42 >> 7;
   int32_t _405 = _404 * 128;
   int64_t _406 = (int64_t)(_405);
   int64_t _407 = _403 * _406;
   int64_t _408 = (int64_t)(0ll);
   int64_t _409 = _408 - _407;
   bool _410 = _407 > _408;
   int64_t _411 = (int64_t)(_410 ? _407 : _409);
   uint64_t _412 = (uint64_t)(_411);
   uint64_t _413 = _412;
   uint64_t _414 = (uint64_t)(2147483647ull);
   int32_t _415 = halide_error_buffer_allocation_too_large(_ucon, "output", _413, _414);
   return _415;
  }
  int64_t _416 = (int64_t)(2147483647ll);
  bool _417 = _280 <= _416;
  if (!_417)
  {
   int64_t _418 = (int64_t)(2147483647ll);
   int32_t _419 = halide_error_buffer_extents_too_large(_ucon, "output", _280, _418);
   return _419;
  }
  bool _420 = !(_15);
  if (!_420)
  {
   int32_t _421 = halide_error_device_dirty_with_no_device_support(_ucon, "Input buffer input");
   return _421;
  }
  bool _422 = !(_25);
  if (!_422)
  {
   int32_t _423 = halide_error_device_dirty_with_no_device_support(_ucon, "Input buffer mask");
   return _423;
  }
  bool _424 = !(_35);
  if (!_424)
  {
   int32_t _425 = halide_error_device_dirty_with_no_device_support(_ucon, "Output buffer output");
   return _425;
  }
  uint64_t _426 = (uint64_t)(_input);
  uint64_t _427 = (uint64_t)(127ull);
  uint64_t _428 = _426 & _427;
  uint64_t _429 = (uint64_t)(0ull);
  bool _430 = _428 == _429;
  if (!_430)
  {
   int32_t _431 = halide_error_unaligned_host_ptr(_ucon, "input", 128);
   return _431;
  }
  uint64_t _432 = (uint64_t)(_output);
  uint64_t _433 = (uint64_t)(127ull);
  uint64_t _434 = _432 & _433;
  uint64_t _435 = (uint64_t)(0ull);
  bool _436 = _434 == _435;
  if (!_436)
  {
   int32_t _437 = halide_error_unaligned_host_ptr(_ucon, "output", 128);
   return _437;
  }
  uint64_t _438 = (uint64_t)(0ull);
  void *_439 = (void *)(_438);
  bool _440 = _input != _439;
  if (!_440)
  {
   int32_t _441 = halide_error_host_is_null(_ucon, "Input buffer input");
   return _441;
  }
  uint64_t _442 = (uint64_t)(0ull);
  void *_443 = (void *)(_442);
  bool _444 = _mask != _443;
  if (!_444)
  {
   int32_t _445 = halide_error_host_is_null(_ucon, "Input buffer mask");
   return _445;
  }
  uint64_t _446 = (uint64_t)(0ull);
  void *_447 = (void *)(_446);
  bool _448 = _output != _447;
  if (!_448)
  {
   int32_t _449 = halide_error_host_is_null(_ucon, "Output buffer output");
   return _449;
  }
  int32_t _450 = _41 >> 1;
  int32_t _451 = _450 + _41;
  bool _452 = _451 < 1;
  int32_t _453 = (int32_t)(_452 ? -1 : 0);
  bool _454 = _450 == 0;
  int32_t _455 = (int32_t)(_454 ? -1 : 0);
  bool _456 = _41 < 0;
  int32_t _457 = (int32_t)(_456 ? -1 : 0);
  int32_t _458 = _451 - _453;
  int32_t _459 = _458 + -1;
  int32_t _460 = _450 - _455;
  int32_t _461 = _459 / _460;
  int32_t _462 = ~_457;
  int32_t _463 = _462 - _457;
  int32_t _464 = _453 & _463;
  int32_t _465 = _461 + _464;
  int32_t _466 = ~_455;
  int32_t _467 = _465 & _466;
  // produce output
  int32_t _468 = _38 + 128;
  int32_t _469 = ::halide_cpp_min(_468, _18);
  int32_t _470 = _41 + 14;
  int32_t _471 = _470 >> 4;
  int32_t _472 = _41 + -2;
  int32_t _473 = _472 >> 4;
  int32_t _474 = _38 + 127;
  int32_t _475 = _474 >> 7;
  int32_t _476 = _41 - _450;
  int32_t _477 = _30 * _32;
  int32_t _478 = _477 + _27;
  #pragma omp parallel for
  for (int _output_s0_y_yo = 0; _output_s0_y_yo < 0 + _467; _output_s0_y_yo++)
  {
   int32_t _479 = _output_s0_y_yo * _450;
   int32_t _480 = ::halide_cpp_min(_479, _476);
   int32_t _481 = _21 - _480;
   int32_t _482 = _481 + -9;
   int32_t _483 = _482 >> 3;
   int32_t _484 = ::halide_cpp_min(_483, _473);
   int32_t _485 = _469 + -1;
   int32_t _486 = _485 >> 7;
   int32_t _487 = ::halide_cpp_max(_486, 0);
   int32_t _488 = ::halide_cpp_max(_484, -1);
   int32_t _489 = _32 * 2;
   int32_t _490 = _489 - _478;
   int32_t _491 = _32 - _478;
   int32_t _492 = 2 - _478;
   int32_t _493 = 1 - _478;
   int32_t _494 = 0 - _478;
   #pragma omp parallel for
   for (int _output_s0_y_y_y = 0; _output_s0_y_y_y < 0 + _471; _output_s0_y_y_y++)
   {
    int32_t _495 = _488 + 1;
    bool _496 = _output_s0_y_y_y < _495;
    if (_496)
    {
     int32_t _497 = _output_s0_y_y_y * 8;
     int32_t _498 = _497 + _480;
     for (int _output_s0_x_x = 0; _output_s0_x_x < 0 + _487; _output_s0_x_x++)
     {
      int32_t _499 = _output_s0_x_x * 128;
      int32_t _500 = _499 + -1;
      int32x128_t _501 = int32x128_t_ops::ramp(_500, 1);
      int32x128_t _502 = int32x128_t_ops::broadcast(0);
      int32x128_t _503 = int32x128_t_ops::max(_501, _502);
      int32_t _504 = ::halide_cpp_max(_498, 1);
      int32_t _505 = _504 + -1;
      int32_t _506 = _505 * _22;
      int32x128_t _507 = int32x128_t_ops::broadcast(_506);
      int32x128_t _508 = _503 + _507;
      uint8x128_t _509 = uint8x128_t_ops::load_gather(_input, _508);
      uint16x128_t _510 = uint16x128_t_ops::convert_from<uint8x128_t>(_509);
      uint8_t _511 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _512 = uint8x128_t_ops::broadcast(_511);
      uint16x128_t _513 = uint16x128_t_ops::convert_from<uint8x128_t>(_512);
      uint16x128_t _514 = _510 * _513;
      uint16x128_t _515 = _514;
      int16x128_t _516 = int16x128_t_ops::convert_from<uint16x128_t>(_515);
      uint16x128_t _517 = uint16x128_t_ops::convert_from<int16x128_t>(_516);
      int32_t _518 = ::halide_cpp_max(_498, 0);
      int32_t _519 = _518 * _22;
      int32x128_t _520 = int32x128_t_ops::broadcast(_519);
      int32x128_t _521 = _503 + _520;
      uint8x128_t _522 = uint8x128_t_ops::load_gather(_input, _521);
      uint16x128_t _523 = uint16x128_t_ops::convert_from<uint8x128_t>(_522);
      uint8_t _524 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _525 = uint8x128_t_ops::broadcast(_524);
      uint16x128_t _526 = uint16x128_t_ops::convert_from<uint8x128_t>(_525);
      uint16x128_t _527 = _523 * _526;
      uint16x128_t _528 = _527;
      int16x128_t _529 = int16x128_t_ops::convert_from<uint16x128_t>(_528);
      uint16x128_t _530 = uint16x128_t_ops::convert_from<int16x128_t>(_529);
      uint16x128_t _531 = _517 + _530;
      int32_t _532 = ::halide_cpp_max(_498, -1);
      int32_t _533 = _532 + 1;
      int32_t _534 = _533 * _22;
      int32x128_t _535 = int32x128_t_ops::broadcast(_534);
      int32x128_t _536 = _503 + _535;
      uint8x128_t _537 = uint8x128_t_ops::load_gather(_input, _536);
      uint16x128_t _538 = uint16x128_t_ops::convert_from<uint8x128_t>(_537);
      uint8_t _539 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _540 = uint8x128_t_ops::broadcast(_539);
      uint16x128_t _541 = uint16x128_t_ops::convert_from<uint8x128_t>(_540);
      uint16x128_t _542 = _538 * _541;
      uint16x128_t _543 = _542;
      int16x128_t _544 = int16x128_t_ops::convert_from<uint16x128_t>(_543);
      uint16x128_t _545 = uint16x128_t_ops::convert_from<int16x128_t>(_544);
      uint16x128_t _546 = _531 + _545;
      int32_t _547 = _499 + _506;
      uint8x128_t _548 = uint8x128_t_ops::load(_input, _547);
      uint16x128_t _549 = uint16x128_t_ops::convert_from<uint8x128_t>(_548);
      uint8_t _550 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _551 = uint8x128_t_ops::broadcast(_550);
      uint16x128_t _552 = uint16x128_t_ops::convert_from<uint8x128_t>(_551);
      uint16x128_t _553 = _549 * _552;
      uint16x128_t _554 = _553;
      int16x128_t _555 = int16x128_t_ops::convert_from<uint16x128_t>(_554);
      uint16x128_t _556 = uint16x128_t_ops::convert_from<int16x128_t>(_555);
      uint16x128_t _557 = _546 + _556;
      int32_t _558 = _499 + _519;
      uint8x128_t _559 = uint8x128_t_ops::load(_input, _558);
      uint16x128_t _560 = uint16x128_t_ops::convert_from<uint8x128_t>(_559);
      int32_t _561 = _491 + 1;
      uint8_t _562 = ((const uint8_t *)_mask)[_561];
      uint8x128_t _563 = uint8x128_t_ops::broadcast(_562);
      uint16x128_t _564 = uint16x128_t_ops::convert_from<uint8x128_t>(_563);
      uint16x128_t _565 = _560 * _564;
      uint16x128_t _566 = _565;
      int16x128_t _567 = int16x128_t_ops::convert_from<uint16x128_t>(_566);
      uint16x128_t _568 = uint16x128_t_ops::convert_from<int16x128_t>(_567);
      uint16x128_t _569 = _557 + _568;
      int32_t _570 = _499 + _534;
      uint8x128_t _571 = uint8x128_t_ops::load(_input, _570);
      uint16x128_t _572 = uint16x128_t_ops::convert_from<uint8x128_t>(_571);
      int32_t _573 = _490 + 1;
      uint8_t _574 = ((const uint8_t *)_mask)[_573];
      uint8x128_t _575 = uint8x128_t_ops::broadcast(_574);
      uint16x128_t _576 = uint16x128_t_ops::convert_from<uint8x128_t>(_575);
      uint16x128_t _577 = _572 * _576;
      uint16x128_t _578 = _577;
      int16x128_t _579 = int16x128_t_ops::convert_from<uint16x128_t>(_578);
      uint16x128_t _580 = uint16x128_t_ops::convert_from<int16x128_t>(_579);
      uint16x128_t _581 = _569 + _580;
      int32_t _582 = _506 + _499;
      int32_t _583 = _582 + 1;
      uint8x128_t _584 = uint8x128_t_ops::load(_input, _583);
      uint16x128_t _585 = uint16x128_t_ops::convert_from<uint8x128_t>(_584);
      uint8_t _586 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _587 = uint8x128_t_ops::broadcast(_586);
      uint16x128_t _588 = uint16x128_t_ops::convert_from<uint8x128_t>(_587);
      uint16x128_t _589 = _585 * _588;
      uint16x128_t _590 = _589;
      int16x128_t _591 = int16x128_t_ops::convert_from<uint16x128_t>(_590);
      uint16x128_t _592 = uint16x128_t_ops::convert_from<int16x128_t>(_591);
      uint16x128_t _593 = _581 + _592;
      int32_t _594 = _519 + _499;
      int32_t _595 = _594 + 1;
      uint8x128_t _596 = uint8x128_t_ops::load(_input, _595);
      uint16x128_t _597 = uint16x128_t_ops::convert_from<uint8x128_t>(_596);
      int32_t _598 = _491 + 2;
      uint8_t _599 = ((const uint8_t *)_mask)[_598];
      uint8x128_t _600 = uint8x128_t_ops::broadcast(_599);
      uint16x128_t _601 = uint16x128_t_ops::convert_from<uint8x128_t>(_600);
      uint16x128_t _602 = _597 * _601;
      uint16x128_t _603 = _602;
      int16x128_t _604 = int16x128_t_ops::convert_from<uint16x128_t>(_603);
      uint16x128_t _605 = uint16x128_t_ops::convert_from<int16x128_t>(_604);
      uint16x128_t _606 = _593 + _605;
      int32_t _607 = _534 + _499;
      int32_t _608 = _607 + 1;
      uint8x128_t _609 = uint8x128_t_ops::load(_input, _608);
      uint16x128_t _610 = uint16x128_t_ops::convert_from<uint8x128_t>(_609);
      int32_t _611 = _490 + 2;
      uint8_t _612 = ((const uint8_t *)_mask)[_611];
      uint8x128_t _613 = uint8x128_t_ops::broadcast(_612);
      uint16x128_t _614 = uint16x128_t_ops::convert_from<uint8x128_t>(_613);
      uint16x128_t _615 = _610 * _614;
      uint16x128_t _616 = _615;
      int16x128_t _617 = int16x128_t_ops::convert_from<uint16x128_t>(_616);
      uint16x128_t _618 = uint16x128_t_ops::convert_from<int16x128_t>(_617);
      uint16x128_t _619 = _606 + _618;
      uint16_t _620 = (uint16_t)(255ull);
      uint16x128_t _621 = uint16x128_t_ops::broadcast(_620);
      uint16x128_t _622 = uint16x128_t_ops::min(_619, _621);
      uint8x128_t _623 = uint8x128_t_ops::convert_from<uint16x128_t>(_622);
      int32_t _624 = _42 * _498;
      int32_t _625 = _499 + _624;
      uint8x128_t_ops::store(_623, _output, _625);
      int32_t _626 = _output_s0_x_x * 128;
      int32_t _627 = _626 + -1;
      int32x128_t _628 = int32x128_t_ops::ramp(_627, 1);
      int32x128_t _629 = int32x128_t_ops::broadcast(0);
      int32x128_t _630 = int32x128_t_ops::max(_628, _629);
      int32_t _631 = ::halide_cpp_max(_498, 0);
      int32_t _632 = _631 * _22;
      int32x128_t _633 = int32x128_t_ops::broadcast(_632);
      int32x128_t _634 = _630 + _633;
      uint8x128_t _635 = uint8x128_t_ops::load_gather(_input, _634);
      uint16x128_t _636 = uint16x128_t_ops::convert_from<uint8x128_t>(_635);
      uint8_t _637 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _638 = uint8x128_t_ops::broadcast(_637);
      uint16x128_t _639 = uint16x128_t_ops::convert_from<uint8x128_t>(_638);
      uint16x128_t _640 = _636 * _639;
      uint16x128_t _641 = _640;
      int16x128_t _642 = int16x128_t_ops::convert_from<uint16x128_t>(_641);
      uint16x128_t _643 = uint16x128_t_ops::convert_from<int16x128_t>(_642);
      int32_t _644 = ::halide_cpp_max(_498, -1);
      int32_t _645 = _644 + 1;
      int32_t _646 = _645 * _22;
      int32x128_t _647 = int32x128_t_ops::broadcast(_646);
      int32x128_t _648 = _630 + _647;
      uint8x128_t _649 = uint8x128_t_ops::load_gather(_input, _648);
      uint16x128_t _650 = uint16x128_t_ops::convert_from<uint8x128_t>(_649);
      uint8_t _651 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _652 = uint8x128_t_ops::broadcast(_651);
      uint16x128_t _653 = uint16x128_t_ops::convert_from<uint8x128_t>(_652);
      uint16x128_t _654 = _650 * _653;
      uint16x128_t _655 = _654;
      int16x128_t _656 = int16x128_t_ops::convert_from<uint16x128_t>(_655);
      uint16x128_t _657 = uint16x128_t_ops::convert_from<int16x128_t>(_656);
      uint16x128_t _658 = _643 + _657;
      int32_t _659 = ::halide_cpp_max(_498, -2);
      int32_t _660 = _659 + 2;
      int32_t _661 = _660 * _22;
      int32x128_t _662 = int32x128_t_ops::broadcast(_661);
      int32x128_t _663 = _630 + _662;
      uint8x128_t _664 = uint8x128_t_ops::load_gather(_input, _663);
      uint16x128_t _665 = uint16x128_t_ops::convert_from<uint8x128_t>(_664);
      uint8_t _666 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _667 = uint8x128_t_ops::broadcast(_666);
      uint16x128_t _668 = uint16x128_t_ops::convert_from<uint8x128_t>(_667);
      uint16x128_t _669 = _665 * _668;
      uint16x128_t _670 = _669;
      int16x128_t _671 = int16x128_t_ops::convert_from<uint16x128_t>(_670);
      uint16x128_t _672 = uint16x128_t_ops::convert_from<int16x128_t>(_671);
      uint16x128_t _673 = _658 + _672;
      int32_t _674 = _626 + _632;
      uint8x128_t _675 = uint8x128_t_ops::load(_input, _674);
      uint16x128_t _676 = uint16x128_t_ops::convert_from<uint8x128_t>(_675);
      uint8_t _677 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _678 = uint8x128_t_ops::broadcast(_677);
      uint16x128_t _679 = uint16x128_t_ops::convert_from<uint8x128_t>(_678);
      uint16x128_t _680 = _676 * _679;
      uint16x128_t _681 = _680;
      int16x128_t _682 = int16x128_t_ops::convert_from<uint16x128_t>(_681);
      uint16x128_t _683 = uint16x128_t_ops::convert_from<int16x128_t>(_682);
      uint16x128_t _684 = _673 + _683;
      int32_t _685 = _626 + _646;
      uint8x128_t _686 = uint8x128_t_ops::load(_input, _685);
      uint16x128_t _687 = uint16x128_t_ops::convert_from<uint8x128_t>(_686);
      int32_t _688 = _491 + 1;
      uint8_t _689 = ((const uint8_t *)_mask)[_688];
      uint8x128_t _690 = uint8x128_t_ops::broadcast(_689);
      uint16x128_t _691 = uint16x128_t_ops::convert_from<uint8x128_t>(_690);
      uint16x128_t _692 = _687 * _691;
      uint16x128_t _693 = _692;
      int16x128_t _694 = int16x128_t_ops::convert_from<uint16x128_t>(_693);
      uint16x128_t _695 = uint16x128_t_ops::convert_from<int16x128_t>(_694);
      uint16x128_t _696 = _684 + _695;
      int32_t _697 = _626 + _661;
      uint8x128_t _698 = uint8x128_t_ops::load(_input, _697);
      uint16x128_t _699 = uint16x128_t_ops::convert_from<uint8x128_t>(_698);
      int32_t _700 = _490 + 1;
      uint8_t _701 = ((const uint8_t *)_mask)[_700];
      uint8x128_t _702 = uint8x128_t_ops::broadcast(_701);
      uint16x128_t _703 = uint16x128_t_ops::convert_from<uint8x128_t>(_702);
      uint16x128_t _704 = _699 * _703;
      uint16x128_t _705 = _704;
      int16x128_t _706 = int16x128_t_ops::convert_from<uint16x128_t>(_705);
      uint16x128_t _707 = uint16x128_t_ops::convert_from<int16x128_t>(_706);
      uint16x128_t _708 = _696 + _707;
      int32_t _709 = _632 + _626;
      int32_t _710 = _709 + 1;
      uint8x128_t _711 = uint8x128_t_ops::load(_input, _710);
      uint16x128_t _712 = uint16x128_t_ops::convert_from<uint8x128_t>(_711);
      uint8_t _713 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _714 = uint8x128_t_ops::broadcast(_713);
      uint16x128_t _715 = uint16x128_t_ops::convert_from<uint8x128_t>(_714);
      uint16x128_t _716 = _712 * _715;
      uint16x128_t _717 = _716;
      int16x128_t _718 = int16x128_t_ops::convert_from<uint16x128_t>(_717);
      uint16x128_t _719 = uint16x128_t_ops::convert_from<int16x128_t>(_718);
      uint16x128_t _720 = _708 + _719;
      int32_t _721 = _646 + _626;
      int32_t _722 = _721 + 1;
      uint8x128_t _723 = uint8x128_t_ops::load(_input, _722);
      uint16x128_t _724 = uint16x128_t_ops::convert_from<uint8x128_t>(_723);
      int32_t _725 = _491 + 2;
      uint8_t _726 = ((const uint8_t *)_mask)[_725];
      uint8x128_t _727 = uint8x128_t_ops::broadcast(_726);
      uint16x128_t _728 = uint16x128_t_ops::convert_from<uint8x128_t>(_727);
      uint16x128_t _729 = _724 * _728;
      uint16x128_t _730 = _729;
      int16x128_t _731 = int16x128_t_ops::convert_from<uint16x128_t>(_730);
      uint16x128_t _732 = uint16x128_t_ops::convert_from<int16x128_t>(_731);
      uint16x128_t _733 = _720 + _732;
      int32_t _734 = _661 + _626;
      int32_t _735 = _734 + 1;
      uint8x128_t _736 = uint8x128_t_ops::load(_input, _735);
      uint16x128_t _737 = uint16x128_t_ops::convert_from<uint8x128_t>(_736);
      int32_t _738 = _490 + 2;
      uint8_t _739 = ((const uint8_t *)_mask)[_738];
      uint8x128_t _740 = uint8x128_t_ops::broadcast(_739);
      uint16x128_t _741 = uint16x128_t_ops::convert_from<uint8x128_t>(_740);
      uint16x128_t _742 = _737 * _741;
      uint16x128_t _743 = _742;
      int16x128_t _744 = int16x128_t_ops::convert_from<uint16x128_t>(_743);
      uint16x128_t _745 = uint16x128_t_ops::convert_from<int16x128_t>(_744);
      uint16x128_t _746 = _733 + _745;
      uint16_t _747 = (uint16_t)(255ull);
      uint16x128_t _748 = uint16x128_t_ops::broadcast(_747);
      uint16x128_t _749 = uint16x128_t_ops::min(_746, _748);
      uint8x128_t _750 = uint8x128_t_ops::convert_from<uint16x128_t>(_749);
      int32_t _751 = _498 + 1;
      int32_t _752 = _751 * _42;
      int32_t _753 = _626 + _752;
      uint8x128_t_ops::store(_750, _output, _753);
      int32_t _754 = _output_s0_x_x * 128;
      int32_t _755 = _754 + -1;
      int32x128_t _756 = int32x128_t_ops::ramp(_755, 1);
      int32x128_t _757 = int32x128_t_ops::broadcast(0);
      int32x128_t _758 = int32x128_t_ops::max(_756, _757);
      int32_t _759 = ::halide_cpp_max(_498, -1);
      int32_t _760 = _759 + 1;
      int32_t _761 = _760 * _22;
      int32x128_t _762 = int32x128_t_ops::broadcast(_761);
      int32x128_t _763 = _758 + _762;
      uint8x128_t _764 = uint8x128_t_ops::load_gather(_input, _763);
      uint16x128_t _765 = uint16x128_t_ops::convert_from<uint8x128_t>(_764);
      uint8_t _766 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _767 = uint8x128_t_ops::broadcast(_766);
      uint16x128_t _768 = uint16x128_t_ops::convert_from<uint8x128_t>(_767);
      uint16x128_t _769 = _765 * _768;
      uint16x128_t _770 = _769;
      int16x128_t _771 = int16x128_t_ops::convert_from<uint16x128_t>(_770);
      uint16x128_t _772 = uint16x128_t_ops::convert_from<int16x128_t>(_771);
      int32_t _773 = ::halide_cpp_max(_498, -2);
      int32_t _774 = _773 + 2;
      int32_t _775 = _774 * _22;
      int32x128_t _776 = int32x128_t_ops::broadcast(_775);
      int32x128_t _777 = _758 + _776;
      uint8x128_t _778 = uint8x128_t_ops::load_gather(_input, _777);
      uint16x128_t _779 = uint16x128_t_ops::convert_from<uint8x128_t>(_778);
      uint8_t _780 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _781 = uint8x128_t_ops::broadcast(_780);
      uint16x128_t _782 = uint16x128_t_ops::convert_from<uint8x128_t>(_781);
      uint16x128_t _783 = _779 * _782;
      uint16x128_t _784 = _783;
      int16x128_t _785 = int16x128_t_ops::convert_from<uint16x128_t>(_784);
      uint16x128_t _786 = uint16x128_t_ops::convert_from<int16x128_t>(_785);
      uint16x128_t _787 = _772 + _786;
      int32_t _788 = ::halide_cpp_max(_498, -3);
      int32_t _789 = _788 + 3;
      int32_t _790 = _789 * _22;
      int32x128_t _791 = int32x128_t_ops::broadcast(_790);
      int32x128_t _792 = _758 + _791;
      uint8x128_t _793 = uint8x128_t_ops::load_gather(_input, _792);
      uint16x128_t _794 = uint16x128_t_ops::convert_from<uint8x128_t>(_793);
      uint8_t _795 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _796 = uint8x128_t_ops::broadcast(_795);
      uint16x128_t _797 = uint16x128_t_ops::convert_from<uint8x128_t>(_796);
      uint16x128_t _798 = _794 * _797;
      uint16x128_t _799 = _798;
      int16x128_t _800 = int16x128_t_ops::convert_from<uint16x128_t>(_799);
      uint16x128_t _801 = uint16x128_t_ops::convert_from<int16x128_t>(_800);
      uint16x128_t _802 = _787 + _801;
      int32_t _803 = _754 + _761;
      uint8x128_t _804 = uint8x128_t_ops::load(_input, _803);
      uint16x128_t _805 = uint16x128_t_ops::convert_from<uint8x128_t>(_804);
      uint8_t _806 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _807 = uint8x128_t_ops::broadcast(_806);
      uint16x128_t _808 = uint16x128_t_ops::convert_from<uint8x128_t>(_807);
      uint16x128_t _809 = _805 * _808;
      uint16x128_t _810 = _809;
      int16x128_t _811 = int16x128_t_ops::convert_from<uint16x128_t>(_810);
      uint16x128_t _812 = uint16x128_t_ops::convert_from<int16x128_t>(_811);
      uint16x128_t _813 = _802 + _812;
      int32_t _814 = _754 + _775;
      uint8x128_t _815 = uint8x128_t_ops::load(_input, _814);
      uint16x128_t _816 = uint16x128_t_ops::convert_from<uint8x128_t>(_815);
      int32_t _817 = _491 + 1;
      uint8_t _818 = ((const uint8_t *)_mask)[_817];
      uint8x128_t _819 = uint8x128_t_ops::broadcast(_818);
      uint16x128_t _820 = uint16x128_t_ops::convert_from<uint8x128_t>(_819);
      uint16x128_t _821 = _816 * _820;
      uint16x128_t _822 = _821;
      int16x128_t _823 = int16x128_t_ops::convert_from<uint16x128_t>(_822);
      uint16x128_t _824 = uint16x128_t_ops::convert_from<int16x128_t>(_823);
      uint16x128_t _825 = _813 + _824;
      int32_t _826 = _754 + _790;
      uint8x128_t _827 = uint8x128_t_ops::load(_input, _826);
      uint16x128_t _828 = uint16x128_t_ops::convert_from<uint8x128_t>(_827);
      int32_t _829 = _490 + 1;
      uint8_t _830 = ((const uint8_t *)_mask)[_829];
      uint8x128_t _831 = uint8x128_t_ops::broadcast(_830);
      uint16x128_t _832 = uint16x128_t_ops::convert_from<uint8x128_t>(_831);
      uint16x128_t _833 = _828 * _832;
      uint16x128_t _834 = _833;
      int16x128_t _835 = int16x128_t_ops::convert_from<uint16x128_t>(_834);
      uint16x128_t _836 = uint16x128_t_ops::convert_from<int16x128_t>(_835);
      uint16x128_t _837 = _825 + _836;
      int32_t _838 = _761 + _754;
      int32_t _839 = _838 + 1;
      uint8x128_t _840 = uint8x128_t_ops::load(_input, _839);
      uint16x128_t _841 = uint16x128_t_ops::convert_from<uint8x128_t>(_840);
      uint8_t _842 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _843 = uint8x128_t_ops::broadcast(_842);
      uint16x128_t _844 = uint16x128_t_ops::convert_from<uint8x128_t>(_843);
      uint16x128_t _845 = _841 * _844;
      uint16x128_t _846 = _845;
      int16x128_t _847 = int16x128_t_ops::convert_from<uint16x128_t>(_846);
      uint16x128_t _848 = uint16x128_t_ops::convert_from<int16x128_t>(_847);
      uint16x128_t _849 = _837 + _848;
      int32_t _850 = _775 + _754;
      int32_t _851 = _850 + 1;
      uint8x128_t _852 = uint8x128_t_ops::load(_input, _851);
      uint16x128_t _853 = uint16x128_t_ops::convert_from<uint8x128_t>(_852);
      int32_t _854 = _491 + 2;
      uint8_t _855 = ((const uint8_t *)_mask)[_854];
      uint8x128_t _856 = uint8x128_t_ops::broadcast(_855);
      uint16x128_t _857 = uint16x128_t_ops::convert_from<uint8x128_t>(_856);
      uint16x128_t _858 = _853 * _857;
      uint16x128_t _859 = _858;
      int16x128_t _860 = int16x128_t_ops::convert_from<uint16x128_t>(_859);
      uint16x128_t _861 = uint16x128_t_ops::convert_from<int16x128_t>(_860);
      uint16x128_t _862 = _849 + _861;
      int32_t _863 = _790 + _754;
      int32_t _864 = _863 + 1;
      uint8x128_t _865 = uint8x128_t_ops::load(_input, _864);
      uint16x128_t _866 = uint16x128_t_ops::convert_from<uint8x128_t>(_865);
      int32_t _867 = _490 + 2;
      uint8_t _868 = ((const uint8_t *)_mask)[_867];
      uint8x128_t _869 = uint8x128_t_ops::broadcast(_868);
      uint16x128_t _870 = uint16x128_t_ops::convert_from<uint8x128_t>(_869);
      uint16x128_t _871 = _866 * _870;
      uint16x128_t _872 = _871;
      int16x128_t _873 = int16x128_t_ops::convert_from<uint16x128_t>(_872);
      uint16x128_t _874 = uint16x128_t_ops::convert_from<int16x128_t>(_873);
      uint16x128_t _875 = _862 + _874;
      uint16_t _876 = (uint16_t)(255ull);
      uint16x128_t _877 = uint16x128_t_ops::broadcast(_876);
      uint16x128_t _878 = uint16x128_t_ops::min(_875, _877);
      uint8x128_t _879 = uint8x128_t_ops::convert_from<uint16x128_t>(_878);
      int32_t _880 = _498 + 2;
      int32_t _881 = _880 * _42;
      int32_t _882 = _754 + _881;
      uint8x128_t_ops::store(_879, _output, _882);
      int32_t _883 = _output_s0_x_x * 128;
      int32_t _884 = _883 + -1;
      int32x128_t _885 = int32x128_t_ops::ramp(_884, 1);
      int32x128_t _886 = int32x128_t_ops::broadcast(0);
      int32x128_t _887 = int32x128_t_ops::max(_885, _886);
      int32_t _888 = ::halide_cpp_max(_498, -2);
      int32_t _889 = _888 + 2;
      int32_t _890 = _889 * _22;
      int32x128_t _891 = int32x128_t_ops::broadcast(_890);
      int32x128_t _892 = _887 + _891;
      uint8x128_t _893 = uint8x128_t_ops::load_gather(_input, _892);
      uint16x128_t _894 = uint16x128_t_ops::convert_from<uint8x128_t>(_893);
      uint8_t _895 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _896 = uint8x128_t_ops::broadcast(_895);
      uint16x128_t _897 = uint16x128_t_ops::convert_from<uint8x128_t>(_896);
      uint16x128_t _898 = _894 * _897;
      uint16x128_t _899 = _898;
      int16x128_t _900 = int16x128_t_ops::convert_from<uint16x128_t>(_899);
      uint16x128_t _901 = uint16x128_t_ops::convert_from<int16x128_t>(_900);
      int32_t _902 = ::halide_cpp_max(_498, -3);
      int32_t _903 = _902 + 3;
      int32_t _904 = _903 * _22;
      int32x128_t _905 = int32x128_t_ops::broadcast(_904);
      int32x128_t _906 = _887 + _905;
      uint8x128_t _907 = uint8x128_t_ops::load_gather(_input, _906);
      uint16x128_t _908 = uint16x128_t_ops::convert_from<uint8x128_t>(_907);
      uint8_t _909 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _910 = uint8x128_t_ops::broadcast(_909);
      uint16x128_t _911 = uint16x128_t_ops::convert_from<uint8x128_t>(_910);
      uint16x128_t _912 = _908 * _911;
      uint16x128_t _913 = _912;
      int16x128_t _914 = int16x128_t_ops::convert_from<uint16x128_t>(_913);
      uint16x128_t _915 = uint16x128_t_ops::convert_from<int16x128_t>(_914);
      uint16x128_t _916 = _901 + _915;
      int32_t _917 = ::halide_cpp_max(_498, -4);
      int32_t _918 = _917 + 4;
      int32_t _919 = _918 * _22;
      int32x128_t _920 = int32x128_t_ops::broadcast(_919);
      int32x128_t _921 = _887 + _920;
      uint8x128_t _922 = uint8x128_t_ops::load_gather(_input, _921);
      uint16x128_t _923 = uint16x128_t_ops::convert_from<uint8x128_t>(_922);
      uint8_t _924 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _925 = uint8x128_t_ops::broadcast(_924);
      uint16x128_t _926 = uint16x128_t_ops::convert_from<uint8x128_t>(_925);
      uint16x128_t _927 = _923 * _926;
      uint16x128_t _928 = _927;
      int16x128_t _929 = int16x128_t_ops::convert_from<uint16x128_t>(_928);
      uint16x128_t _930 = uint16x128_t_ops::convert_from<int16x128_t>(_929);
      uint16x128_t _931 = _916 + _930;
      int32_t _932 = _883 + _890;
      uint8x128_t _933 = uint8x128_t_ops::load(_input, _932);
      uint16x128_t _934 = uint16x128_t_ops::convert_from<uint8x128_t>(_933);
      uint8_t _935 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _936 = uint8x128_t_ops::broadcast(_935);
      uint16x128_t _937 = uint16x128_t_ops::convert_from<uint8x128_t>(_936);
      uint16x128_t _938 = _934 * _937;
      uint16x128_t _939 = _938;
      int16x128_t _940 = int16x128_t_ops::convert_from<uint16x128_t>(_939);
      uint16x128_t _941 = uint16x128_t_ops::convert_from<int16x128_t>(_940);
      uint16x128_t _942 = _931 + _941;
      int32_t _943 = _883 + _904;
      uint8x128_t _944 = uint8x128_t_ops::load(_input, _943);
      uint16x128_t _945 = uint16x128_t_ops::convert_from<uint8x128_t>(_944);
      int32_t _946 = _491 + 1;
      uint8_t _947 = ((const uint8_t *)_mask)[_946];
      uint8x128_t _948 = uint8x128_t_ops::broadcast(_947);
      uint16x128_t _949 = uint16x128_t_ops::convert_from<uint8x128_t>(_948);
      uint16x128_t _950 = _945 * _949;
      uint16x128_t _951 = _950;
      int16x128_t _952 = int16x128_t_ops::convert_from<uint16x128_t>(_951);
      uint16x128_t _953 = uint16x128_t_ops::convert_from<int16x128_t>(_952);
      uint16x128_t _954 = _942 + _953;
      int32_t _955 = _883 + _919;
      uint8x128_t _956 = uint8x128_t_ops::load(_input, _955);
      uint16x128_t _957 = uint16x128_t_ops::convert_from<uint8x128_t>(_956);
      int32_t _958 = _490 + 1;
      uint8_t _959 = ((const uint8_t *)_mask)[_958];
      uint8x128_t _960 = uint8x128_t_ops::broadcast(_959);
      uint16x128_t _961 = uint16x128_t_ops::convert_from<uint8x128_t>(_960);
      uint16x128_t _962 = _957 * _961;
      uint16x128_t _963 = _962;
      int16x128_t _964 = int16x128_t_ops::convert_from<uint16x128_t>(_963);
      uint16x128_t _965 = uint16x128_t_ops::convert_from<int16x128_t>(_964);
      uint16x128_t _966 = _954 + _965;
      int32_t _967 = _890 + _883;
      int32_t _968 = _967 + 1;
      uint8x128_t _969 = uint8x128_t_ops::load(_input, _968);
      uint16x128_t _970 = uint16x128_t_ops::convert_from<uint8x128_t>(_969);
      uint8_t _971 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _972 = uint8x128_t_ops::broadcast(_971);
      uint16x128_t _973 = uint16x128_t_ops::convert_from<uint8x128_t>(_972);
      uint16x128_t _974 = _970 * _973;
      uint16x128_t _975 = _974;
      int16x128_t _976 = int16x128_t_ops::convert_from<uint16x128_t>(_975);
      uint16x128_t _977 = uint16x128_t_ops::convert_from<int16x128_t>(_976);
      uint16x128_t _978 = _966 + _977;
      int32_t _979 = _904 + _883;
      int32_t _980 = _979 + 1;
      uint8x128_t _981 = uint8x128_t_ops::load(_input, _980);
      uint16x128_t _982 = uint16x128_t_ops::convert_from<uint8x128_t>(_981);
      int32_t _983 = _491 + 2;
      uint8_t _984 = ((const uint8_t *)_mask)[_983];
      uint8x128_t _985 = uint8x128_t_ops::broadcast(_984);
      uint16x128_t _986 = uint16x128_t_ops::convert_from<uint8x128_t>(_985);
      uint16x128_t _987 = _982 * _986;
      uint16x128_t _988 = _987;
      int16x128_t _989 = int16x128_t_ops::convert_from<uint16x128_t>(_988);
      uint16x128_t _990 = uint16x128_t_ops::convert_from<int16x128_t>(_989);
      uint16x128_t _991 = _978 + _990;
      int32_t _992 = _919 + _883;
      int32_t _993 = _992 + 1;
      uint8x128_t _994 = uint8x128_t_ops::load(_input, _993);
      uint16x128_t _995 = uint16x128_t_ops::convert_from<uint8x128_t>(_994);
      int32_t _996 = _490 + 2;
      uint8_t _997 = ((const uint8_t *)_mask)[_996];
      uint8x128_t _998 = uint8x128_t_ops::broadcast(_997);
      uint16x128_t _999 = uint16x128_t_ops::convert_from<uint8x128_t>(_998);
      uint16x128_t _1000 = _995 * _999;
      uint16x128_t _1001 = _1000;
      int16x128_t _1002 = int16x128_t_ops::convert_from<uint16x128_t>(_1001);
      uint16x128_t _1003 = uint16x128_t_ops::convert_from<int16x128_t>(_1002);
      uint16x128_t _1004 = _991 + _1003;
      uint16_t _1005 = (uint16_t)(255ull);
      uint16x128_t _1006 = uint16x128_t_ops::broadcast(_1005);
      uint16x128_t _1007 = uint16x128_t_ops::min(_1004, _1006);
      uint8x128_t _1008 = uint8x128_t_ops::convert_from<uint16x128_t>(_1007);
      int32_t _1009 = _498 + 3;
      int32_t _1010 = _1009 * _42;
      int32_t _1011 = _883 + _1010;
      uint8x128_t_ops::store(_1008, _output, _1011);
      int32_t _1012 = _output_s0_x_x * 128;
      int32_t _1013 = _1012 + -1;
      int32x128_t _1014 = int32x128_t_ops::ramp(_1013, 1);
      int32x128_t _1015 = int32x128_t_ops::broadcast(0);
      int32x128_t _1016 = int32x128_t_ops::max(_1014, _1015);
      int32_t _1017 = ::halide_cpp_max(_498, -3);
      int32_t _1018 = _1017 + 3;
      int32_t _1019 = _1018 * _22;
      int32x128_t _1020 = int32x128_t_ops::broadcast(_1019);
      int32x128_t _1021 = _1016 + _1020;
      uint8x128_t _1022 = uint8x128_t_ops::load_gather(_input, _1021);
      uint16x128_t _1023 = uint16x128_t_ops::convert_from<uint8x128_t>(_1022);
      uint8_t _1024 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1025 = uint8x128_t_ops::broadcast(_1024);
      uint16x128_t _1026 = uint16x128_t_ops::convert_from<uint8x128_t>(_1025);
      uint16x128_t _1027 = _1023 * _1026;
      uint16x128_t _1028 = _1027;
      int16x128_t _1029 = int16x128_t_ops::convert_from<uint16x128_t>(_1028);
      uint16x128_t _1030 = uint16x128_t_ops::convert_from<int16x128_t>(_1029);
      int32_t _1031 = ::halide_cpp_max(_498, -4);
      int32_t _1032 = _1031 + 4;
      int32_t _1033 = _1032 * _22;
      int32x128_t _1034 = int32x128_t_ops::broadcast(_1033);
      int32x128_t _1035 = _1016 + _1034;
      uint8x128_t _1036 = uint8x128_t_ops::load_gather(_input, _1035);
      uint16x128_t _1037 = uint16x128_t_ops::convert_from<uint8x128_t>(_1036);
      uint8_t _1038 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1039 = uint8x128_t_ops::broadcast(_1038);
      uint16x128_t _1040 = uint16x128_t_ops::convert_from<uint8x128_t>(_1039);
      uint16x128_t _1041 = _1037 * _1040;
      uint16x128_t _1042 = _1041;
      int16x128_t _1043 = int16x128_t_ops::convert_from<uint16x128_t>(_1042);
      uint16x128_t _1044 = uint16x128_t_ops::convert_from<int16x128_t>(_1043);
      uint16x128_t _1045 = _1030 + _1044;
      int32_t _1046 = ::halide_cpp_max(_498, -5);
      int32_t _1047 = _1046 + 5;
      int32_t _1048 = _1047 * _22;
      int32x128_t _1049 = int32x128_t_ops::broadcast(_1048);
      int32x128_t _1050 = _1016 + _1049;
      uint8x128_t _1051 = uint8x128_t_ops::load_gather(_input, _1050);
      uint16x128_t _1052 = uint16x128_t_ops::convert_from<uint8x128_t>(_1051);
      uint8_t _1053 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1054 = uint8x128_t_ops::broadcast(_1053);
      uint16x128_t _1055 = uint16x128_t_ops::convert_from<uint8x128_t>(_1054);
      uint16x128_t _1056 = _1052 * _1055;
      uint16x128_t _1057 = _1056;
      int16x128_t _1058 = int16x128_t_ops::convert_from<uint16x128_t>(_1057);
      uint16x128_t _1059 = uint16x128_t_ops::convert_from<int16x128_t>(_1058);
      uint16x128_t _1060 = _1045 + _1059;
      int32_t _1061 = _1012 + _1019;
      uint8x128_t _1062 = uint8x128_t_ops::load(_input, _1061);
      uint16x128_t _1063 = uint16x128_t_ops::convert_from<uint8x128_t>(_1062);
      uint8_t _1064 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1065 = uint8x128_t_ops::broadcast(_1064);
      uint16x128_t _1066 = uint16x128_t_ops::convert_from<uint8x128_t>(_1065);
      uint16x128_t _1067 = _1063 * _1066;
      uint16x128_t _1068 = _1067;
      int16x128_t _1069 = int16x128_t_ops::convert_from<uint16x128_t>(_1068);
      uint16x128_t _1070 = uint16x128_t_ops::convert_from<int16x128_t>(_1069);
      uint16x128_t _1071 = _1060 + _1070;
      int32_t _1072 = _1012 + _1033;
      uint8x128_t _1073 = uint8x128_t_ops::load(_input, _1072);
      uint16x128_t _1074 = uint16x128_t_ops::convert_from<uint8x128_t>(_1073);
      int32_t _1075 = _491 + 1;
      uint8_t _1076 = ((const uint8_t *)_mask)[_1075];
      uint8x128_t _1077 = uint8x128_t_ops::broadcast(_1076);
      uint16x128_t _1078 = uint16x128_t_ops::convert_from<uint8x128_t>(_1077);
      uint16x128_t _1079 = _1074 * _1078;
      uint16x128_t _1080 = _1079;
      int16x128_t _1081 = int16x128_t_ops::convert_from<uint16x128_t>(_1080);
      uint16x128_t _1082 = uint16x128_t_ops::convert_from<int16x128_t>(_1081);
      uint16x128_t _1083 = _1071 + _1082;
      int32_t _1084 = _1012 + _1048;
      uint8x128_t _1085 = uint8x128_t_ops::load(_input, _1084);
      uint16x128_t _1086 = uint16x128_t_ops::convert_from<uint8x128_t>(_1085);
      int32_t _1087 = _490 + 1;
      uint8_t _1088 = ((const uint8_t *)_mask)[_1087];
      uint8x128_t _1089 = uint8x128_t_ops::broadcast(_1088);
      uint16x128_t _1090 = uint16x128_t_ops::convert_from<uint8x128_t>(_1089);
      uint16x128_t _1091 = _1086 * _1090;
      uint16x128_t _1092 = _1091;
      int16x128_t _1093 = int16x128_t_ops::convert_from<uint16x128_t>(_1092);
      uint16x128_t _1094 = uint16x128_t_ops::convert_from<int16x128_t>(_1093);
      uint16x128_t _1095 = _1083 + _1094;
      int32_t _1096 = _1019 + _1012;
      int32_t _1097 = _1096 + 1;
      uint8x128_t _1098 = uint8x128_t_ops::load(_input, _1097);
      uint16x128_t _1099 = uint16x128_t_ops::convert_from<uint8x128_t>(_1098);
      uint8_t _1100 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _1101 = uint8x128_t_ops::broadcast(_1100);
      uint16x128_t _1102 = uint16x128_t_ops::convert_from<uint8x128_t>(_1101);
      uint16x128_t _1103 = _1099 * _1102;
      uint16x128_t _1104 = _1103;
      int16x128_t _1105 = int16x128_t_ops::convert_from<uint16x128_t>(_1104);
      uint16x128_t _1106 = uint16x128_t_ops::convert_from<int16x128_t>(_1105);
      uint16x128_t _1107 = _1095 + _1106;
      int32_t _1108 = _1033 + _1012;
      int32_t _1109 = _1108 + 1;
      uint8x128_t _1110 = uint8x128_t_ops::load(_input, _1109);
      uint16x128_t _1111 = uint16x128_t_ops::convert_from<uint8x128_t>(_1110);
      int32_t _1112 = _491 + 2;
      uint8_t _1113 = ((const uint8_t *)_mask)[_1112];
      uint8x128_t _1114 = uint8x128_t_ops::broadcast(_1113);
      uint16x128_t _1115 = uint16x128_t_ops::convert_from<uint8x128_t>(_1114);
      uint16x128_t _1116 = _1111 * _1115;
      uint16x128_t _1117 = _1116;
      int16x128_t _1118 = int16x128_t_ops::convert_from<uint16x128_t>(_1117);
      uint16x128_t _1119 = uint16x128_t_ops::convert_from<int16x128_t>(_1118);
      uint16x128_t _1120 = _1107 + _1119;
      int32_t _1121 = _1048 + _1012;
      int32_t _1122 = _1121 + 1;
      uint8x128_t _1123 = uint8x128_t_ops::load(_input, _1122);
      uint16x128_t _1124 = uint16x128_t_ops::convert_from<uint8x128_t>(_1123);
      int32_t _1125 = _490 + 2;
      uint8_t _1126 = ((const uint8_t *)_mask)[_1125];
      uint8x128_t _1127 = uint8x128_t_ops::broadcast(_1126);
      uint16x128_t _1128 = uint16x128_t_ops::convert_from<uint8x128_t>(_1127);
      uint16x128_t _1129 = _1124 * _1128;
      uint16x128_t _1130 = _1129;
      int16x128_t _1131 = int16x128_t_ops::convert_from<uint16x128_t>(_1130);
      uint16x128_t _1132 = uint16x128_t_ops::convert_from<int16x128_t>(_1131);
      uint16x128_t _1133 = _1120 + _1132;
      uint16_t _1134 = (uint16_t)(255ull);
      uint16x128_t _1135 = uint16x128_t_ops::broadcast(_1134);
      uint16x128_t _1136 = uint16x128_t_ops::min(_1133, _1135);
      uint8x128_t _1137 = uint8x128_t_ops::convert_from<uint16x128_t>(_1136);
      int32_t _1138 = _498 + 4;
      int32_t _1139 = _1138 * _42;
      int32_t _1140 = _1012 + _1139;
      uint8x128_t_ops::store(_1137, _output, _1140);
      int32_t _1141 = _output_s0_x_x * 128;
      int32_t _1142 = _1141 + -1;
      int32x128_t _1143 = int32x128_t_ops::ramp(_1142, 1);
      int32x128_t _1144 = int32x128_t_ops::broadcast(0);
      int32x128_t _1145 = int32x128_t_ops::max(_1143, _1144);
      int32_t _1146 = ::halide_cpp_max(_498, -4);
      int32_t _1147 = _1146 + 4;
      int32_t _1148 = _1147 * _22;
      int32x128_t _1149 = int32x128_t_ops::broadcast(_1148);
      int32x128_t _1150 = _1145 + _1149;
      uint8x128_t _1151 = uint8x128_t_ops::load_gather(_input, _1150);
      uint16x128_t _1152 = uint16x128_t_ops::convert_from<uint8x128_t>(_1151);
      uint8_t _1153 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1154 = uint8x128_t_ops::broadcast(_1153);
      uint16x128_t _1155 = uint16x128_t_ops::convert_from<uint8x128_t>(_1154);
      uint16x128_t _1156 = _1152 * _1155;
      uint16x128_t _1157 = _1156;
      int16x128_t _1158 = int16x128_t_ops::convert_from<uint16x128_t>(_1157);
      uint16x128_t _1159 = uint16x128_t_ops::convert_from<int16x128_t>(_1158);
      int32_t _1160 = ::halide_cpp_max(_498, -5);
      int32_t _1161 = _1160 + 5;
      int32_t _1162 = _1161 * _22;
      int32x128_t _1163 = int32x128_t_ops::broadcast(_1162);
      int32x128_t _1164 = _1145 + _1163;
      uint8x128_t _1165 = uint8x128_t_ops::load_gather(_input, _1164);
      uint16x128_t _1166 = uint16x128_t_ops::convert_from<uint8x128_t>(_1165);
      uint8_t _1167 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1168 = uint8x128_t_ops::broadcast(_1167);
      uint16x128_t _1169 = uint16x128_t_ops::convert_from<uint8x128_t>(_1168);
      uint16x128_t _1170 = _1166 * _1169;
      uint16x128_t _1171 = _1170;
      int16x128_t _1172 = int16x128_t_ops::convert_from<uint16x128_t>(_1171);
      uint16x128_t _1173 = uint16x128_t_ops::convert_from<int16x128_t>(_1172);
      uint16x128_t _1174 = _1159 + _1173;
      int32_t _1175 = ::halide_cpp_max(_498, -6);
      int32_t _1176 = _1175 + 6;
      int32_t _1177 = _1176 * _22;
      int32x128_t _1178 = int32x128_t_ops::broadcast(_1177);
      int32x128_t _1179 = _1145 + _1178;
      uint8x128_t _1180 = uint8x128_t_ops::load_gather(_input, _1179);
      uint16x128_t _1181 = uint16x128_t_ops::convert_from<uint8x128_t>(_1180);
      uint8_t _1182 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1183 = uint8x128_t_ops::broadcast(_1182);
      uint16x128_t _1184 = uint16x128_t_ops::convert_from<uint8x128_t>(_1183);
      uint16x128_t _1185 = _1181 * _1184;
      uint16x128_t _1186 = _1185;
      int16x128_t _1187 = int16x128_t_ops::convert_from<uint16x128_t>(_1186);
      uint16x128_t _1188 = uint16x128_t_ops::convert_from<int16x128_t>(_1187);
      uint16x128_t _1189 = _1174 + _1188;
      int32_t _1190 = _1141 + _1148;
      uint8x128_t _1191 = uint8x128_t_ops::load(_input, _1190);
      uint16x128_t _1192 = uint16x128_t_ops::convert_from<uint8x128_t>(_1191);
      uint8_t _1193 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1194 = uint8x128_t_ops::broadcast(_1193);
      uint16x128_t _1195 = uint16x128_t_ops::convert_from<uint8x128_t>(_1194);
      uint16x128_t _1196 = _1192 * _1195;
      uint16x128_t _1197 = _1196;
      int16x128_t _1198 = int16x128_t_ops::convert_from<uint16x128_t>(_1197);
      uint16x128_t _1199 = uint16x128_t_ops::convert_from<int16x128_t>(_1198);
      uint16x128_t _1200 = _1189 + _1199;
      int32_t _1201 = _1141 + _1162;
      uint8x128_t _1202 = uint8x128_t_ops::load(_input, _1201);
      uint16x128_t _1203 = uint16x128_t_ops::convert_from<uint8x128_t>(_1202);
      int32_t _1204 = _491 + 1;
      uint8_t _1205 = ((const uint8_t *)_mask)[_1204];
      uint8x128_t _1206 = uint8x128_t_ops::broadcast(_1205);
      uint16x128_t _1207 = uint16x128_t_ops::convert_from<uint8x128_t>(_1206);
      uint16x128_t _1208 = _1203 * _1207;
      uint16x128_t _1209 = _1208;
      int16x128_t _1210 = int16x128_t_ops::convert_from<uint16x128_t>(_1209);
      uint16x128_t _1211 = uint16x128_t_ops::convert_from<int16x128_t>(_1210);
      uint16x128_t _1212 = _1200 + _1211;
      int32_t _1213 = _1141 + _1177;
      uint8x128_t _1214 = uint8x128_t_ops::load(_input, _1213);
      uint16x128_t _1215 = uint16x128_t_ops::convert_from<uint8x128_t>(_1214);
      int32_t _1216 = _490 + 1;
      uint8_t _1217 = ((const uint8_t *)_mask)[_1216];
      uint8x128_t _1218 = uint8x128_t_ops::broadcast(_1217);
      uint16x128_t _1219 = uint16x128_t_ops::convert_from<uint8x128_t>(_1218);
      uint16x128_t _1220 = _1215 * _1219;
      uint16x128_t _1221 = _1220;
      int16x128_t _1222 = int16x128_t_ops::convert_from<uint16x128_t>(_1221);
      uint16x128_t _1223 = uint16x128_t_ops::convert_from<int16x128_t>(_1222);
      uint16x128_t _1224 = _1212 + _1223;
      int32_t _1225 = _1148 + _1141;
      int32_t _1226 = _1225 + 1;
      uint8x128_t _1227 = uint8x128_t_ops::load(_input, _1226);
      uint16x128_t _1228 = uint16x128_t_ops::convert_from<uint8x128_t>(_1227);
      uint8_t _1229 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _1230 = uint8x128_t_ops::broadcast(_1229);
      uint16x128_t _1231 = uint16x128_t_ops::convert_from<uint8x128_t>(_1230);
      uint16x128_t _1232 = _1228 * _1231;
      uint16x128_t _1233 = _1232;
      int16x128_t _1234 = int16x128_t_ops::convert_from<uint16x128_t>(_1233);
      uint16x128_t _1235 = uint16x128_t_ops::convert_from<int16x128_t>(_1234);
      uint16x128_t _1236 = _1224 + _1235;
      int32_t _1237 = _1162 + _1141;
      int32_t _1238 = _1237 + 1;
      uint8x128_t _1239 = uint8x128_t_ops::load(_input, _1238);
      uint16x128_t _1240 = uint16x128_t_ops::convert_from<uint8x128_t>(_1239);
      int32_t _1241 = _491 + 2;
      uint8_t _1242 = ((const uint8_t *)_mask)[_1241];
      uint8x128_t _1243 = uint8x128_t_ops::broadcast(_1242);
      uint16x128_t _1244 = uint16x128_t_ops::convert_from<uint8x128_t>(_1243);
      uint16x128_t _1245 = _1240 * _1244;
      uint16x128_t _1246 = _1245;
      int16x128_t _1247 = int16x128_t_ops::convert_from<uint16x128_t>(_1246);
      uint16x128_t _1248 = uint16x128_t_ops::convert_from<int16x128_t>(_1247);
      uint16x128_t _1249 = _1236 + _1248;
      int32_t _1250 = _1177 + _1141;
      int32_t _1251 = _1250 + 1;
      uint8x128_t _1252 = uint8x128_t_ops::load(_input, _1251);
      uint16x128_t _1253 = uint16x128_t_ops::convert_from<uint8x128_t>(_1252);
      int32_t _1254 = _490 + 2;
      uint8_t _1255 = ((const uint8_t *)_mask)[_1254];
      uint8x128_t _1256 = uint8x128_t_ops::broadcast(_1255);
      uint16x128_t _1257 = uint16x128_t_ops::convert_from<uint8x128_t>(_1256);
      uint16x128_t _1258 = _1253 * _1257;
      uint16x128_t _1259 = _1258;
      int16x128_t _1260 = int16x128_t_ops::convert_from<uint16x128_t>(_1259);
      uint16x128_t _1261 = uint16x128_t_ops::convert_from<int16x128_t>(_1260);
      uint16x128_t _1262 = _1249 + _1261;
      uint16_t _1263 = (uint16_t)(255ull);
      uint16x128_t _1264 = uint16x128_t_ops::broadcast(_1263);
      uint16x128_t _1265 = uint16x128_t_ops::min(_1262, _1264);
      uint8x128_t _1266 = uint8x128_t_ops::convert_from<uint16x128_t>(_1265);
      int32_t _1267 = _498 + 5;
      int32_t _1268 = _1267 * _42;
      int32_t _1269 = _1141 + _1268;
      uint8x128_t_ops::store(_1266, _output, _1269);
      int32_t _1270 = _output_s0_x_x * 128;
      int32_t _1271 = _1270 + -1;
      int32x128_t _1272 = int32x128_t_ops::ramp(_1271, 1);
      int32x128_t _1273 = int32x128_t_ops::broadcast(0);
      int32x128_t _1274 = int32x128_t_ops::max(_1272, _1273);
      int32_t _1275 = ::halide_cpp_max(_498, -5);
      int32_t _1276 = _1275 + 5;
      int32_t _1277 = _1276 * _22;
      int32x128_t _1278 = int32x128_t_ops::broadcast(_1277);
      int32x128_t _1279 = _1274 + _1278;
      uint8x128_t _1280 = uint8x128_t_ops::load_gather(_input, _1279);
      uint16x128_t _1281 = uint16x128_t_ops::convert_from<uint8x128_t>(_1280);
      uint8_t _1282 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1283 = uint8x128_t_ops::broadcast(_1282);
      uint16x128_t _1284 = uint16x128_t_ops::convert_from<uint8x128_t>(_1283);
      uint16x128_t _1285 = _1281 * _1284;
      uint16x128_t _1286 = _1285;
      int16x128_t _1287 = int16x128_t_ops::convert_from<uint16x128_t>(_1286);
      uint16x128_t _1288 = uint16x128_t_ops::convert_from<int16x128_t>(_1287);
      int32_t _1289 = ::halide_cpp_max(_498, -6);
      int32_t _1290 = _1289 + 6;
      int32_t _1291 = _1290 * _22;
      int32x128_t _1292 = int32x128_t_ops::broadcast(_1291);
      int32x128_t _1293 = _1274 + _1292;
      uint8x128_t _1294 = uint8x128_t_ops::load_gather(_input, _1293);
      uint16x128_t _1295 = uint16x128_t_ops::convert_from<uint8x128_t>(_1294);
      uint8_t _1296 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1297 = uint8x128_t_ops::broadcast(_1296);
      uint16x128_t _1298 = uint16x128_t_ops::convert_from<uint8x128_t>(_1297);
      uint16x128_t _1299 = _1295 * _1298;
      uint16x128_t _1300 = _1299;
      int16x128_t _1301 = int16x128_t_ops::convert_from<uint16x128_t>(_1300);
      uint16x128_t _1302 = uint16x128_t_ops::convert_from<int16x128_t>(_1301);
      uint16x128_t _1303 = _1288 + _1302;
      int32_t _1304 = ::halide_cpp_max(_498, -7);
      int32_t _1305 = _1304 + 7;
      int32_t _1306 = _1305 * _22;
      int32x128_t _1307 = int32x128_t_ops::broadcast(_1306);
      int32x128_t _1308 = _1274 + _1307;
      uint8x128_t _1309 = uint8x128_t_ops::load_gather(_input, _1308);
      uint16x128_t _1310 = uint16x128_t_ops::convert_from<uint8x128_t>(_1309);
      uint8_t _1311 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1312 = uint8x128_t_ops::broadcast(_1311);
      uint16x128_t _1313 = uint16x128_t_ops::convert_from<uint8x128_t>(_1312);
      uint16x128_t _1314 = _1310 * _1313;
      uint16x128_t _1315 = _1314;
      int16x128_t _1316 = int16x128_t_ops::convert_from<uint16x128_t>(_1315);
      uint16x128_t _1317 = uint16x128_t_ops::convert_from<int16x128_t>(_1316);
      uint16x128_t _1318 = _1303 + _1317;
      int32_t _1319 = _1270 + _1277;
      uint8x128_t _1320 = uint8x128_t_ops::load(_input, _1319);
      uint16x128_t _1321 = uint16x128_t_ops::convert_from<uint8x128_t>(_1320);
      uint8_t _1322 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1323 = uint8x128_t_ops::broadcast(_1322);
      uint16x128_t _1324 = uint16x128_t_ops::convert_from<uint8x128_t>(_1323);
      uint16x128_t _1325 = _1321 * _1324;
      uint16x128_t _1326 = _1325;
      int16x128_t _1327 = int16x128_t_ops::convert_from<uint16x128_t>(_1326);
      uint16x128_t _1328 = uint16x128_t_ops::convert_from<int16x128_t>(_1327);
      uint16x128_t _1329 = _1318 + _1328;
      int32_t _1330 = _1270 + _1291;
      uint8x128_t _1331 = uint8x128_t_ops::load(_input, _1330);
      uint16x128_t _1332 = uint16x128_t_ops::convert_from<uint8x128_t>(_1331);
      int32_t _1333 = _491 + 1;
      uint8_t _1334 = ((const uint8_t *)_mask)[_1333];
      uint8x128_t _1335 = uint8x128_t_ops::broadcast(_1334);
      uint16x128_t _1336 = uint16x128_t_ops::convert_from<uint8x128_t>(_1335);
      uint16x128_t _1337 = _1332 * _1336;
      uint16x128_t _1338 = _1337;
      int16x128_t _1339 = int16x128_t_ops::convert_from<uint16x128_t>(_1338);
      uint16x128_t _1340 = uint16x128_t_ops::convert_from<int16x128_t>(_1339);
      uint16x128_t _1341 = _1329 + _1340;
      int32_t _1342 = _1270 + _1306;
      uint8x128_t _1343 = uint8x128_t_ops::load(_input, _1342);
      uint16x128_t _1344 = uint16x128_t_ops::convert_from<uint8x128_t>(_1343);
      int32_t _1345 = _490 + 1;
      uint8_t _1346 = ((const uint8_t *)_mask)[_1345];
      uint8x128_t _1347 = uint8x128_t_ops::broadcast(_1346);
      uint16x128_t _1348 = uint16x128_t_ops::convert_from<uint8x128_t>(_1347);
      uint16x128_t _1349 = _1344 * _1348;
      uint16x128_t _1350 = _1349;
      int16x128_t _1351 = int16x128_t_ops::convert_from<uint16x128_t>(_1350);
      uint16x128_t _1352 = uint16x128_t_ops::convert_from<int16x128_t>(_1351);
      uint16x128_t _1353 = _1341 + _1352;
      int32_t _1354 = _1277 + _1270;
      int32_t _1355 = _1354 + 1;
      uint8x128_t _1356 = uint8x128_t_ops::load(_input, _1355);
      uint16x128_t _1357 = uint16x128_t_ops::convert_from<uint8x128_t>(_1356);
      uint8_t _1358 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _1359 = uint8x128_t_ops::broadcast(_1358);
      uint16x128_t _1360 = uint16x128_t_ops::convert_from<uint8x128_t>(_1359);
      uint16x128_t _1361 = _1357 * _1360;
      uint16x128_t _1362 = _1361;
      int16x128_t _1363 = int16x128_t_ops::convert_from<uint16x128_t>(_1362);
      uint16x128_t _1364 = uint16x128_t_ops::convert_from<int16x128_t>(_1363);
      uint16x128_t _1365 = _1353 + _1364;
      int32_t _1366 = _1291 + _1270;
      int32_t _1367 = _1366 + 1;
      uint8x128_t _1368 = uint8x128_t_ops::load(_input, _1367);
      uint16x128_t _1369 = uint16x128_t_ops::convert_from<uint8x128_t>(_1368);
      int32_t _1370 = _491 + 2;
      uint8_t _1371 = ((const uint8_t *)_mask)[_1370];
      uint8x128_t _1372 = uint8x128_t_ops::broadcast(_1371);
      uint16x128_t _1373 = uint16x128_t_ops::convert_from<uint8x128_t>(_1372);
      uint16x128_t _1374 = _1369 * _1373;
      uint16x128_t _1375 = _1374;
      int16x128_t _1376 = int16x128_t_ops::convert_from<uint16x128_t>(_1375);
      uint16x128_t _1377 = uint16x128_t_ops::convert_from<int16x128_t>(_1376);
      uint16x128_t _1378 = _1365 + _1377;
      int32_t _1379 = _1306 + _1270;
      int32_t _1380 = _1379 + 1;
      uint8x128_t _1381 = uint8x128_t_ops::load(_input, _1380);
      uint16x128_t _1382 = uint16x128_t_ops::convert_from<uint8x128_t>(_1381);
      int32_t _1383 = _490 + 2;
      uint8_t _1384 = ((const uint8_t *)_mask)[_1383];
      uint8x128_t _1385 = uint8x128_t_ops::broadcast(_1384);
      uint16x128_t _1386 = uint16x128_t_ops::convert_from<uint8x128_t>(_1385);
      uint16x128_t _1387 = _1382 * _1386;
      uint16x128_t _1388 = _1387;
      int16x128_t _1389 = int16x128_t_ops::convert_from<uint16x128_t>(_1388);
      uint16x128_t _1390 = uint16x128_t_ops::convert_from<int16x128_t>(_1389);
      uint16x128_t _1391 = _1378 + _1390;
      uint16_t _1392 = (uint16_t)(255ull);
      uint16x128_t _1393 = uint16x128_t_ops::broadcast(_1392);
      uint16x128_t _1394 = uint16x128_t_ops::min(_1391, _1393);
      uint8x128_t _1395 = uint8x128_t_ops::convert_from<uint16x128_t>(_1394);
      int32_t _1396 = _498 + 6;
      int32_t _1397 = _1396 * _42;
      int32_t _1398 = _1270 + _1397;
      uint8x128_t_ops::store(_1395, _output, _1398);
      int32_t _1399 = _output_s0_x_x * 128;
      int32_t _1400 = _1399 + -1;
      int32x128_t _1401 = int32x128_t_ops::ramp(_1400, 1);
      int32x128_t _1402 = int32x128_t_ops::broadcast(0);
      int32x128_t _1403 = int32x128_t_ops::max(_1401, _1402);
      int32_t _1404 = ::halide_cpp_max(_498, -6);
      int32_t _1405 = _1404 + 6;
      int32_t _1406 = _1405 * _22;
      int32x128_t _1407 = int32x128_t_ops::broadcast(_1406);
      int32x128_t _1408 = _1403 + _1407;
      uint8x128_t _1409 = uint8x128_t_ops::load_gather(_input, _1408);
      uint16x128_t _1410 = uint16x128_t_ops::convert_from<uint8x128_t>(_1409);
      uint8_t _1411 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1412 = uint8x128_t_ops::broadcast(_1411);
      uint16x128_t _1413 = uint16x128_t_ops::convert_from<uint8x128_t>(_1412);
      uint16x128_t _1414 = _1410 * _1413;
      uint16x128_t _1415 = _1414;
      int16x128_t _1416 = int16x128_t_ops::convert_from<uint16x128_t>(_1415);
      uint16x128_t _1417 = uint16x128_t_ops::convert_from<int16x128_t>(_1416);
      int32_t _1418 = ::halide_cpp_max(_498, -7);
      int32_t _1419 = _1418 + 7;
      int32_t _1420 = _1419 * _22;
      int32x128_t _1421 = int32x128_t_ops::broadcast(_1420);
      int32x128_t _1422 = _1403 + _1421;
      uint8x128_t _1423 = uint8x128_t_ops::load_gather(_input, _1422);
      uint16x128_t _1424 = uint16x128_t_ops::convert_from<uint8x128_t>(_1423);
      uint8_t _1425 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1426 = uint8x128_t_ops::broadcast(_1425);
      uint16x128_t _1427 = uint16x128_t_ops::convert_from<uint8x128_t>(_1426);
      uint16x128_t _1428 = _1424 * _1427;
      uint16x128_t _1429 = _1428;
      int16x128_t _1430 = int16x128_t_ops::convert_from<uint16x128_t>(_1429);
      uint16x128_t _1431 = uint16x128_t_ops::convert_from<int16x128_t>(_1430);
      uint16x128_t _1432 = _1417 + _1431;
      int32_t _1433 = ::halide_cpp_max(_498, -8);
      int32_t _1434 = _1433 + 8;
      int32_t _1435 = _1434 * _22;
      int32x128_t _1436 = int32x128_t_ops::broadcast(_1435);
      int32x128_t _1437 = _1403 + _1436;
      uint8x128_t _1438 = uint8x128_t_ops::load_gather(_input, _1437);
      uint16x128_t _1439 = uint16x128_t_ops::convert_from<uint8x128_t>(_1438);
      uint8_t _1440 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1441 = uint8x128_t_ops::broadcast(_1440);
      uint16x128_t _1442 = uint16x128_t_ops::convert_from<uint8x128_t>(_1441);
      uint16x128_t _1443 = _1439 * _1442;
      uint16x128_t _1444 = _1443;
      int16x128_t _1445 = int16x128_t_ops::convert_from<uint16x128_t>(_1444);
      uint16x128_t _1446 = uint16x128_t_ops::convert_from<int16x128_t>(_1445);
      uint16x128_t _1447 = _1432 + _1446;
      int32_t _1448 = _1399 + _1406;
      uint8x128_t _1449 = uint8x128_t_ops::load(_input, _1448);
      uint16x128_t _1450 = uint16x128_t_ops::convert_from<uint8x128_t>(_1449);
      uint8_t _1451 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1452 = uint8x128_t_ops::broadcast(_1451);
      uint16x128_t _1453 = uint16x128_t_ops::convert_from<uint8x128_t>(_1452);
      uint16x128_t _1454 = _1450 * _1453;
      uint16x128_t _1455 = _1454;
      int16x128_t _1456 = int16x128_t_ops::convert_from<uint16x128_t>(_1455);
      uint16x128_t _1457 = uint16x128_t_ops::convert_from<int16x128_t>(_1456);
      uint16x128_t _1458 = _1447 + _1457;
      int32_t _1459 = _1399 + _1420;
      uint8x128_t _1460 = uint8x128_t_ops::load(_input, _1459);
      uint16x128_t _1461 = uint16x128_t_ops::convert_from<uint8x128_t>(_1460);
      int32_t _1462 = _491 + 1;
      uint8_t _1463 = ((const uint8_t *)_mask)[_1462];
      uint8x128_t _1464 = uint8x128_t_ops::broadcast(_1463);
      uint16x128_t _1465 = uint16x128_t_ops::convert_from<uint8x128_t>(_1464);
      uint16x128_t _1466 = _1461 * _1465;
      uint16x128_t _1467 = _1466;
      int16x128_t _1468 = int16x128_t_ops::convert_from<uint16x128_t>(_1467);
      uint16x128_t _1469 = uint16x128_t_ops::convert_from<int16x128_t>(_1468);
      uint16x128_t _1470 = _1458 + _1469;
      int32_t _1471 = _1399 + _1435;
      uint8x128_t _1472 = uint8x128_t_ops::load(_input, _1471);
      uint16x128_t _1473 = uint16x128_t_ops::convert_from<uint8x128_t>(_1472);
      int32_t _1474 = _490 + 1;
      uint8_t _1475 = ((const uint8_t *)_mask)[_1474];
      uint8x128_t _1476 = uint8x128_t_ops::broadcast(_1475);
      uint16x128_t _1477 = uint16x128_t_ops::convert_from<uint8x128_t>(_1476);
      uint16x128_t _1478 = _1473 * _1477;
      uint16x128_t _1479 = _1478;
      int16x128_t _1480 = int16x128_t_ops::convert_from<uint16x128_t>(_1479);
      uint16x128_t _1481 = uint16x128_t_ops::convert_from<int16x128_t>(_1480);
      uint16x128_t _1482 = _1470 + _1481;
      int32_t _1483 = _1406 + _1399;
      int32_t _1484 = _1483 + 1;
      uint8x128_t _1485 = uint8x128_t_ops::load(_input, _1484);
      uint16x128_t _1486 = uint16x128_t_ops::convert_from<uint8x128_t>(_1485);
      uint8_t _1487 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _1488 = uint8x128_t_ops::broadcast(_1487);
      uint16x128_t _1489 = uint16x128_t_ops::convert_from<uint8x128_t>(_1488);
      uint16x128_t _1490 = _1486 * _1489;
      uint16x128_t _1491 = _1490;
      int16x128_t _1492 = int16x128_t_ops::convert_from<uint16x128_t>(_1491);
      uint16x128_t _1493 = uint16x128_t_ops::convert_from<int16x128_t>(_1492);
      uint16x128_t _1494 = _1482 + _1493;
      int32_t _1495 = _1420 + _1399;
      int32_t _1496 = _1495 + 1;
      uint8x128_t _1497 = uint8x128_t_ops::load(_input, _1496);
      uint16x128_t _1498 = uint16x128_t_ops::convert_from<uint8x128_t>(_1497);
      int32_t _1499 = _491 + 2;
      uint8_t _1500 = ((const uint8_t *)_mask)[_1499];
      uint8x128_t _1501 = uint8x128_t_ops::broadcast(_1500);
      uint16x128_t _1502 = uint16x128_t_ops::convert_from<uint8x128_t>(_1501);
      uint16x128_t _1503 = _1498 * _1502;
      uint16x128_t _1504 = _1503;
      int16x128_t _1505 = int16x128_t_ops::convert_from<uint16x128_t>(_1504);
      uint16x128_t _1506 = uint16x128_t_ops::convert_from<int16x128_t>(_1505);
      uint16x128_t _1507 = _1494 + _1506;
      int32_t _1508 = _1435 + _1399;
      int32_t _1509 = _1508 + 1;
      uint8x128_t _1510 = uint8x128_t_ops::load(_input, _1509);
      uint16x128_t _1511 = uint16x128_t_ops::convert_from<uint8x128_t>(_1510);
      int32_t _1512 = _490 + 2;
      uint8_t _1513 = ((const uint8_t *)_mask)[_1512];
      uint8x128_t _1514 = uint8x128_t_ops::broadcast(_1513);
      uint16x128_t _1515 = uint16x128_t_ops::convert_from<uint8x128_t>(_1514);
      uint16x128_t _1516 = _1511 * _1515;
      uint16x128_t _1517 = _1516;
      int16x128_t _1518 = int16x128_t_ops::convert_from<uint16x128_t>(_1517);
      uint16x128_t _1519 = uint16x128_t_ops::convert_from<int16x128_t>(_1518);
      uint16x128_t _1520 = _1507 + _1519;
      uint16_t _1521 = (uint16_t)(255ull);
      uint16x128_t _1522 = uint16x128_t_ops::broadcast(_1521);
      uint16x128_t _1523 = uint16x128_t_ops::min(_1520, _1522);
      uint8x128_t _1524 = uint8x128_t_ops::convert_from<uint16x128_t>(_1523);
      int32_t _1525 = _498 + 7;
      int32_t _1526 = _1525 * _42;
      int32_t _1527 = _1399 + _1526;
      uint8x128_t_ops::store(_1524, _output, _1527);
     } // for _output_s0_x_x
     int32_t _1528 = _475 - _487;
     int32_t _1529 = _output_s0_y_y_y * 8;
     int32_t _1530 = _1529 + _480;
     for (int _output_s0_x_x = _487; _output_s0_x_x < _487 + _1528; _output_s0_x_x++)
     {
      int32_t _1531 = _output_s0_x_x * 128;
      int32_t _1532 = _1531 + -1;
      int32x128_t _1533 = int32x128_t_ops::ramp(_1532, 1);
      int32_t _1534 = _18 + -1;
      int32x128_t _1535 = int32x128_t_ops::broadcast(_1534);
      int32x128_t _1536 = int32x128_t_ops::min(_1533, _1535);
      int32x128_t _1537 = int32x128_t_ops::ramp(_1531, 1);
      int32x128_t _1538 = int32x128_t_ops::min(_1537, _1535);
      int32_t _1539 = _1531 + 1;
      int32x128_t _1540 = int32x128_t_ops::ramp(_1539, 1);
      int32x128_t _1541 = int32x128_t_ops::min(_1540, _1535);
      int32x128_t _1542 = int32x128_t_ops::broadcast(0);
      int32x128_t _1543 = int32x128_t_ops::max(_1536, _1542);
      int32_t _1544 = ::halide_cpp_max(_1530, 1);
      int32_t _1545 = _1544 + -1;
      int32_t _1546 = _1545 * _22;
      int32x128_t _1547 = int32x128_t_ops::broadcast(_1546);
      int32x128_t _1548 = _1543 + _1547;
      uint8x128_t _1549 = uint8x128_t_ops::load_gather(_input, _1548);
      uint16x128_t _1550 = uint16x128_t_ops::convert_from<uint8x128_t>(_1549);
      uint8_t _1551 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1552 = uint8x128_t_ops::broadcast(_1551);
      uint16x128_t _1553 = uint16x128_t_ops::convert_from<uint8x128_t>(_1552);
      uint16x128_t _1554 = _1550 * _1553;
      uint16x128_t _1555 = _1554;
      int16x128_t _1556 = int16x128_t_ops::convert_from<uint16x128_t>(_1555);
      uint16x128_t _1557 = uint16x128_t_ops::convert_from<int16x128_t>(_1556);
      int32_t _1558 = ::halide_cpp_max(_1530, 0);
      int32_t _1559 = _1558 * _22;
      int32x128_t _1560 = int32x128_t_ops::broadcast(_1559);
      int32x128_t _1561 = _1543 + _1560;
      uint8x128_t _1562 = uint8x128_t_ops::load_gather(_input, _1561);
      uint16x128_t _1563 = uint16x128_t_ops::convert_from<uint8x128_t>(_1562);
      uint8_t _1564 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1565 = uint8x128_t_ops::broadcast(_1564);
      uint16x128_t _1566 = uint16x128_t_ops::convert_from<uint8x128_t>(_1565);
      uint16x128_t _1567 = _1563 * _1566;
      uint16x128_t _1568 = _1567;
      int16x128_t _1569 = int16x128_t_ops::convert_from<uint16x128_t>(_1568);
      uint16x128_t _1570 = uint16x128_t_ops::convert_from<int16x128_t>(_1569);
      uint16x128_t _1571 = _1557 + _1570;
      int32_t _1572 = ::halide_cpp_max(_1530, -1);
      int32_t _1573 = _1572 + 1;
      int32_t _1574 = _1573 * _22;
      int32x128_t _1575 = int32x128_t_ops::broadcast(_1574);
      int32x128_t _1576 = _1543 + _1575;
      uint8x128_t _1577 = uint8x128_t_ops::load_gather(_input, _1576);
      uint16x128_t _1578 = uint16x128_t_ops::convert_from<uint8x128_t>(_1577);
      uint8_t _1579 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1580 = uint8x128_t_ops::broadcast(_1579);
      uint16x128_t _1581 = uint16x128_t_ops::convert_from<uint8x128_t>(_1580);
      uint16x128_t _1582 = _1578 * _1581;
      uint16x128_t _1583 = _1582;
      int16x128_t _1584 = int16x128_t_ops::convert_from<uint16x128_t>(_1583);
      uint16x128_t _1585 = uint16x128_t_ops::convert_from<int16x128_t>(_1584);
      uint16x128_t _1586 = _1571 + _1585;
      int32x128_t _1587 = int32x128_t_ops::max(_1538, _1542);
      int32x128_t _1588 = _1587 + _1547;
      uint8x128_t _1589 = uint8x128_t_ops::load_gather(_input, _1588);
      uint16x128_t _1590 = uint16x128_t_ops::convert_from<uint8x128_t>(_1589);
      uint8_t _1591 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1592 = uint8x128_t_ops::broadcast(_1591);
      uint16x128_t _1593 = uint16x128_t_ops::convert_from<uint8x128_t>(_1592);
      uint16x128_t _1594 = _1590 * _1593;
      uint16x128_t _1595 = _1594;
      int16x128_t _1596 = int16x128_t_ops::convert_from<uint16x128_t>(_1595);
      uint16x128_t _1597 = uint16x128_t_ops::convert_from<int16x128_t>(_1596);
      uint16x128_t _1598 = _1586 + _1597;
      int32x128_t _1599 = _1587 + _1560;
      uint8x128_t _1600 = uint8x128_t_ops::load_gather(_input, _1599);
      uint16x128_t _1601 = uint16x128_t_ops::convert_from<uint8x128_t>(_1600);
      int32_t _1602 = _491 + 1;
      uint8_t _1603 = ((const uint8_t *)_mask)[_1602];
      uint8x128_t _1604 = uint8x128_t_ops::broadcast(_1603);
      uint16x128_t _1605 = uint16x128_t_ops::convert_from<uint8x128_t>(_1604);
      uint16x128_t _1606 = _1601 * _1605;
      uint16x128_t _1607 = _1606;
      int16x128_t _1608 = int16x128_t_ops::convert_from<uint16x128_t>(_1607);
      uint16x128_t _1609 = uint16x128_t_ops::convert_from<int16x128_t>(_1608);
      uint16x128_t _1610 = _1598 + _1609;
      int32x128_t _1611 = _1587 + _1575;
      uint8x128_t _1612 = uint8x128_t_ops::load_gather(_input, _1611);
      uint16x128_t _1613 = uint16x128_t_ops::convert_from<uint8x128_t>(_1612);
      int32_t _1614 = _490 + 1;
      uint8_t _1615 = ((const uint8_t *)_mask)[_1614];
      uint8x128_t _1616 = uint8x128_t_ops::broadcast(_1615);
      uint16x128_t _1617 = uint16x128_t_ops::convert_from<uint8x128_t>(_1616);
      uint16x128_t _1618 = _1613 * _1617;
      uint16x128_t _1619 = _1618;
      int16x128_t _1620 = int16x128_t_ops::convert_from<uint16x128_t>(_1619);
      uint16x128_t _1621 = uint16x128_t_ops::convert_from<int16x128_t>(_1620);
      uint16x128_t _1622 = _1610 + _1621;
      int32x128_t _1623 = int32x128_t_ops::max(_1541, _1542);
      int32x128_t _1624 = _1623 + _1547;
      uint8x128_t _1625 = uint8x128_t_ops::load_gather(_input, _1624);
      uint16x128_t _1626 = uint16x128_t_ops::convert_from<uint8x128_t>(_1625);
      uint8_t _1627 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _1628 = uint8x128_t_ops::broadcast(_1627);
      uint16x128_t _1629 = uint16x128_t_ops::convert_from<uint8x128_t>(_1628);
      uint16x128_t _1630 = _1626 * _1629;
      uint16x128_t _1631 = _1630;
      int16x128_t _1632 = int16x128_t_ops::convert_from<uint16x128_t>(_1631);
      uint16x128_t _1633 = uint16x128_t_ops::convert_from<int16x128_t>(_1632);
      uint16x128_t _1634 = _1622 + _1633;
      int32x128_t _1635 = _1623 + _1560;
      uint8x128_t _1636 = uint8x128_t_ops::load_gather(_input, _1635);
      uint16x128_t _1637 = uint16x128_t_ops::convert_from<uint8x128_t>(_1636);
      int32_t _1638 = _491 + 2;
      uint8_t _1639 = ((const uint8_t *)_mask)[_1638];
      uint8x128_t _1640 = uint8x128_t_ops::broadcast(_1639);
      uint16x128_t _1641 = uint16x128_t_ops::convert_from<uint8x128_t>(_1640);
      uint16x128_t _1642 = _1637 * _1641;
      uint16x128_t _1643 = _1642;
      int16x128_t _1644 = int16x128_t_ops::convert_from<uint16x128_t>(_1643);
      uint16x128_t _1645 = uint16x128_t_ops::convert_from<int16x128_t>(_1644);
      uint16x128_t _1646 = _1634 + _1645;
      int32x128_t _1647 = _1623 + _1575;
      uint8x128_t _1648 = uint8x128_t_ops::load_gather(_input, _1647);
      uint16x128_t _1649 = uint16x128_t_ops::convert_from<uint8x128_t>(_1648);
      int32_t _1650 = _490 + 2;
      uint8_t _1651 = ((const uint8_t *)_mask)[_1650];
      uint8x128_t _1652 = uint8x128_t_ops::broadcast(_1651);
      uint16x128_t _1653 = uint16x128_t_ops::convert_from<uint8x128_t>(_1652);
      uint16x128_t _1654 = _1649 * _1653;
      uint16x128_t _1655 = _1654;
      int16x128_t _1656 = int16x128_t_ops::convert_from<uint16x128_t>(_1655);
      uint16x128_t _1657 = uint16x128_t_ops::convert_from<int16x128_t>(_1656);
      uint16x128_t _1658 = _1646 + _1657;
      uint16_t _1659 = (uint16_t)(255ull);
      uint16x128_t _1660 = uint16x128_t_ops::broadcast(_1659);
      uint16x128_t _1661 = uint16x128_t_ops::min(_1658, _1660);
      uint8x128_t _1662 = uint8x128_t_ops::convert_from<uint16x128_t>(_1661);
      int32_t _1663 = _42 * _1530;
      int32_t _1664 = _1531 + _1663;
      uint8x128_t_ops::store(_1662, _output, _1664);
      int32_t _1665 = _output_s0_x_x * 128;
      int32_t _1666 = _1665 + -1;
      int32x128_t _1667 = int32x128_t_ops::ramp(_1666, 1);
      int32_t _1668 = _18 + -1;
      int32x128_t _1669 = int32x128_t_ops::broadcast(_1668);
      int32x128_t _1670 = int32x128_t_ops::min(_1667, _1669);
      int32x128_t _1671 = int32x128_t_ops::ramp(_1665, 1);
      int32x128_t _1672 = int32x128_t_ops::min(_1671, _1669);
      int32_t _1673 = _1665 + 1;
      int32x128_t _1674 = int32x128_t_ops::ramp(_1673, 1);
      int32x128_t _1675 = int32x128_t_ops::min(_1674, _1669);
      int32x128_t _1676 = int32x128_t_ops::broadcast(0);
      int32x128_t _1677 = int32x128_t_ops::max(_1670, _1676);
      int32_t _1678 = ::halide_cpp_max(_1530, 0);
      int32_t _1679 = _1678 * _22;
      int32x128_t _1680 = int32x128_t_ops::broadcast(_1679);
      int32x128_t _1681 = _1677 + _1680;
      uint8x128_t _1682 = uint8x128_t_ops::load_gather(_input, _1681);
      uint16x128_t _1683 = uint16x128_t_ops::convert_from<uint8x128_t>(_1682);
      uint8_t _1684 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1685 = uint8x128_t_ops::broadcast(_1684);
      uint16x128_t _1686 = uint16x128_t_ops::convert_from<uint8x128_t>(_1685);
      uint16x128_t _1687 = _1683 * _1686;
      uint16x128_t _1688 = _1687;
      int16x128_t _1689 = int16x128_t_ops::convert_from<uint16x128_t>(_1688);
      uint16x128_t _1690 = uint16x128_t_ops::convert_from<int16x128_t>(_1689);
      int32_t _1691 = ::halide_cpp_max(_1530, -1);
      int32_t _1692 = _1691 + 1;
      int32_t _1693 = _1692 * _22;
      int32x128_t _1694 = int32x128_t_ops::broadcast(_1693);
      int32x128_t _1695 = _1677 + _1694;
      uint8x128_t _1696 = uint8x128_t_ops::load_gather(_input, _1695);
      uint16x128_t _1697 = uint16x128_t_ops::convert_from<uint8x128_t>(_1696);
      uint8_t _1698 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1699 = uint8x128_t_ops::broadcast(_1698);
      uint16x128_t _1700 = uint16x128_t_ops::convert_from<uint8x128_t>(_1699);
      uint16x128_t _1701 = _1697 * _1700;
      uint16x128_t _1702 = _1701;
      int16x128_t _1703 = int16x128_t_ops::convert_from<uint16x128_t>(_1702);
      uint16x128_t _1704 = uint16x128_t_ops::convert_from<int16x128_t>(_1703);
      uint16x128_t _1705 = _1690 + _1704;
      int32_t _1706 = ::halide_cpp_max(_1530, -2);
      int32_t _1707 = _1706 + 2;
      int32_t _1708 = _1707 * _22;
      int32x128_t _1709 = int32x128_t_ops::broadcast(_1708);
      int32x128_t _1710 = _1677 + _1709;
      uint8x128_t _1711 = uint8x128_t_ops::load_gather(_input, _1710);
      uint16x128_t _1712 = uint16x128_t_ops::convert_from<uint8x128_t>(_1711);
      uint8_t _1713 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1714 = uint8x128_t_ops::broadcast(_1713);
      uint16x128_t _1715 = uint16x128_t_ops::convert_from<uint8x128_t>(_1714);
      uint16x128_t _1716 = _1712 * _1715;
      uint16x128_t _1717 = _1716;
      int16x128_t _1718 = int16x128_t_ops::convert_from<uint16x128_t>(_1717);
      uint16x128_t _1719 = uint16x128_t_ops::convert_from<int16x128_t>(_1718);
      uint16x128_t _1720 = _1705 + _1719;
      int32x128_t _1721 = int32x128_t_ops::max(_1672, _1676);
      int32x128_t _1722 = _1721 + _1680;
      uint8x128_t _1723 = uint8x128_t_ops::load_gather(_input, _1722);
      uint16x128_t _1724 = uint16x128_t_ops::convert_from<uint8x128_t>(_1723);
      uint8_t _1725 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1726 = uint8x128_t_ops::broadcast(_1725);
      uint16x128_t _1727 = uint16x128_t_ops::convert_from<uint8x128_t>(_1726);
      uint16x128_t _1728 = _1724 * _1727;
      uint16x128_t _1729 = _1728;
      int16x128_t _1730 = int16x128_t_ops::convert_from<uint16x128_t>(_1729);
      uint16x128_t _1731 = uint16x128_t_ops::convert_from<int16x128_t>(_1730);
      uint16x128_t _1732 = _1720 + _1731;
      int32x128_t _1733 = _1721 + _1694;
      uint8x128_t _1734 = uint8x128_t_ops::load_gather(_input, _1733);
      uint16x128_t _1735 = uint16x128_t_ops::convert_from<uint8x128_t>(_1734);
      int32_t _1736 = _491 + 1;
      uint8_t _1737 = ((const uint8_t *)_mask)[_1736];
      uint8x128_t _1738 = uint8x128_t_ops::broadcast(_1737);
      uint16x128_t _1739 = uint16x128_t_ops::convert_from<uint8x128_t>(_1738);
      uint16x128_t _1740 = _1735 * _1739;
      uint16x128_t _1741 = _1740;
      int16x128_t _1742 = int16x128_t_ops::convert_from<uint16x128_t>(_1741);
      uint16x128_t _1743 = uint16x128_t_ops::convert_from<int16x128_t>(_1742);
      uint16x128_t _1744 = _1732 + _1743;
      int32x128_t _1745 = _1721 + _1709;
      uint8x128_t _1746 = uint8x128_t_ops::load_gather(_input, _1745);
      uint16x128_t _1747 = uint16x128_t_ops::convert_from<uint8x128_t>(_1746);
      int32_t _1748 = _490 + 1;
      uint8_t _1749 = ((const uint8_t *)_mask)[_1748];
      uint8x128_t _1750 = uint8x128_t_ops::broadcast(_1749);
      uint16x128_t _1751 = uint16x128_t_ops::convert_from<uint8x128_t>(_1750);
      uint16x128_t _1752 = _1747 * _1751;
      uint16x128_t _1753 = _1752;
      int16x128_t _1754 = int16x128_t_ops::convert_from<uint16x128_t>(_1753);
      uint16x128_t _1755 = uint16x128_t_ops::convert_from<int16x128_t>(_1754);
      uint16x128_t _1756 = _1744 + _1755;
      int32x128_t _1757 = int32x128_t_ops::max(_1675, _1676);
      int32x128_t _1758 = _1757 + _1680;
      uint8x128_t _1759 = uint8x128_t_ops::load_gather(_input, _1758);
      uint16x128_t _1760 = uint16x128_t_ops::convert_from<uint8x128_t>(_1759);
      uint8_t _1761 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _1762 = uint8x128_t_ops::broadcast(_1761);
      uint16x128_t _1763 = uint16x128_t_ops::convert_from<uint8x128_t>(_1762);
      uint16x128_t _1764 = _1760 * _1763;
      uint16x128_t _1765 = _1764;
      int16x128_t _1766 = int16x128_t_ops::convert_from<uint16x128_t>(_1765);
      uint16x128_t _1767 = uint16x128_t_ops::convert_from<int16x128_t>(_1766);
      uint16x128_t _1768 = _1756 + _1767;
      int32x128_t _1769 = _1757 + _1694;
      uint8x128_t _1770 = uint8x128_t_ops::load_gather(_input, _1769);
      uint16x128_t _1771 = uint16x128_t_ops::convert_from<uint8x128_t>(_1770);
      int32_t _1772 = _491 + 2;
      uint8_t _1773 = ((const uint8_t *)_mask)[_1772];
      uint8x128_t _1774 = uint8x128_t_ops::broadcast(_1773);
      uint16x128_t _1775 = uint16x128_t_ops::convert_from<uint8x128_t>(_1774);
      uint16x128_t _1776 = _1771 * _1775;
      uint16x128_t _1777 = _1776;
      int16x128_t _1778 = int16x128_t_ops::convert_from<uint16x128_t>(_1777);
      uint16x128_t _1779 = uint16x128_t_ops::convert_from<int16x128_t>(_1778);
      uint16x128_t _1780 = _1768 + _1779;
      int32x128_t _1781 = _1757 + _1709;
      uint8x128_t _1782 = uint8x128_t_ops::load_gather(_input, _1781);
      uint16x128_t _1783 = uint16x128_t_ops::convert_from<uint8x128_t>(_1782);
      int32_t _1784 = _490 + 2;
      uint8_t _1785 = ((const uint8_t *)_mask)[_1784];
      uint8x128_t _1786 = uint8x128_t_ops::broadcast(_1785);
      uint16x128_t _1787 = uint16x128_t_ops::convert_from<uint8x128_t>(_1786);
      uint16x128_t _1788 = _1783 * _1787;
      uint16x128_t _1789 = _1788;
      int16x128_t _1790 = int16x128_t_ops::convert_from<uint16x128_t>(_1789);
      uint16x128_t _1791 = uint16x128_t_ops::convert_from<int16x128_t>(_1790);
      uint16x128_t _1792 = _1780 + _1791;
      uint16_t _1793 = (uint16_t)(255ull);
      uint16x128_t _1794 = uint16x128_t_ops::broadcast(_1793);
      uint16x128_t _1795 = uint16x128_t_ops::min(_1792, _1794);
      uint8x128_t _1796 = uint8x128_t_ops::convert_from<uint16x128_t>(_1795);
      int32_t _1797 = _1530 + 1;
      int32_t _1798 = _1797 * _42;
      int32_t _1799 = _1665 + _1798;
      uint8x128_t_ops::store(_1796, _output, _1799);
      int32_t _1800 = _output_s0_x_x * 128;
      int32_t _1801 = _1800 + -1;
      int32x128_t _1802 = int32x128_t_ops::ramp(_1801, 1);
      int32_t _1803 = _18 + -1;
      int32x128_t _1804 = int32x128_t_ops::broadcast(_1803);
      int32x128_t _1805 = int32x128_t_ops::min(_1802, _1804);
      int32x128_t _1806 = int32x128_t_ops::ramp(_1800, 1);
      int32x128_t _1807 = int32x128_t_ops::min(_1806, _1804);
      int32_t _1808 = _1800 + 1;
      int32x128_t _1809 = int32x128_t_ops::ramp(_1808, 1);
      int32x128_t _1810 = int32x128_t_ops::min(_1809, _1804);
      int32x128_t _1811 = int32x128_t_ops::broadcast(0);
      int32x128_t _1812 = int32x128_t_ops::max(_1805, _1811);
      int32_t _1813 = ::halide_cpp_max(_1530, -1);
      int32_t _1814 = _1813 + 1;
      int32_t _1815 = _1814 * _22;
      int32x128_t _1816 = int32x128_t_ops::broadcast(_1815);
      int32x128_t _1817 = _1812 + _1816;
      uint8x128_t _1818 = uint8x128_t_ops::load_gather(_input, _1817);
      uint16x128_t _1819 = uint16x128_t_ops::convert_from<uint8x128_t>(_1818);
      uint8_t _1820 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1821 = uint8x128_t_ops::broadcast(_1820);
      uint16x128_t _1822 = uint16x128_t_ops::convert_from<uint8x128_t>(_1821);
      uint16x128_t _1823 = _1819 * _1822;
      uint16x128_t _1824 = _1823;
      int16x128_t _1825 = int16x128_t_ops::convert_from<uint16x128_t>(_1824);
      uint16x128_t _1826 = uint16x128_t_ops::convert_from<int16x128_t>(_1825);
      int32_t _1827 = ::halide_cpp_max(_1530, -2);
      int32_t _1828 = _1827 + 2;
      int32_t _1829 = _1828 * _22;
      int32x128_t _1830 = int32x128_t_ops::broadcast(_1829);
      int32x128_t _1831 = _1812 + _1830;
      uint8x128_t _1832 = uint8x128_t_ops::load_gather(_input, _1831);
      uint16x128_t _1833 = uint16x128_t_ops::convert_from<uint8x128_t>(_1832);
      uint8_t _1834 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1835 = uint8x128_t_ops::broadcast(_1834);
      uint16x128_t _1836 = uint16x128_t_ops::convert_from<uint8x128_t>(_1835);
      uint16x128_t _1837 = _1833 * _1836;
      uint16x128_t _1838 = _1837;
      int16x128_t _1839 = int16x128_t_ops::convert_from<uint16x128_t>(_1838);
      uint16x128_t _1840 = uint16x128_t_ops::convert_from<int16x128_t>(_1839);
      uint16x128_t _1841 = _1826 + _1840;
      int32_t _1842 = ::halide_cpp_max(_1530, -3);
      int32_t _1843 = _1842 + 3;
      int32_t _1844 = _1843 * _22;
      int32x128_t _1845 = int32x128_t_ops::broadcast(_1844);
      int32x128_t _1846 = _1812 + _1845;
      uint8x128_t _1847 = uint8x128_t_ops::load_gather(_input, _1846);
      uint16x128_t _1848 = uint16x128_t_ops::convert_from<uint8x128_t>(_1847);
      uint8_t _1849 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1850 = uint8x128_t_ops::broadcast(_1849);
      uint16x128_t _1851 = uint16x128_t_ops::convert_from<uint8x128_t>(_1850);
      uint16x128_t _1852 = _1848 * _1851;
      uint16x128_t _1853 = _1852;
      int16x128_t _1854 = int16x128_t_ops::convert_from<uint16x128_t>(_1853);
      uint16x128_t _1855 = uint16x128_t_ops::convert_from<int16x128_t>(_1854);
      uint16x128_t _1856 = _1841 + _1855;
      int32x128_t _1857 = int32x128_t_ops::max(_1807, _1811);
      int32x128_t _1858 = _1857 + _1816;
      uint8x128_t _1859 = uint8x128_t_ops::load_gather(_input, _1858);
      uint16x128_t _1860 = uint16x128_t_ops::convert_from<uint8x128_t>(_1859);
      uint8_t _1861 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1862 = uint8x128_t_ops::broadcast(_1861);
      uint16x128_t _1863 = uint16x128_t_ops::convert_from<uint8x128_t>(_1862);
      uint16x128_t _1864 = _1860 * _1863;
      uint16x128_t _1865 = _1864;
      int16x128_t _1866 = int16x128_t_ops::convert_from<uint16x128_t>(_1865);
      uint16x128_t _1867 = uint16x128_t_ops::convert_from<int16x128_t>(_1866);
      uint16x128_t _1868 = _1856 + _1867;
      int32x128_t _1869 = _1857 + _1830;
      uint8x128_t _1870 = uint8x128_t_ops::load_gather(_input, _1869);
      uint16x128_t _1871 = uint16x128_t_ops::convert_from<uint8x128_t>(_1870);
      int32_t _1872 = _491 + 1;
      uint8_t _1873 = ((const uint8_t *)_mask)[_1872];
      uint8x128_t _1874 = uint8x128_t_ops::broadcast(_1873);
      uint16x128_t _1875 = uint16x128_t_ops::convert_from<uint8x128_t>(_1874);
      uint16x128_t _1876 = _1871 * _1875;
      uint16x128_t _1877 = _1876;
      int16x128_t _1878 = int16x128_t_ops::convert_from<uint16x128_t>(_1877);
      uint16x128_t _1879 = uint16x128_t_ops::convert_from<int16x128_t>(_1878);
      uint16x128_t _1880 = _1868 + _1879;
      int32x128_t _1881 = _1857 + _1845;
      uint8x128_t _1882 = uint8x128_t_ops::load_gather(_input, _1881);
      uint16x128_t _1883 = uint16x128_t_ops::convert_from<uint8x128_t>(_1882);
      int32_t _1884 = _490 + 1;
      uint8_t _1885 = ((const uint8_t *)_mask)[_1884];
      uint8x128_t _1886 = uint8x128_t_ops::broadcast(_1885);
      uint16x128_t _1887 = uint16x128_t_ops::convert_from<uint8x128_t>(_1886);
      uint16x128_t _1888 = _1883 * _1887;
      uint16x128_t _1889 = _1888;
      int16x128_t _1890 = int16x128_t_ops::convert_from<uint16x128_t>(_1889);
      uint16x128_t _1891 = uint16x128_t_ops::convert_from<int16x128_t>(_1890);
      uint16x128_t _1892 = _1880 + _1891;
      int32x128_t _1893 = int32x128_t_ops::max(_1810, _1811);
      int32x128_t _1894 = _1893 + _1816;
      uint8x128_t _1895 = uint8x128_t_ops::load_gather(_input, _1894);
      uint16x128_t _1896 = uint16x128_t_ops::convert_from<uint8x128_t>(_1895);
      uint8_t _1897 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _1898 = uint8x128_t_ops::broadcast(_1897);
      uint16x128_t _1899 = uint16x128_t_ops::convert_from<uint8x128_t>(_1898);
      uint16x128_t _1900 = _1896 * _1899;
      uint16x128_t _1901 = _1900;
      int16x128_t _1902 = int16x128_t_ops::convert_from<uint16x128_t>(_1901);
      uint16x128_t _1903 = uint16x128_t_ops::convert_from<int16x128_t>(_1902);
      uint16x128_t _1904 = _1892 + _1903;
      int32x128_t _1905 = _1893 + _1830;
      uint8x128_t _1906 = uint8x128_t_ops::load_gather(_input, _1905);
      uint16x128_t _1907 = uint16x128_t_ops::convert_from<uint8x128_t>(_1906);
      int32_t _1908 = _491 + 2;
      uint8_t _1909 = ((const uint8_t *)_mask)[_1908];
      uint8x128_t _1910 = uint8x128_t_ops::broadcast(_1909);
      uint16x128_t _1911 = uint16x128_t_ops::convert_from<uint8x128_t>(_1910);
      uint16x128_t _1912 = _1907 * _1911;
      uint16x128_t _1913 = _1912;
      int16x128_t _1914 = int16x128_t_ops::convert_from<uint16x128_t>(_1913);
      uint16x128_t _1915 = uint16x128_t_ops::convert_from<int16x128_t>(_1914);
      uint16x128_t _1916 = _1904 + _1915;
      int32x128_t _1917 = _1893 + _1845;
      uint8x128_t _1918 = uint8x128_t_ops::load_gather(_input, _1917);
      uint16x128_t _1919 = uint16x128_t_ops::convert_from<uint8x128_t>(_1918);
      int32_t _1920 = _490 + 2;
      uint8_t _1921 = ((const uint8_t *)_mask)[_1920];
      uint8x128_t _1922 = uint8x128_t_ops::broadcast(_1921);
      uint16x128_t _1923 = uint16x128_t_ops::convert_from<uint8x128_t>(_1922);
      uint16x128_t _1924 = _1919 * _1923;
      uint16x128_t _1925 = _1924;
      int16x128_t _1926 = int16x128_t_ops::convert_from<uint16x128_t>(_1925);
      uint16x128_t _1927 = uint16x128_t_ops::convert_from<int16x128_t>(_1926);
      uint16x128_t _1928 = _1916 + _1927;
      uint16_t _1929 = (uint16_t)(255ull);
      uint16x128_t _1930 = uint16x128_t_ops::broadcast(_1929);
      uint16x128_t _1931 = uint16x128_t_ops::min(_1928, _1930);
      uint8x128_t _1932 = uint8x128_t_ops::convert_from<uint16x128_t>(_1931);
      int32_t _1933 = _1530 + 2;
      int32_t _1934 = _1933 * _42;
      int32_t _1935 = _1800 + _1934;
      uint8x128_t_ops::store(_1932, _output, _1935);
      int32_t _1936 = _output_s0_x_x * 128;
      int32_t _1937 = _1936 + -1;
      int32x128_t _1938 = int32x128_t_ops::ramp(_1937, 1);
      int32_t _1939 = _18 + -1;
      int32x128_t _1940 = int32x128_t_ops::broadcast(_1939);
      int32x128_t _1941 = int32x128_t_ops::min(_1938, _1940);
      int32x128_t _1942 = int32x128_t_ops::ramp(_1936, 1);
      int32x128_t _1943 = int32x128_t_ops::min(_1942, _1940);
      int32_t _1944 = _1936 + 1;
      int32x128_t _1945 = int32x128_t_ops::ramp(_1944, 1);
      int32x128_t _1946 = int32x128_t_ops::min(_1945, _1940);
      int32x128_t _1947 = int32x128_t_ops::broadcast(0);
      int32x128_t _1948 = int32x128_t_ops::max(_1941, _1947);
      int32_t _1949 = ::halide_cpp_max(_1530, -2);
      int32_t _1950 = _1949 + 2;
      int32_t _1951 = _1950 * _22;
      int32x128_t _1952 = int32x128_t_ops::broadcast(_1951);
      int32x128_t _1953 = _1948 + _1952;
      uint8x128_t _1954 = uint8x128_t_ops::load_gather(_input, _1953);
      uint16x128_t _1955 = uint16x128_t_ops::convert_from<uint8x128_t>(_1954);
      uint8_t _1956 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _1957 = uint8x128_t_ops::broadcast(_1956);
      uint16x128_t _1958 = uint16x128_t_ops::convert_from<uint8x128_t>(_1957);
      uint16x128_t _1959 = _1955 * _1958;
      uint16x128_t _1960 = _1959;
      int16x128_t _1961 = int16x128_t_ops::convert_from<uint16x128_t>(_1960);
      uint16x128_t _1962 = uint16x128_t_ops::convert_from<int16x128_t>(_1961);
      int32_t _1963 = ::halide_cpp_max(_1530, -3);
      int32_t _1964 = _1963 + 3;
      int32_t _1965 = _1964 * _22;
      int32x128_t _1966 = int32x128_t_ops::broadcast(_1965);
      int32x128_t _1967 = _1948 + _1966;
      uint8x128_t _1968 = uint8x128_t_ops::load_gather(_input, _1967);
      uint16x128_t _1969 = uint16x128_t_ops::convert_from<uint8x128_t>(_1968);
      uint8_t _1970 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _1971 = uint8x128_t_ops::broadcast(_1970);
      uint16x128_t _1972 = uint16x128_t_ops::convert_from<uint8x128_t>(_1971);
      uint16x128_t _1973 = _1969 * _1972;
      uint16x128_t _1974 = _1973;
      int16x128_t _1975 = int16x128_t_ops::convert_from<uint16x128_t>(_1974);
      uint16x128_t _1976 = uint16x128_t_ops::convert_from<int16x128_t>(_1975);
      uint16x128_t _1977 = _1962 + _1976;
      int32_t _1978 = ::halide_cpp_max(_1530, -4);
      int32_t _1979 = _1978 + 4;
      int32_t _1980 = _1979 * _22;
      int32x128_t _1981 = int32x128_t_ops::broadcast(_1980);
      int32x128_t _1982 = _1948 + _1981;
      uint8x128_t _1983 = uint8x128_t_ops::load_gather(_input, _1982);
      uint16x128_t _1984 = uint16x128_t_ops::convert_from<uint8x128_t>(_1983);
      uint8_t _1985 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _1986 = uint8x128_t_ops::broadcast(_1985);
      uint16x128_t _1987 = uint16x128_t_ops::convert_from<uint8x128_t>(_1986);
      uint16x128_t _1988 = _1984 * _1987;
      uint16x128_t _1989 = _1988;
      int16x128_t _1990 = int16x128_t_ops::convert_from<uint16x128_t>(_1989);
      uint16x128_t _1991 = uint16x128_t_ops::convert_from<int16x128_t>(_1990);
      uint16x128_t _1992 = _1977 + _1991;
      int32x128_t _1993 = int32x128_t_ops::max(_1943, _1947);
      int32x128_t _1994 = _1993 + _1952;
      uint8x128_t _1995 = uint8x128_t_ops::load_gather(_input, _1994);
      uint16x128_t _1996 = uint16x128_t_ops::convert_from<uint8x128_t>(_1995);
      uint8_t _1997 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _1998 = uint8x128_t_ops::broadcast(_1997);
      uint16x128_t _1999 = uint16x128_t_ops::convert_from<uint8x128_t>(_1998);
      uint16x128_t _2000 = _1996 * _1999;
      uint16x128_t _2001 = _2000;
      int16x128_t _2002 = int16x128_t_ops::convert_from<uint16x128_t>(_2001);
      uint16x128_t _2003 = uint16x128_t_ops::convert_from<int16x128_t>(_2002);
      uint16x128_t _2004 = _1992 + _2003;
      int32x128_t _2005 = _1993 + _1966;
      uint8x128_t _2006 = uint8x128_t_ops::load_gather(_input, _2005);
      uint16x128_t _2007 = uint16x128_t_ops::convert_from<uint8x128_t>(_2006);
      int32_t _2008 = _491 + 1;
      uint8_t _2009 = ((const uint8_t *)_mask)[_2008];
      uint8x128_t _2010 = uint8x128_t_ops::broadcast(_2009);
      uint16x128_t _2011 = uint16x128_t_ops::convert_from<uint8x128_t>(_2010);
      uint16x128_t _2012 = _2007 * _2011;
      uint16x128_t _2013 = _2012;
      int16x128_t _2014 = int16x128_t_ops::convert_from<uint16x128_t>(_2013);
      uint16x128_t _2015 = uint16x128_t_ops::convert_from<int16x128_t>(_2014);
      uint16x128_t _2016 = _2004 + _2015;
      int32x128_t _2017 = _1993 + _1981;
      uint8x128_t _2018 = uint8x128_t_ops::load_gather(_input, _2017);
      uint16x128_t _2019 = uint16x128_t_ops::convert_from<uint8x128_t>(_2018);
      int32_t _2020 = _490 + 1;
      uint8_t _2021 = ((const uint8_t *)_mask)[_2020];
      uint8x128_t _2022 = uint8x128_t_ops::broadcast(_2021);
      uint16x128_t _2023 = uint16x128_t_ops::convert_from<uint8x128_t>(_2022);
      uint16x128_t _2024 = _2019 * _2023;
      uint16x128_t _2025 = _2024;
      int16x128_t _2026 = int16x128_t_ops::convert_from<uint16x128_t>(_2025);
      uint16x128_t _2027 = uint16x128_t_ops::convert_from<int16x128_t>(_2026);
      uint16x128_t _2028 = _2016 + _2027;
      int32x128_t _2029 = int32x128_t_ops::max(_1946, _1947);
      int32x128_t _2030 = _2029 + _1952;
      uint8x128_t _2031 = uint8x128_t_ops::load_gather(_input, _2030);
      uint16x128_t _2032 = uint16x128_t_ops::convert_from<uint8x128_t>(_2031);
      uint8_t _2033 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _2034 = uint8x128_t_ops::broadcast(_2033);
      uint16x128_t _2035 = uint16x128_t_ops::convert_from<uint8x128_t>(_2034);
      uint16x128_t _2036 = _2032 * _2035;
      uint16x128_t _2037 = _2036;
      int16x128_t _2038 = int16x128_t_ops::convert_from<uint16x128_t>(_2037);
      uint16x128_t _2039 = uint16x128_t_ops::convert_from<int16x128_t>(_2038);
      uint16x128_t _2040 = _2028 + _2039;
      int32x128_t _2041 = _2029 + _1966;
      uint8x128_t _2042 = uint8x128_t_ops::load_gather(_input, _2041);
      uint16x128_t _2043 = uint16x128_t_ops::convert_from<uint8x128_t>(_2042);
      int32_t _2044 = _491 + 2;
      uint8_t _2045 = ((const uint8_t *)_mask)[_2044];
      uint8x128_t _2046 = uint8x128_t_ops::broadcast(_2045);
      uint16x128_t _2047 = uint16x128_t_ops::convert_from<uint8x128_t>(_2046);
      uint16x128_t _2048 = _2043 * _2047;
      uint16x128_t _2049 = _2048;
      int16x128_t _2050 = int16x128_t_ops::convert_from<uint16x128_t>(_2049);
      uint16x128_t _2051 = uint16x128_t_ops::convert_from<int16x128_t>(_2050);
      uint16x128_t _2052 = _2040 + _2051;
      int32x128_t _2053 = _2029 + _1981;
      uint8x128_t _2054 = uint8x128_t_ops::load_gather(_input, _2053);
      uint16x128_t _2055 = uint16x128_t_ops::convert_from<uint8x128_t>(_2054);
      int32_t _2056 = _490 + 2;
      uint8_t _2057 = ((const uint8_t *)_mask)[_2056];
      uint8x128_t _2058 = uint8x128_t_ops::broadcast(_2057);
      uint16x128_t _2059 = uint16x128_t_ops::convert_from<uint8x128_t>(_2058);
      uint16x128_t _2060 = _2055 * _2059;
      uint16x128_t _2061 = _2060;
      int16x128_t _2062 = int16x128_t_ops::convert_from<uint16x128_t>(_2061);
      uint16x128_t _2063 = uint16x128_t_ops::convert_from<int16x128_t>(_2062);
      uint16x128_t _2064 = _2052 + _2063;
      uint16_t _2065 = (uint16_t)(255ull);
      uint16x128_t _2066 = uint16x128_t_ops::broadcast(_2065);
      uint16x128_t _2067 = uint16x128_t_ops::min(_2064, _2066);
      uint8x128_t _2068 = uint8x128_t_ops::convert_from<uint16x128_t>(_2067);
      int32_t _2069 = _1530 + 3;
      int32_t _2070 = _2069 * _42;
      int32_t _2071 = _1936 + _2070;
      uint8x128_t_ops::store(_2068, _output, _2071);
      int32_t _2072 = _output_s0_x_x * 128;
      int32_t _2073 = _2072 + -1;
      int32x128_t _2074 = int32x128_t_ops::ramp(_2073, 1);
      int32_t _2075 = _18 + -1;
      int32x128_t _2076 = int32x128_t_ops::broadcast(_2075);
      int32x128_t _2077 = int32x128_t_ops::min(_2074, _2076);
      int32x128_t _2078 = int32x128_t_ops::ramp(_2072, 1);
      int32x128_t _2079 = int32x128_t_ops::min(_2078, _2076);
      int32_t _2080 = _2072 + 1;
      int32x128_t _2081 = int32x128_t_ops::ramp(_2080, 1);
      int32x128_t _2082 = int32x128_t_ops::min(_2081, _2076);
      int32x128_t _2083 = int32x128_t_ops::broadcast(0);
      int32x128_t _2084 = int32x128_t_ops::max(_2077, _2083);
      int32_t _2085 = ::halide_cpp_max(_1530, -3);
      int32_t _2086 = _2085 + 3;
      int32_t _2087 = _2086 * _22;
      int32x128_t _2088 = int32x128_t_ops::broadcast(_2087);
      int32x128_t _2089 = _2084 + _2088;
      uint8x128_t _2090 = uint8x128_t_ops::load_gather(_input, _2089);
      uint16x128_t _2091 = uint16x128_t_ops::convert_from<uint8x128_t>(_2090);
      uint8_t _2092 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _2093 = uint8x128_t_ops::broadcast(_2092);
      uint16x128_t _2094 = uint16x128_t_ops::convert_from<uint8x128_t>(_2093);
      uint16x128_t _2095 = _2091 * _2094;
      uint16x128_t _2096 = _2095;
      int16x128_t _2097 = int16x128_t_ops::convert_from<uint16x128_t>(_2096);
      uint16x128_t _2098 = uint16x128_t_ops::convert_from<int16x128_t>(_2097);
      int32_t _2099 = ::halide_cpp_max(_1530, -4);
      int32_t _2100 = _2099 + 4;
      int32_t _2101 = _2100 * _22;
      int32x128_t _2102 = int32x128_t_ops::broadcast(_2101);
      int32x128_t _2103 = _2084 + _2102;
      uint8x128_t _2104 = uint8x128_t_ops::load_gather(_input, _2103);
      uint16x128_t _2105 = uint16x128_t_ops::convert_from<uint8x128_t>(_2104);
      uint8_t _2106 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _2107 = uint8x128_t_ops::broadcast(_2106);
      uint16x128_t _2108 = uint16x128_t_ops::convert_from<uint8x128_t>(_2107);
      uint16x128_t _2109 = _2105 * _2108;
      uint16x128_t _2110 = _2109;
      int16x128_t _2111 = int16x128_t_ops::convert_from<uint16x128_t>(_2110);
      uint16x128_t _2112 = uint16x128_t_ops::convert_from<int16x128_t>(_2111);
      uint16x128_t _2113 = _2098 + _2112;
      int32_t _2114 = ::halide_cpp_max(_1530, -5);
      int32_t _2115 = _2114 + 5;
      int32_t _2116 = _2115 * _22;
      int32x128_t _2117 = int32x128_t_ops::broadcast(_2116);
      int32x128_t _2118 = _2084 + _2117;
      uint8x128_t _2119 = uint8x128_t_ops::load_gather(_input, _2118);
      uint16x128_t _2120 = uint16x128_t_ops::convert_from<uint8x128_t>(_2119);
      uint8_t _2121 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _2122 = uint8x128_t_ops::broadcast(_2121);
      uint16x128_t _2123 = uint16x128_t_ops::convert_from<uint8x128_t>(_2122);
      uint16x128_t _2124 = _2120 * _2123;
      uint16x128_t _2125 = _2124;
      int16x128_t _2126 = int16x128_t_ops::convert_from<uint16x128_t>(_2125);
      uint16x128_t _2127 = uint16x128_t_ops::convert_from<int16x128_t>(_2126);
      uint16x128_t _2128 = _2113 + _2127;
      int32x128_t _2129 = int32x128_t_ops::max(_2079, _2083);
      int32x128_t _2130 = _2129 + _2088;
      uint8x128_t _2131 = uint8x128_t_ops::load_gather(_input, _2130);
      uint16x128_t _2132 = uint16x128_t_ops::convert_from<uint8x128_t>(_2131);
      uint8_t _2133 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _2134 = uint8x128_t_ops::broadcast(_2133);
      uint16x128_t _2135 = uint16x128_t_ops::convert_from<uint8x128_t>(_2134);
      uint16x128_t _2136 = _2132 * _2135;
      uint16x128_t _2137 = _2136;
      int16x128_t _2138 = int16x128_t_ops::convert_from<uint16x128_t>(_2137);
      uint16x128_t _2139 = uint16x128_t_ops::convert_from<int16x128_t>(_2138);
      uint16x128_t _2140 = _2128 + _2139;
      int32x128_t _2141 = _2129 + _2102;
      uint8x128_t _2142 = uint8x128_t_ops::load_gather(_input, _2141);
      uint16x128_t _2143 = uint16x128_t_ops::convert_from<uint8x128_t>(_2142);
      int32_t _2144 = _491 + 1;
      uint8_t _2145 = ((const uint8_t *)_mask)[_2144];
      uint8x128_t _2146 = uint8x128_t_ops::broadcast(_2145);
      uint16x128_t _2147 = uint16x128_t_ops::convert_from<uint8x128_t>(_2146);
      uint16x128_t _2148 = _2143 * _2147;
      uint16x128_t _2149 = _2148;
      int16x128_t _2150 = int16x128_t_ops::convert_from<uint16x128_t>(_2149);
      uint16x128_t _2151 = uint16x128_t_ops::convert_from<int16x128_t>(_2150);
      uint16x128_t _2152 = _2140 + _2151;
      int32x128_t _2153 = _2129 + _2117;
      uint8x128_t _2154 = uint8x128_t_ops::load_gather(_input, _2153);
      uint16x128_t _2155 = uint16x128_t_ops::convert_from<uint8x128_t>(_2154);
      int32_t _2156 = _490 + 1;
      uint8_t _2157 = ((const uint8_t *)_mask)[_2156];
      uint8x128_t _2158 = uint8x128_t_ops::broadcast(_2157);
      uint16x128_t _2159 = uint16x128_t_ops::convert_from<uint8x128_t>(_2158);
      uint16x128_t _2160 = _2155 * _2159;
      uint16x128_t _2161 = _2160;
      int16x128_t _2162 = int16x128_t_ops::convert_from<uint16x128_t>(_2161);
      uint16x128_t _2163 = uint16x128_t_ops::convert_from<int16x128_t>(_2162);
      uint16x128_t _2164 = _2152 + _2163;
      int32x128_t _2165 = int32x128_t_ops::max(_2082, _2083);
      int32x128_t _2166 = _2165 + _2088;
      uint8x128_t _2167 = uint8x128_t_ops::load_gather(_input, _2166);
      uint16x128_t _2168 = uint16x128_t_ops::convert_from<uint8x128_t>(_2167);
      uint8_t _2169 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _2170 = uint8x128_t_ops::broadcast(_2169);
      uint16x128_t _2171 = uint16x128_t_ops::convert_from<uint8x128_t>(_2170);
      uint16x128_t _2172 = _2168 * _2171;
      uint16x128_t _2173 = _2172;
      int16x128_t _2174 = int16x128_t_ops::convert_from<uint16x128_t>(_2173);
      uint16x128_t _2175 = uint16x128_t_ops::convert_from<int16x128_t>(_2174);
      uint16x128_t _2176 = _2164 + _2175;
      int32x128_t _2177 = _2165 + _2102;
      uint8x128_t _2178 = uint8x128_t_ops::load_gather(_input, _2177);
      uint16x128_t _2179 = uint16x128_t_ops::convert_from<uint8x128_t>(_2178);
      int32_t _2180 = _491 + 2;
      uint8_t _2181 = ((const uint8_t *)_mask)[_2180];
      uint8x128_t _2182 = uint8x128_t_ops::broadcast(_2181);
      uint16x128_t _2183 = uint16x128_t_ops::convert_from<uint8x128_t>(_2182);
      uint16x128_t _2184 = _2179 * _2183;
      uint16x128_t _2185 = _2184;
      int16x128_t _2186 = int16x128_t_ops::convert_from<uint16x128_t>(_2185);
      uint16x128_t _2187 = uint16x128_t_ops::convert_from<int16x128_t>(_2186);
      uint16x128_t _2188 = _2176 + _2187;
      int32x128_t _2189 = _2165 + _2117;
      uint8x128_t _2190 = uint8x128_t_ops::load_gather(_input, _2189);
      uint16x128_t _2191 = uint16x128_t_ops::convert_from<uint8x128_t>(_2190);
      int32_t _2192 = _490 + 2;
      uint8_t _2193 = ((const uint8_t *)_mask)[_2192];
      uint8x128_t _2194 = uint8x128_t_ops::broadcast(_2193);
      uint16x128_t _2195 = uint16x128_t_ops::convert_from<uint8x128_t>(_2194);
      uint16x128_t _2196 = _2191 * _2195;
      uint16x128_t _2197 = _2196;
      int16x128_t _2198 = int16x128_t_ops::convert_from<uint16x128_t>(_2197);
      uint16x128_t _2199 = uint16x128_t_ops::convert_from<int16x128_t>(_2198);
      uint16x128_t _2200 = _2188 + _2199;
      uint16_t _2201 = (uint16_t)(255ull);
      uint16x128_t _2202 = uint16x128_t_ops::broadcast(_2201);
      uint16x128_t _2203 = uint16x128_t_ops::min(_2200, _2202);
      uint8x128_t _2204 = uint8x128_t_ops::convert_from<uint16x128_t>(_2203);
      int32_t _2205 = _1530 + 4;
      int32_t _2206 = _2205 * _42;
      int32_t _2207 = _2072 + _2206;
      uint8x128_t_ops::store(_2204, _output, _2207);
      int32_t _2208 = _output_s0_x_x * 128;
      int32_t _2209 = _2208 + -1;
      int32x128_t _2210 = int32x128_t_ops::ramp(_2209, 1);
      int32_t _2211 = _18 + -1;
      int32x128_t _2212 = int32x128_t_ops::broadcast(_2211);
      int32x128_t _2213 = int32x128_t_ops::min(_2210, _2212);
      int32x128_t _2214 = int32x128_t_ops::ramp(_2208, 1);
      int32x128_t _2215 = int32x128_t_ops::min(_2214, _2212);
      int32_t _2216 = _2208 + 1;
      int32x128_t _2217 = int32x128_t_ops::ramp(_2216, 1);
      int32x128_t _2218 = int32x128_t_ops::min(_2217, _2212);
      int32x128_t _2219 = int32x128_t_ops::broadcast(0);
      int32x128_t _2220 = int32x128_t_ops::max(_2213, _2219);
      int32_t _2221 = ::halide_cpp_max(_1530, -4);
      int32_t _2222 = _2221 + 4;
      int32_t _2223 = _2222 * _22;
      int32x128_t _2224 = int32x128_t_ops::broadcast(_2223);
      int32x128_t _2225 = _2220 + _2224;
      uint8x128_t _2226 = uint8x128_t_ops::load_gather(_input, _2225);
      uint16x128_t _2227 = uint16x128_t_ops::convert_from<uint8x128_t>(_2226);
      uint8_t _2228 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _2229 = uint8x128_t_ops::broadcast(_2228);
      uint16x128_t _2230 = uint16x128_t_ops::convert_from<uint8x128_t>(_2229);
      uint16x128_t _2231 = _2227 * _2230;
      uint16x128_t _2232 = _2231;
      int16x128_t _2233 = int16x128_t_ops::convert_from<uint16x128_t>(_2232);
      uint16x128_t _2234 = uint16x128_t_ops::convert_from<int16x128_t>(_2233);
      int32_t _2235 = ::halide_cpp_max(_1530, -5);
      int32_t _2236 = _2235 + 5;
      int32_t _2237 = _2236 * _22;
      int32x128_t _2238 = int32x128_t_ops::broadcast(_2237);
      int32x128_t _2239 = _2220 + _2238;
      uint8x128_t _2240 = uint8x128_t_ops::load_gather(_input, _2239);
      uint16x128_t _2241 = uint16x128_t_ops::convert_from<uint8x128_t>(_2240);
      uint8_t _2242 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _2243 = uint8x128_t_ops::broadcast(_2242);
      uint16x128_t _2244 = uint16x128_t_ops::convert_from<uint8x128_t>(_2243);
      uint16x128_t _2245 = _2241 * _2244;
      uint16x128_t _2246 = _2245;
      int16x128_t _2247 = int16x128_t_ops::convert_from<uint16x128_t>(_2246);
      uint16x128_t _2248 = uint16x128_t_ops::convert_from<int16x128_t>(_2247);
      uint16x128_t _2249 = _2234 + _2248;
      int32_t _2250 = ::halide_cpp_max(_1530, -6);
      int32_t _2251 = _2250 + 6;
      int32_t _2252 = _2251 * _22;
      int32x128_t _2253 = int32x128_t_ops::broadcast(_2252);
      int32x128_t _2254 = _2220 + _2253;
      uint8x128_t _2255 = uint8x128_t_ops::load_gather(_input, _2254);
      uint16x128_t _2256 = uint16x128_t_ops::convert_from<uint8x128_t>(_2255);
      uint8_t _2257 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _2258 = uint8x128_t_ops::broadcast(_2257);
      uint16x128_t _2259 = uint16x128_t_ops::convert_from<uint8x128_t>(_2258);
      uint16x128_t _2260 = _2256 * _2259;
      uint16x128_t _2261 = _2260;
      int16x128_t _2262 = int16x128_t_ops::convert_from<uint16x128_t>(_2261);
      uint16x128_t _2263 = uint16x128_t_ops::convert_from<int16x128_t>(_2262);
      uint16x128_t _2264 = _2249 + _2263;
      int32x128_t _2265 = int32x128_t_ops::max(_2215, _2219);
      int32x128_t _2266 = _2265 + _2224;
      uint8x128_t _2267 = uint8x128_t_ops::load_gather(_input, _2266);
      uint16x128_t _2268 = uint16x128_t_ops::convert_from<uint8x128_t>(_2267);
      uint8_t _2269 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _2270 = uint8x128_t_ops::broadcast(_2269);
      uint16x128_t _2271 = uint16x128_t_ops::convert_from<uint8x128_t>(_2270);
      uint16x128_t _2272 = _2268 * _2271;
      uint16x128_t _2273 = _2272;
      int16x128_t _2274 = int16x128_t_ops::convert_from<uint16x128_t>(_2273);
      uint16x128_t _2275 = uint16x128_t_ops::convert_from<int16x128_t>(_2274);
      uint16x128_t _2276 = _2264 + _2275;
      int32x128_t _2277 = _2265 + _2238;
      uint8x128_t _2278 = uint8x128_t_ops::load_gather(_input, _2277);
      uint16x128_t _2279 = uint16x128_t_ops::convert_from<uint8x128_t>(_2278);
      int32_t _2280 = _491 + 1;
      uint8_t _2281 = ((const uint8_t *)_mask)[_2280];
      uint8x128_t _2282 = uint8x128_t_ops::broadcast(_2281);
      uint16x128_t _2283 = uint16x128_t_ops::convert_from<uint8x128_t>(_2282);
      uint16x128_t _2284 = _2279 * _2283;
      uint16x128_t _2285 = _2284;
      int16x128_t _2286 = int16x128_t_ops::convert_from<uint16x128_t>(_2285);
      uint16x128_t _2287 = uint16x128_t_ops::convert_from<int16x128_t>(_2286);
      uint16x128_t _2288 = _2276 + _2287;
      int32x128_t _2289 = _2265 + _2253;
      uint8x128_t _2290 = uint8x128_t_ops::load_gather(_input, _2289);
      uint16x128_t _2291 = uint16x128_t_ops::convert_from<uint8x128_t>(_2290);
      int32_t _2292 = _490 + 1;
      uint8_t _2293 = ((const uint8_t *)_mask)[_2292];
      uint8x128_t _2294 = uint8x128_t_ops::broadcast(_2293);
      uint16x128_t _2295 = uint16x128_t_ops::convert_from<uint8x128_t>(_2294);
      uint16x128_t _2296 = _2291 * _2295;
      uint16x128_t _2297 = _2296;
      int16x128_t _2298 = int16x128_t_ops::convert_from<uint16x128_t>(_2297);
      uint16x128_t _2299 = uint16x128_t_ops::convert_from<int16x128_t>(_2298);
      uint16x128_t _2300 = _2288 + _2299;
      int32x128_t _2301 = int32x128_t_ops::max(_2218, _2219);
      int32x128_t _2302 = _2301 + _2224;
      uint8x128_t _2303 = uint8x128_t_ops::load_gather(_input, _2302);
      uint16x128_t _2304 = uint16x128_t_ops::convert_from<uint8x128_t>(_2303);
      uint8_t _2305 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _2306 = uint8x128_t_ops::broadcast(_2305);
      uint16x128_t _2307 = uint16x128_t_ops::convert_from<uint8x128_t>(_2306);
      uint16x128_t _2308 = _2304 * _2307;
      uint16x128_t _2309 = _2308;
      int16x128_t _2310 = int16x128_t_ops::convert_from<uint16x128_t>(_2309);
      uint16x128_t _2311 = uint16x128_t_ops::convert_from<int16x128_t>(_2310);
      uint16x128_t _2312 = _2300 + _2311;
      int32x128_t _2313 = _2301 + _2238;
      uint8x128_t _2314 = uint8x128_t_ops::load_gather(_input, _2313);
      uint16x128_t _2315 = uint16x128_t_ops::convert_from<uint8x128_t>(_2314);
      int32_t _2316 = _491 + 2;
      uint8_t _2317 = ((const uint8_t *)_mask)[_2316];
      uint8x128_t _2318 = uint8x128_t_ops::broadcast(_2317);
      uint16x128_t _2319 = uint16x128_t_ops::convert_from<uint8x128_t>(_2318);
      uint16x128_t _2320 = _2315 * _2319;
      uint16x128_t _2321 = _2320;
      int16x128_t _2322 = int16x128_t_ops::convert_from<uint16x128_t>(_2321);
      uint16x128_t _2323 = uint16x128_t_ops::convert_from<int16x128_t>(_2322);
      uint16x128_t _2324 = _2312 + _2323;
      int32x128_t _2325 = _2301 + _2253;
      uint8x128_t _2326 = uint8x128_t_ops::load_gather(_input, _2325);
      uint16x128_t _2327 = uint16x128_t_ops::convert_from<uint8x128_t>(_2326);
      int32_t _2328 = _490 + 2;
      uint8_t _2329 = ((const uint8_t *)_mask)[_2328];
      uint8x128_t _2330 = uint8x128_t_ops::broadcast(_2329);
      uint16x128_t _2331 = uint16x128_t_ops::convert_from<uint8x128_t>(_2330);
      uint16x128_t _2332 = _2327 * _2331;
      uint16x128_t _2333 = _2332;
      int16x128_t _2334 = int16x128_t_ops::convert_from<uint16x128_t>(_2333);
      uint16x128_t _2335 = uint16x128_t_ops::convert_from<int16x128_t>(_2334);
      uint16x128_t _2336 = _2324 + _2335;
      uint16_t _2337 = (uint16_t)(255ull);
      uint16x128_t _2338 = uint16x128_t_ops::broadcast(_2337);
      uint16x128_t _2339 = uint16x128_t_ops::min(_2336, _2338);
      uint8x128_t _2340 = uint8x128_t_ops::convert_from<uint16x128_t>(_2339);
      int32_t _2341 = _1530 + 5;
      int32_t _2342 = _2341 * _42;
      int32_t _2343 = _2208 + _2342;
      uint8x128_t_ops::store(_2340, _output, _2343);
      int32_t _2344 = _output_s0_x_x * 128;
      int32_t _2345 = _2344 + -1;
      int32x128_t _2346 = int32x128_t_ops::ramp(_2345, 1);
      int32_t _2347 = _18 + -1;
      int32x128_t _2348 = int32x128_t_ops::broadcast(_2347);
      int32x128_t _2349 = int32x128_t_ops::min(_2346, _2348);
      int32x128_t _2350 = int32x128_t_ops::ramp(_2344, 1);
      int32x128_t _2351 = int32x128_t_ops::min(_2350, _2348);
      int32_t _2352 = _2344 + 1;
      int32x128_t _2353 = int32x128_t_ops::ramp(_2352, 1);
      int32x128_t _2354 = int32x128_t_ops::min(_2353, _2348);
      int32x128_t _2355 = int32x128_t_ops::broadcast(0);
      int32x128_t _2356 = int32x128_t_ops::max(_2349, _2355);
      int32_t _2357 = ::halide_cpp_max(_1530, -5);
      int32_t _2358 = _2357 + 5;
      int32_t _2359 = _2358 * _22;
      int32x128_t _2360 = int32x128_t_ops::broadcast(_2359);
      int32x128_t _2361 = _2356 + _2360;
      uint8x128_t _2362 = uint8x128_t_ops::load_gather(_input, _2361);
      uint16x128_t _2363 = uint16x128_t_ops::convert_from<uint8x128_t>(_2362);
      uint8_t _2364 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _2365 = uint8x128_t_ops::broadcast(_2364);
      uint16x128_t _2366 = uint16x128_t_ops::convert_from<uint8x128_t>(_2365);
      uint16x128_t _2367 = _2363 * _2366;
      uint16x128_t _2368 = _2367;
      int16x128_t _2369 = int16x128_t_ops::convert_from<uint16x128_t>(_2368);
      uint16x128_t _2370 = uint16x128_t_ops::convert_from<int16x128_t>(_2369);
      int32_t _2371 = ::halide_cpp_max(_1530, -6);
      int32_t _2372 = _2371 + 6;
      int32_t _2373 = _2372 * _22;
      int32x128_t _2374 = int32x128_t_ops::broadcast(_2373);
      int32x128_t _2375 = _2356 + _2374;
      uint8x128_t _2376 = uint8x128_t_ops::load_gather(_input, _2375);
      uint16x128_t _2377 = uint16x128_t_ops::convert_from<uint8x128_t>(_2376);
      uint8_t _2378 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _2379 = uint8x128_t_ops::broadcast(_2378);
      uint16x128_t _2380 = uint16x128_t_ops::convert_from<uint8x128_t>(_2379);
      uint16x128_t _2381 = _2377 * _2380;
      uint16x128_t _2382 = _2381;
      int16x128_t _2383 = int16x128_t_ops::convert_from<uint16x128_t>(_2382);
      uint16x128_t _2384 = uint16x128_t_ops::convert_from<int16x128_t>(_2383);
      uint16x128_t _2385 = _2370 + _2384;
      int32_t _2386 = ::halide_cpp_max(_1530, -7);
      int32_t _2387 = _2386 + 7;
      int32_t _2388 = _2387 * _22;
      int32x128_t _2389 = int32x128_t_ops::broadcast(_2388);
      int32x128_t _2390 = _2356 + _2389;
      uint8x128_t _2391 = uint8x128_t_ops::load_gather(_input, _2390);
      uint16x128_t _2392 = uint16x128_t_ops::convert_from<uint8x128_t>(_2391);
      uint8_t _2393 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _2394 = uint8x128_t_ops::broadcast(_2393);
      uint16x128_t _2395 = uint16x128_t_ops::convert_from<uint8x128_t>(_2394);
      uint16x128_t _2396 = _2392 * _2395;
      uint16x128_t _2397 = _2396;
      int16x128_t _2398 = int16x128_t_ops::convert_from<uint16x128_t>(_2397);
      uint16x128_t _2399 = uint16x128_t_ops::convert_from<int16x128_t>(_2398);
      uint16x128_t _2400 = _2385 + _2399;
      int32x128_t _2401 = int32x128_t_ops::max(_2351, _2355);
      int32x128_t _2402 = _2401 + _2360;
      uint8x128_t _2403 = uint8x128_t_ops::load_gather(_input, _2402);
      uint16x128_t _2404 = uint16x128_t_ops::convert_from<uint8x128_t>(_2403);
      uint8_t _2405 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _2406 = uint8x128_t_ops::broadcast(_2405);
      uint16x128_t _2407 = uint16x128_t_ops::convert_from<uint8x128_t>(_2406);
      uint16x128_t _2408 = _2404 * _2407;
      uint16x128_t _2409 = _2408;
      int16x128_t _2410 = int16x128_t_ops::convert_from<uint16x128_t>(_2409);
      uint16x128_t _2411 = uint16x128_t_ops::convert_from<int16x128_t>(_2410);
      uint16x128_t _2412 = _2400 + _2411;
      int32x128_t _2413 = _2401 + _2374;
      uint8x128_t _2414 = uint8x128_t_ops::load_gather(_input, _2413);
      uint16x128_t _2415 = uint16x128_t_ops::convert_from<uint8x128_t>(_2414);
      int32_t _2416 = _491 + 1;
      uint8_t _2417 = ((const uint8_t *)_mask)[_2416];
      uint8x128_t _2418 = uint8x128_t_ops::broadcast(_2417);
      uint16x128_t _2419 = uint16x128_t_ops::convert_from<uint8x128_t>(_2418);
      uint16x128_t _2420 = _2415 * _2419;
      uint16x128_t _2421 = _2420;
      int16x128_t _2422 = int16x128_t_ops::convert_from<uint16x128_t>(_2421);
      uint16x128_t _2423 = uint16x128_t_ops::convert_from<int16x128_t>(_2422);
      uint16x128_t _2424 = _2412 + _2423;
      int32x128_t _2425 = _2401 + _2389;
      uint8x128_t _2426 = uint8x128_t_ops::load_gather(_input, _2425);
      uint16x128_t _2427 = uint16x128_t_ops::convert_from<uint8x128_t>(_2426);
      int32_t _2428 = _490 + 1;
      uint8_t _2429 = ((const uint8_t *)_mask)[_2428];
      uint8x128_t _2430 = uint8x128_t_ops::broadcast(_2429);
      uint16x128_t _2431 = uint16x128_t_ops::convert_from<uint8x128_t>(_2430);
      uint16x128_t _2432 = _2427 * _2431;
      uint16x128_t _2433 = _2432;
      int16x128_t _2434 = int16x128_t_ops::convert_from<uint16x128_t>(_2433);
      uint16x128_t _2435 = uint16x128_t_ops::convert_from<int16x128_t>(_2434);
      uint16x128_t _2436 = _2424 + _2435;
      int32x128_t _2437 = int32x128_t_ops::max(_2354, _2355);
      int32x128_t _2438 = _2437 + _2360;
      uint8x128_t _2439 = uint8x128_t_ops::load_gather(_input, _2438);
      uint16x128_t _2440 = uint16x128_t_ops::convert_from<uint8x128_t>(_2439);
      uint8_t _2441 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _2442 = uint8x128_t_ops::broadcast(_2441);
      uint16x128_t _2443 = uint16x128_t_ops::convert_from<uint8x128_t>(_2442);
      uint16x128_t _2444 = _2440 * _2443;
      uint16x128_t _2445 = _2444;
      int16x128_t _2446 = int16x128_t_ops::convert_from<uint16x128_t>(_2445);
      uint16x128_t _2447 = uint16x128_t_ops::convert_from<int16x128_t>(_2446);
      uint16x128_t _2448 = _2436 + _2447;
      int32x128_t _2449 = _2437 + _2374;
      uint8x128_t _2450 = uint8x128_t_ops::load_gather(_input, _2449);
      uint16x128_t _2451 = uint16x128_t_ops::convert_from<uint8x128_t>(_2450);
      int32_t _2452 = _491 + 2;
      uint8_t _2453 = ((const uint8_t *)_mask)[_2452];
      uint8x128_t _2454 = uint8x128_t_ops::broadcast(_2453);
      uint16x128_t _2455 = uint16x128_t_ops::convert_from<uint8x128_t>(_2454);
      uint16x128_t _2456 = _2451 * _2455;
      uint16x128_t _2457 = _2456;
      int16x128_t _2458 = int16x128_t_ops::convert_from<uint16x128_t>(_2457);
      uint16x128_t _2459 = uint16x128_t_ops::convert_from<int16x128_t>(_2458);
      uint16x128_t _2460 = _2448 + _2459;
      int32x128_t _2461 = _2437 + _2389;
      uint8x128_t _2462 = uint8x128_t_ops::load_gather(_input, _2461);
      uint16x128_t _2463 = uint16x128_t_ops::convert_from<uint8x128_t>(_2462);
      int32_t _2464 = _490 + 2;
      uint8_t _2465 = ((const uint8_t *)_mask)[_2464];
      uint8x128_t _2466 = uint8x128_t_ops::broadcast(_2465);
      uint16x128_t _2467 = uint16x128_t_ops::convert_from<uint8x128_t>(_2466);
      uint16x128_t _2468 = _2463 * _2467;
      uint16x128_t _2469 = _2468;
      int16x128_t _2470 = int16x128_t_ops::convert_from<uint16x128_t>(_2469);
      uint16x128_t _2471 = uint16x128_t_ops::convert_from<int16x128_t>(_2470);
      uint16x128_t _2472 = _2460 + _2471;
      uint16_t _2473 = (uint16_t)(255ull);
      uint16x128_t _2474 = uint16x128_t_ops::broadcast(_2473);
      uint16x128_t _2475 = uint16x128_t_ops::min(_2472, _2474);
      uint8x128_t _2476 = uint8x128_t_ops::convert_from<uint16x128_t>(_2475);
      int32_t _2477 = _1530 + 6;
      int32_t _2478 = _2477 * _42;
      int32_t _2479 = _2344 + _2478;
      uint8x128_t_ops::store(_2476, _output, _2479);
      int32_t _2480 = _output_s0_x_x * 128;
      int32_t _2481 = _2480 + -1;
      int32x128_t _2482 = int32x128_t_ops::ramp(_2481, 1);
      int32_t _2483 = _18 + -1;
      int32x128_t _2484 = int32x128_t_ops::broadcast(_2483);
      int32x128_t _2485 = int32x128_t_ops::min(_2482, _2484);
      int32x128_t _2486 = int32x128_t_ops::ramp(_2480, 1);
      int32x128_t _2487 = int32x128_t_ops::min(_2486, _2484);
      int32_t _2488 = _2480 + 1;
      int32x128_t _2489 = int32x128_t_ops::ramp(_2488, 1);
      int32x128_t _2490 = int32x128_t_ops::min(_2489, _2484);
      int32x128_t _2491 = int32x128_t_ops::broadcast(0);
      int32x128_t _2492 = int32x128_t_ops::max(_2485, _2491);
      int32_t _2493 = ::halide_cpp_max(_1530, -6);
      int32_t _2494 = _2493 + 6;
      int32_t _2495 = _2494 * _22;
      int32x128_t _2496 = int32x128_t_ops::broadcast(_2495);
      int32x128_t _2497 = _2492 + _2496;
      uint8x128_t _2498 = uint8x128_t_ops::load_gather(_input, _2497);
      uint16x128_t _2499 = uint16x128_t_ops::convert_from<uint8x128_t>(_2498);
      uint8_t _2500 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _2501 = uint8x128_t_ops::broadcast(_2500);
      uint16x128_t _2502 = uint16x128_t_ops::convert_from<uint8x128_t>(_2501);
      uint16x128_t _2503 = _2499 * _2502;
      uint16x128_t _2504 = _2503;
      int16x128_t _2505 = int16x128_t_ops::convert_from<uint16x128_t>(_2504);
      uint16x128_t _2506 = uint16x128_t_ops::convert_from<int16x128_t>(_2505);
      int32_t _2507 = ::halide_cpp_max(_1530, -7);
      int32_t _2508 = _2507 + 7;
      int32_t _2509 = _2508 * _22;
      int32x128_t _2510 = int32x128_t_ops::broadcast(_2509);
      int32x128_t _2511 = _2492 + _2510;
      uint8x128_t _2512 = uint8x128_t_ops::load_gather(_input, _2511);
      uint16x128_t _2513 = uint16x128_t_ops::convert_from<uint8x128_t>(_2512);
      uint8_t _2514 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _2515 = uint8x128_t_ops::broadcast(_2514);
      uint16x128_t _2516 = uint16x128_t_ops::convert_from<uint8x128_t>(_2515);
      uint16x128_t _2517 = _2513 * _2516;
      uint16x128_t _2518 = _2517;
      int16x128_t _2519 = int16x128_t_ops::convert_from<uint16x128_t>(_2518);
      uint16x128_t _2520 = uint16x128_t_ops::convert_from<int16x128_t>(_2519);
      uint16x128_t _2521 = _2506 + _2520;
      int32_t _2522 = ::halide_cpp_max(_1530, -8);
      int32_t _2523 = _2522 + 8;
      int32_t _2524 = _2523 * _22;
      int32x128_t _2525 = int32x128_t_ops::broadcast(_2524);
      int32x128_t _2526 = _2492 + _2525;
      uint8x128_t _2527 = uint8x128_t_ops::load_gather(_input, _2526);
      uint16x128_t _2528 = uint16x128_t_ops::convert_from<uint8x128_t>(_2527);
      uint8_t _2529 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _2530 = uint8x128_t_ops::broadcast(_2529);
      uint16x128_t _2531 = uint16x128_t_ops::convert_from<uint8x128_t>(_2530);
      uint16x128_t _2532 = _2528 * _2531;
      uint16x128_t _2533 = _2532;
      int16x128_t _2534 = int16x128_t_ops::convert_from<uint16x128_t>(_2533);
      uint16x128_t _2535 = uint16x128_t_ops::convert_from<int16x128_t>(_2534);
      uint16x128_t _2536 = _2521 + _2535;
      int32x128_t _2537 = int32x128_t_ops::max(_2487, _2491);
      int32x128_t _2538 = _2537 + _2496;
      uint8x128_t _2539 = uint8x128_t_ops::load_gather(_input, _2538);
      uint16x128_t _2540 = uint16x128_t_ops::convert_from<uint8x128_t>(_2539);
      uint8_t _2541 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _2542 = uint8x128_t_ops::broadcast(_2541);
      uint16x128_t _2543 = uint16x128_t_ops::convert_from<uint8x128_t>(_2542);
      uint16x128_t _2544 = _2540 * _2543;
      uint16x128_t _2545 = _2544;
      int16x128_t _2546 = int16x128_t_ops::convert_from<uint16x128_t>(_2545);
      uint16x128_t _2547 = uint16x128_t_ops::convert_from<int16x128_t>(_2546);
      uint16x128_t _2548 = _2536 + _2547;
      int32x128_t _2549 = _2537 + _2510;
      uint8x128_t _2550 = uint8x128_t_ops::load_gather(_input, _2549);
      uint16x128_t _2551 = uint16x128_t_ops::convert_from<uint8x128_t>(_2550);
      int32_t _2552 = _491 + 1;
      uint8_t _2553 = ((const uint8_t *)_mask)[_2552];
      uint8x128_t _2554 = uint8x128_t_ops::broadcast(_2553);
      uint16x128_t _2555 = uint16x128_t_ops::convert_from<uint8x128_t>(_2554);
      uint16x128_t _2556 = _2551 * _2555;
      uint16x128_t _2557 = _2556;
      int16x128_t _2558 = int16x128_t_ops::convert_from<uint16x128_t>(_2557);
      uint16x128_t _2559 = uint16x128_t_ops::convert_from<int16x128_t>(_2558);
      uint16x128_t _2560 = _2548 + _2559;
      int32x128_t _2561 = _2537 + _2525;
      uint8x128_t _2562 = uint8x128_t_ops::load_gather(_input, _2561);
      uint16x128_t _2563 = uint16x128_t_ops::convert_from<uint8x128_t>(_2562);
      int32_t _2564 = _490 + 1;
      uint8_t _2565 = ((const uint8_t *)_mask)[_2564];
      uint8x128_t _2566 = uint8x128_t_ops::broadcast(_2565);
      uint16x128_t _2567 = uint16x128_t_ops::convert_from<uint8x128_t>(_2566);
      uint16x128_t _2568 = _2563 * _2567;
      uint16x128_t _2569 = _2568;
      int16x128_t _2570 = int16x128_t_ops::convert_from<uint16x128_t>(_2569);
      uint16x128_t _2571 = uint16x128_t_ops::convert_from<int16x128_t>(_2570);
      uint16x128_t _2572 = _2560 + _2571;
      int32x128_t _2573 = int32x128_t_ops::max(_2490, _2491);
      int32x128_t _2574 = _2573 + _2496;
      uint8x128_t _2575 = uint8x128_t_ops::load_gather(_input, _2574);
      uint16x128_t _2576 = uint16x128_t_ops::convert_from<uint8x128_t>(_2575);
      uint8_t _2577 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _2578 = uint8x128_t_ops::broadcast(_2577);
      uint16x128_t _2579 = uint16x128_t_ops::convert_from<uint8x128_t>(_2578);
      uint16x128_t _2580 = _2576 * _2579;
      uint16x128_t _2581 = _2580;
      int16x128_t _2582 = int16x128_t_ops::convert_from<uint16x128_t>(_2581);
      uint16x128_t _2583 = uint16x128_t_ops::convert_from<int16x128_t>(_2582);
      uint16x128_t _2584 = _2572 + _2583;
      int32x128_t _2585 = _2573 + _2510;
      uint8x128_t _2586 = uint8x128_t_ops::load_gather(_input, _2585);
      uint16x128_t _2587 = uint16x128_t_ops::convert_from<uint8x128_t>(_2586);
      int32_t _2588 = _491 + 2;
      uint8_t _2589 = ((const uint8_t *)_mask)[_2588];
      uint8x128_t _2590 = uint8x128_t_ops::broadcast(_2589);
      uint16x128_t _2591 = uint16x128_t_ops::convert_from<uint8x128_t>(_2590);
      uint16x128_t _2592 = _2587 * _2591;
      uint16x128_t _2593 = _2592;
      int16x128_t _2594 = int16x128_t_ops::convert_from<uint16x128_t>(_2593);
      uint16x128_t _2595 = uint16x128_t_ops::convert_from<int16x128_t>(_2594);
      uint16x128_t _2596 = _2584 + _2595;
      int32x128_t _2597 = _2573 + _2525;
      uint8x128_t _2598 = uint8x128_t_ops::load_gather(_input, _2597);
      uint16x128_t _2599 = uint16x128_t_ops::convert_from<uint8x128_t>(_2598);
      int32_t _2600 = _490 + 2;
      uint8_t _2601 = ((const uint8_t *)_mask)[_2600];
      uint8x128_t _2602 = uint8x128_t_ops::broadcast(_2601);
      uint16x128_t _2603 = uint16x128_t_ops::convert_from<uint8x128_t>(_2602);
      uint16x128_t _2604 = _2599 * _2603;
      uint16x128_t _2605 = _2604;
      int16x128_t _2606 = int16x128_t_ops::convert_from<uint16x128_t>(_2605);
      uint16x128_t _2607 = uint16x128_t_ops::convert_from<int16x128_t>(_2606);
      uint16x128_t _2608 = _2596 + _2607;
      uint16_t _2609 = (uint16_t)(255ull);
      uint16x128_t _2610 = uint16x128_t_ops::broadcast(_2609);
      uint16x128_t _2611 = uint16x128_t_ops::min(_2608, _2610);
      uint8x128_t _2612 = uint8x128_t_ops::convert_from<uint16x128_t>(_2611);
      int32_t _2613 = _1530 + 7;
      int32_t _2614 = _2613 * _42;
      int32_t _2615 = _2480 + _2614;
      uint8x128_t_ops::store(_2612, _output, _2615);
     } // for _output_s0_x_x
    } // if _496
    else
    {
     int32_t _2616 = _output_s0_y_y_y * 8;
     int32_t _2617 = _2616 + _480;
     for (int _output_s0_x_x = 0; _output_s0_x_x < 0 + _475; _output_s0_x_x++)
     {
      int32_t _2618 = _output_s0_x_x * 128;
      int32_t _2619 = _2618 + -1;
      int32x128_t _2620 = int32x128_t_ops::ramp(_2619, 1);
      int32_t _2621 = _18 + -1;
      int32x128_t _2622 = int32x128_t_ops::broadcast(_2621);
      int32x128_t _2623 = int32x128_t_ops::min(_2620, _2622);
      int32_t _2624 = ::halide_cpp_min(_21, _2617);
      int32_t _2625 = _21 + -1;
      int32_t _2626 = ::halide_cpp_min(_2625, _2617);
      int32_t _2627 = _2617 + 2;
      int32_t _2628 = ::halide_cpp_min(_2627, _21);
      int32x128_t _2629 = int32x128_t_ops::ramp(_2618, 1);
      int32x128_t _2630 = int32x128_t_ops::min(_2629, _2622);
      int32_t _2631 = _2618 + 1;
      int32x128_t _2632 = int32x128_t_ops::ramp(_2631, 1);
      int32x128_t _2633 = int32x128_t_ops::min(_2632, _2622);
      int32x128_t _2634 = int32x128_t_ops::broadcast(0);
      int32x128_t _2635 = int32x128_t_ops::max(_2623, _2634);
      int32_t _2636 = ::halide_cpp_max(_2624, 1);
      int32_t _2637 = _2636 + -1;
      int32_t _2638 = _2637 * _22;
      int32x128_t _2639 = int32x128_t_ops::broadcast(_2638);
      int32x128_t _2640 = _2635 + _2639;
      uint8x128_t _2641 = uint8x128_t_ops::load_gather(_input, _2640);
      uint16x128_t _2642 = uint16x128_t_ops::convert_from<uint8x128_t>(_2641);
      uint8_t _2643 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _2644 = uint8x128_t_ops::broadcast(_2643);
      uint16x128_t _2645 = uint16x128_t_ops::convert_from<uint8x128_t>(_2644);
      uint16x128_t _2646 = _2642 * _2645;
      uint16x128_t _2647 = _2646;
      int16x128_t _2648 = int16x128_t_ops::convert_from<uint16x128_t>(_2647);
      uint16x128_t _2649 = uint16x128_t_ops::convert_from<int16x128_t>(_2648);
      int32_t _2650 = ::halide_cpp_max(_2626, 0);
      int32_t _2651 = _2650 * _22;
      int32x128_t _2652 = int32x128_t_ops::broadcast(_2651);
      int32x128_t _2653 = _2635 + _2652;
      uint8x128_t _2654 = uint8x128_t_ops::load_gather(_input, _2653);
      uint16x128_t _2655 = uint16x128_t_ops::convert_from<uint8x128_t>(_2654);
      uint8_t _2656 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _2657 = uint8x128_t_ops::broadcast(_2656);
      uint16x128_t _2658 = uint16x128_t_ops::convert_from<uint8x128_t>(_2657);
      uint16x128_t _2659 = _2655 * _2658;
      uint16x128_t _2660 = _2659;
      int16x128_t _2661 = int16x128_t_ops::convert_from<uint16x128_t>(_2660);
      uint16x128_t _2662 = uint16x128_t_ops::convert_from<int16x128_t>(_2661);
      uint16x128_t _2663 = _2649 + _2662;
      int32_t _2664 = ::halide_cpp_max(_2628, 1);
      int32_t _2665 = _2664 + -1;
      int32_t _2666 = _2665 * _22;
      int32x128_t _2667 = int32x128_t_ops::broadcast(_2666);
      int32x128_t _2668 = _2635 + _2667;
      uint8x128_t _2669 = uint8x128_t_ops::load_gather(_input, _2668);
      uint16x128_t _2670 = uint16x128_t_ops::convert_from<uint8x128_t>(_2669);
      uint8_t _2671 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _2672 = uint8x128_t_ops::broadcast(_2671);
      uint16x128_t _2673 = uint16x128_t_ops::convert_from<uint8x128_t>(_2672);
      uint16x128_t _2674 = _2670 * _2673;
      uint16x128_t _2675 = _2674;
      int16x128_t _2676 = int16x128_t_ops::convert_from<uint16x128_t>(_2675);
      uint16x128_t _2677 = uint16x128_t_ops::convert_from<int16x128_t>(_2676);
      uint16x128_t _2678 = _2663 + _2677;
      int32x128_t _2679 = int32x128_t_ops::max(_2630, _2634);
      int32x128_t _2680 = _2679 + _2639;
      uint8x128_t _2681 = uint8x128_t_ops::load_gather(_input, _2680);
      uint16x128_t _2682 = uint16x128_t_ops::convert_from<uint8x128_t>(_2681);
      uint8_t _2683 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _2684 = uint8x128_t_ops::broadcast(_2683);
      uint16x128_t _2685 = uint16x128_t_ops::convert_from<uint8x128_t>(_2684);
      uint16x128_t _2686 = _2682 * _2685;
      uint16x128_t _2687 = _2686;
      int16x128_t _2688 = int16x128_t_ops::convert_from<uint16x128_t>(_2687);
      uint16x128_t _2689 = uint16x128_t_ops::convert_from<int16x128_t>(_2688);
      uint16x128_t _2690 = _2678 + _2689;
      int32x128_t _2691 = _2679 + _2652;
      uint8x128_t _2692 = uint8x128_t_ops::load_gather(_input, _2691);
      uint16x128_t _2693 = uint16x128_t_ops::convert_from<uint8x128_t>(_2692);
      int32_t _2694 = _491 + 1;
      uint8_t _2695 = ((const uint8_t *)_mask)[_2694];
      uint8x128_t _2696 = uint8x128_t_ops::broadcast(_2695);
      uint16x128_t _2697 = uint16x128_t_ops::convert_from<uint8x128_t>(_2696);
      uint16x128_t _2698 = _2693 * _2697;
      uint16x128_t _2699 = _2698;
      int16x128_t _2700 = int16x128_t_ops::convert_from<uint16x128_t>(_2699);
      uint16x128_t _2701 = uint16x128_t_ops::convert_from<int16x128_t>(_2700);
      uint16x128_t _2702 = _2690 + _2701;
      int32x128_t _2703 = _2679 + _2667;
      uint8x128_t _2704 = uint8x128_t_ops::load_gather(_input, _2703);
      uint16x128_t _2705 = uint16x128_t_ops::convert_from<uint8x128_t>(_2704);
      int32_t _2706 = _490 + 1;
      uint8_t _2707 = ((const uint8_t *)_mask)[_2706];
      uint8x128_t _2708 = uint8x128_t_ops::broadcast(_2707);
      uint16x128_t _2709 = uint16x128_t_ops::convert_from<uint8x128_t>(_2708);
      uint16x128_t _2710 = _2705 * _2709;
      uint16x128_t _2711 = _2710;
      int16x128_t _2712 = int16x128_t_ops::convert_from<uint16x128_t>(_2711);
      uint16x128_t _2713 = uint16x128_t_ops::convert_from<int16x128_t>(_2712);
      uint16x128_t _2714 = _2702 + _2713;
      int32x128_t _2715 = int32x128_t_ops::max(_2633, _2634);
      int32x128_t _2716 = _2715 + _2639;
      uint8x128_t _2717 = uint8x128_t_ops::load_gather(_input, _2716);
      uint16x128_t _2718 = uint16x128_t_ops::convert_from<uint8x128_t>(_2717);
      uint8_t _2719 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _2720 = uint8x128_t_ops::broadcast(_2719);
      uint16x128_t _2721 = uint16x128_t_ops::convert_from<uint8x128_t>(_2720);
      uint16x128_t _2722 = _2718 * _2721;
      uint16x128_t _2723 = _2722;
      int16x128_t _2724 = int16x128_t_ops::convert_from<uint16x128_t>(_2723);
      uint16x128_t _2725 = uint16x128_t_ops::convert_from<int16x128_t>(_2724);
      uint16x128_t _2726 = _2714 + _2725;
      int32x128_t _2727 = _2715 + _2652;
      uint8x128_t _2728 = uint8x128_t_ops::load_gather(_input, _2727);
      uint16x128_t _2729 = uint16x128_t_ops::convert_from<uint8x128_t>(_2728);
      int32_t _2730 = _491 + 2;
      uint8_t _2731 = ((const uint8_t *)_mask)[_2730];
      uint8x128_t _2732 = uint8x128_t_ops::broadcast(_2731);
      uint16x128_t _2733 = uint16x128_t_ops::convert_from<uint8x128_t>(_2732);
      uint16x128_t _2734 = _2729 * _2733;
      uint16x128_t _2735 = _2734;
      int16x128_t _2736 = int16x128_t_ops::convert_from<uint16x128_t>(_2735);
      uint16x128_t _2737 = uint16x128_t_ops::convert_from<int16x128_t>(_2736);
      uint16x128_t _2738 = _2726 + _2737;
      int32x128_t _2739 = _2715 + _2667;
      uint8x128_t _2740 = uint8x128_t_ops::load_gather(_input, _2739);
      uint16x128_t _2741 = uint16x128_t_ops::convert_from<uint8x128_t>(_2740);
      int32_t _2742 = _490 + 2;
      uint8_t _2743 = ((const uint8_t *)_mask)[_2742];
      uint8x128_t _2744 = uint8x128_t_ops::broadcast(_2743);
      uint16x128_t _2745 = uint16x128_t_ops::convert_from<uint8x128_t>(_2744);
      uint16x128_t _2746 = _2741 * _2745;
      uint16x128_t _2747 = _2746;
      int16x128_t _2748 = int16x128_t_ops::convert_from<uint16x128_t>(_2747);
      uint16x128_t _2749 = uint16x128_t_ops::convert_from<int16x128_t>(_2748);
      uint16x128_t _2750 = _2738 + _2749;
      uint16_t _2751 = (uint16_t)(255ull);
      uint16x128_t _2752 = uint16x128_t_ops::broadcast(_2751);
      uint16x128_t _2753 = uint16x128_t_ops::min(_2750, _2752);
      uint8x128_t _2754 = uint8x128_t_ops::convert_from<uint16x128_t>(_2753);
      int32_t _2755 = _42 * _2617;
      int32_t _2756 = _2618 + _2755;
      uint8x128_t_ops::store(_2754, _output, _2756);
      int32_t _2757 = _output_s0_x_x * 128;
      int32_t _2758 = _2757 + -1;
      int32x128_t _2759 = int32x128_t_ops::ramp(_2758, 1);
      int32_t _2760 = _18 + -1;
      int32x128_t _2761 = int32x128_t_ops::broadcast(_2760);
      int32x128_t _2762 = int32x128_t_ops::min(_2759, _2761);
      int32_t _2763 = _21 + -1;
      int32_t _2764 = ::halide_cpp_min(_2763, _2617);
      int32_t _2765 = _2617 + 2;
      int32_t _2766 = ::halide_cpp_min(_2765, _21);
      int32_t _2767 = _2617 + 3;
      int32_t _2768 = ::halide_cpp_min(_2767, _21);
      int32x128_t _2769 = int32x128_t_ops::ramp(_2757, 1);
      int32x128_t _2770 = int32x128_t_ops::min(_2769, _2761);
      int32_t _2771 = _2757 + 1;
      int32x128_t _2772 = int32x128_t_ops::ramp(_2771, 1);
      int32x128_t _2773 = int32x128_t_ops::min(_2772, _2761);
      int32x128_t _2774 = int32x128_t_ops::broadcast(0);
      int32x128_t _2775 = int32x128_t_ops::max(_2762, _2774);
      int32_t _2776 = ::halide_cpp_max(_2764, 0);
      int32_t _2777 = _2776 * _22;
      int32x128_t _2778 = int32x128_t_ops::broadcast(_2777);
      int32x128_t _2779 = _2775 + _2778;
      uint8x128_t _2780 = uint8x128_t_ops::load_gather(_input, _2779);
      uint16x128_t _2781 = uint16x128_t_ops::convert_from<uint8x128_t>(_2780);
      uint8_t _2782 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _2783 = uint8x128_t_ops::broadcast(_2782);
      uint16x128_t _2784 = uint16x128_t_ops::convert_from<uint8x128_t>(_2783);
      uint16x128_t _2785 = _2781 * _2784;
      uint16x128_t _2786 = _2785;
      int16x128_t _2787 = int16x128_t_ops::convert_from<uint16x128_t>(_2786);
      uint16x128_t _2788 = uint16x128_t_ops::convert_from<int16x128_t>(_2787);
      int32_t _2789 = ::halide_cpp_max(_2766, 1);
      int32_t _2790 = _2789 + -1;
      int32_t _2791 = _2790 * _22;
      int32x128_t _2792 = int32x128_t_ops::broadcast(_2791);
      int32x128_t _2793 = _2775 + _2792;
      uint8x128_t _2794 = uint8x128_t_ops::load_gather(_input, _2793);
      uint16x128_t _2795 = uint16x128_t_ops::convert_from<uint8x128_t>(_2794);
      uint8_t _2796 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _2797 = uint8x128_t_ops::broadcast(_2796);
      uint16x128_t _2798 = uint16x128_t_ops::convert_from<uint8x128_t>(_2797);
      uint16x128_t _2799 = _2795 * _2798;
      uint16x128_t _2800 = _2799;
      int16x128_t _2801 = int16x128_t_ops::convert_from<uint16x128_t>(_2800);
      uint16x128_t _2802 = uint16x128_t_ops::convert_from<int16x128_t>(_2801);
      uint16x128_t _2803 = _2788 + _2802;
      int32_t _2804 = ::halide_cpp_max(_2768, 1);
      int32_t _2805 = _2804 + -1;
      int32_t _2806 = _2805 * _22;
      int32x128_t _2807 = int32x128_t_ops::broadcast(_2806);
      int32x128_t _2808 = _2775 + _2807;
      uint8x128_t _2809 = uint8x128_t_ops::load_gather(_input, _2808);
      uint16x128_t _2810 = uint16x128_t_ops::convert_from<uint8x128_t>(_2809);
      uint8_t _2811 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _2812 = uint8x128_t_ops::broadcast(_2811);
      uint16x128_t _2813 = uint16x128_t_ops::convert_from<uint8x128_t>(_2812);
      uint16x128_t _2814 = _2810 * _2813;
      uint16x128_t _2815 = _2814;
      int16x128_t _2816 = int16x128_t_ops::convert_from<uint16x128_t>(_2815);
      uint16x128_t _2817 = uint16x128_t_ops::convert_from<int16x128_t>(_2816);
      uint16x128_t _2818 = _2803 + _2817;
      int32x128_t _2819 = int32x128_t_ops::max(_2770, _2774);
      int32x128_t _2820 = _2819 + _2778;
      uint8x128_t _2821 = uint8x128_t_ops::load_gather(_input, _2820);
      uint16x128_t _2822 = uint16x128_t_ops::convert_from<uint8x128_t>(_2821);
      uint8_t _2823 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _2824 = uint8x128_t_ops::broadcast(_2823);
      uint16x128_t _2825 = uint16x128_t_ops::convert_from<uint8x128_t>(_2824);
      uint16x128_t _2826 = _2822 * _2825;
      uint16x128_t _2827 = _2826;
      int16x128_t _2828 = int16x128_t_ops::convert_from<uint16x128_t>(_2827);
      uint16x128_t _2829 = uint16x128_t_ops::convert_from<int16x128_t>(_2828);
      uint16x128_t _2830 = _2818 + _2829;
      int32x128_t _2831 = _2819 + _2792;
      uint8x128_t _2832 = uint8x128_t_ops::load_gather(_input, _2831);
      uint16x128_t _2833 = uint16x128_t_ops::convert_from<uint8x128_t>(_2832);
      int32_t _2834 = _491 + 1;
      uint8_t _2835 = ((const uint8_t *)_mask)[_2834];
      uint8x128_t _2836 = uint8x128_t_ops::broadcast(_2835);
      uint16x128_t _2837 = uint16x128_t_ops::convert_from<uint8x128_t>(_2836);
      uint16x128_t _2838 = _2833 * _2837;
      uint16x128_t _2839 = _2838;
      int16x128_t _2840 = int16x128_t_ops::convert_from<uint16x128_t>(_2839);
      uint16x128_t _2841 = uint16x128_t_ops::convert_from<int16x128_t>(_2840);
      uint16x128_t _2842 = _2830 + _2841;
      int32x128_t _2843 = _2819 + _2807;
      uint8x128_t _2844 = uint8x128_t_ops::load_gather(_input, _2843);
      uint16x128_t _2845 = uint16x128_t_ops::convert_from<uint8x128_t>(_2844);
      int32_t _2846 = _490 + 1;
      uint8_t _2847 = ((const uint8_t *)_mask)[_2846];
      uint8x128_t _2848 = uint8x128_t_ops::broadcast(_2847);
      uint16x128_t _2849 = uint16x128_t_ops::convert_from<uint8x128_t>(_2848);
      uint16x128_t _2850 = _2845 * _2849;
      uint16x128_t _2851 = _2850;
      int16x128_t _2852 = int16x128_t_ops::convert_from<uint16x128_t>(_2851);
      uint16x128_t _2853 = uint16x128_t_ops::convert_from<int16x128_t>(_2852);
      uint16x128_t _2854 = _2842 + _2853;
      int32x128_t _2855 = int32x128_t_ops::max(_2773, _2774);
      int32x128_t _2856 = _2855 + _2778;
      uint8x128_t _2857 = uint8x128_t_ops::load_gather(_input, _2856);
      uint16x128_t _2858 = uint16x128_t_ops::convert_from<uint8x128_t>(_2857);
      uint8_t _2859 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _2860 = uint8x128_t_ops::broadcast(_2859);
      uint16x128_t _2861 = uint16x128_t_ops::convert_from<uint8x128_t>(_2860);
      uint16x128_t _2862 = _2858 * _2861;
      uint16x128_t _2863 = _2862;
      int16x128_t _2864 = int16x128_t_ops::convert_from<uint16x128_t>(_2863);
      uint16x128_t _2865 = uint16x128_t_ops::convert_from<int16x128_t>(_2864);
      uint16x128_t _2866 = _2854 + _2865;
      int32x128_t _2867 = _2855 + _2792;
      uint8x128_t _2868 = uint8x128_t_ops::load_gather(_input, _2867);
      uint16x128_t _2869 = uint16x128_t_ops::convert_from<uint8x128_t>(_2868);
      int32_t _2870 = _491 + 2;
      uint8_t _2871 = ((const uint8_t *)_mask)[_2870];
      uint8x128_t _2872 = uint8x128_t_ops::broadcast(_2871);
      uint16x128_t _2873 = uint16x128_t_ops::convert_from<uint8x128_t>(_2872);
      uint16x128_t _2874 = _2869 * _2873;
      uint16x128_t _2875 = _2874;
      int16x128_t _2876 = int16x128_t_ops::convert_from<uint16x128_t>(_2875);
      uint16x128_t _2877 = uint16x128_t_ops::convert_from<int16x128_t>(_2876);
      uint16x128_t _2878 = _2866 + _2877;
      int32x128_t _2879 = _2855 + _2807;
      uint8x128_t _2880 = uint8x128_t_ops::load_gather(_input, _2879);
      uint16x128_t _2881 = uint16x128_t_ops::convert_from<uint8x128_t>(_2880);
      int32_t _2882 = _490 + 2;
      uint8_t _2883 = ((const uint8_t *)_mask)[_2882];
      uint8x128_t _2884 = uint8x128_t_ops::broadcast(_2883);
      uint16x128_t _2885 = uint16x128_t_ops::convert_from<uint8x128_t>(_2884);
      uint16x128_t _2886 = _2881 * _2885;
      uint16x128_t _2887 = _2886;
      int16x128_t _2888 = int16x128_t_ops::convert_from<uint16x128_t>(_2887);
      uint16x128_t _2889 = uint16x128_t_ops::convert_from<int16x128_t>(_2888);
      uint16x128_t _2890 = _2878 + _2889;
      uint16_t _2891 = (uint16_t)(255ull);
      uint16x128_t _2892 = uint16x128_t_ops::broadcast(_2891);
      uint16x128_t _2893 = uint16x128_t_ops::min(_2890, _2892);
      uint8x128_t _2894 = uint8x128_t_ops::convert_from<uint16x128_t>(_2893);
      int32_t _2895 = _2617 + 1;
      int32_t _2896 = _2895 * _42;
      int32_t _2897 = _2757 + _2896;
      uint8x128_t_ops::store(_2894, _output, _2897);
      int32_t _2898 = _output_s0_x_x * 128;
      int32_t _2899 = _2898 + -1;
      int32x128_t _2900 = int32x128_t_ops::ramp(_2899, 1);
      int32_t _2901 = _18 + -1;
      int32x128_t _2902 = int32x128_t_ops::broadcast(_2901);
      int32x128_t _2903 = int32x128_t_ops::min(_2900, _2902);
      int32_t _2904 = _2617 + 2;
      int32_t _2905 = ::halide_cpp_min(_2904, _21);
      int32_t _2906 = _2617 + 3;
      int32_t _2907 = ::halide_cpp_min(_2906, _21);
      int32_t _2908 = _2617 + 4;
      int32_t _2909 = ::halide_cpp_min(_2908, _21);
      int32x128_t _2910 = int32x128_t_ops::ramp(_2898, 1);
      int32x128_t _2911 = int32x128_t_ops::min(_2910, _2902);
      int32_t _2912 = _2898 + 1;
      int32x128_t _2913 = int32x128_t_ops::ramp(_2912, 1);
      int32x128_t _2914 = int32x128_t_ops::min(_2913, _2902);
      int32x128_t _2915 = int32x128_t_ops::broadcast(0);
      int32x128_t _2916 = int32x128_t_ops::max(_2903, _2915);
      int32_t _2917 = ::halide_cpp_max(_2905, 1);
      int32_t _2918 = _2917 + -1;
      int32_t _2919 = _2918 * _22;
      int32x128_t _2920 = int32x128_t_ops::broadcast(_2919);
      int32x128_t _2921 = _2916 + _2920;
      uint8x128_t _2922 = uint8x128_t_ops::load_gather(_input, _2921);
      uint16x128_t _2923 = uint16x128_t_ops::convert_from<uint8x128_t>(_2922);
      uint8_t _2924 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _2925 = uint8x128_t_ops::broadcast(_2924);
      uint16x128_t _2926 = uint16x128_t_ops::convert_from<uint8x128_t>(_2925);
      uint16x128_t _2927 = _2923 * _2926;
      uint16x128_t _2928 = _2927;
      int16x128_t _2929 = int16x128_t_ops::convert_from<uint16x128_t>(_2928);
      uint16x128_t _2930 = uint16x128_t_ops::convert_from<int16x128_t>(_2929);
      int32_t _2931 = ::halide_cpp_max(_2907, 1);
      int32_t _2932 = _2931 + -1;
      int32_t _2933 = _2932 * _22;
      int32x128_t _2934 = int32x128_t_ops::broadcast(_2933);
      int32x128_t _2935 = _2916 + _2934;
      uint8x128_t _2936 = uint8x128_t_ops::load_gather(_input, _2935);
      uint16x128_t _2937 = uint16x128_t_ops::convert_from<uint8x128_t>(_2936);
      uint8_t _2938 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _2939 = uint8x128_t_ops::broadcast(_2938);
      uint16x128_t _2940 = uint16x128_t_ops::convert_from<uint8x128_t>(_2939);
      uint16x128_t _2941 = _2937 * _2940;
      uint16x128_t _2942 = _2941;
      int16x128_t _2943 = int16x128_t_ops::convert_from<uint16x128_t>(_2942);
      uint16x128_t _2944 = uint16x128_t_ops::convert_from<int16x128_t>(_2943);
      uint16x128_t _2945 = _2930 + _2944;
      int32_t _2946 = ::halide_cpp_max(_2909, 1);
      int32_t _2947 = _2946 + -1;
      int32_t _2948 = _2947 * _22;
      int32x128_t _2949 = int32x128_t_ops::broadcast(_2948);
      int32x128_t _2950 = _2916 + _2949;
      uint8x128_t _2951 = uint8x128_t_ops::load_gather(_input, _2950);
      uint16x128_t _2952 = uint16x128_t_ops::convert_from<uint8x128_t>(_2951);
      uint8_t _2953 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _2954 = uint8x128_t_ops::broadcast(_2953);
      uint16x128_t _2955 = uint16x128_t_ops::convert_from<uint8x128_t>(_2954);
      uint16x128_t _2956 = _2952 * _2955;
      uint16x128_t _2957 = _2956;
      int16x128_t _2958 = int16x128_t_ops::convert_from<uint16x128_t>(_2957);
      uint16x128_t _2959 = uint16x128_t_ops::convert_from<int16x128_t>(_2958);
      uint16x128_t _2960 = _2945 + _2959;
      int32x128_t _2961 = int32x128_t_ops::max(_2911, _2915);
      int32x128_t _2962 = _2961 + _2920;
      uint8x128_t _2963 = uint8x128_t_ops::load_gather(_input, _2962);
      uint16x128_t _2964 = uint16x128_t_ops::convert_from<uint8x128_t>(_2963);
      uint8_t _2965 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _2966 = uint8x128_t_ops::broadcast(_2965);
      uint16x128_t _2967 = uint16x128_t_ops::convert_from<uint8x128_t>(_2966);
      uint16x128_t _2968 = _2964 * _2967;
      uint16x128_t _2969 = _2968;
      int16x128_t _2970 = int16x128_t_ops::convert_from<uint16x128_t>(_2969);
      uint16x128_t _2971 = uint16x128_t_ops::convert_from<int16x128_t>(_2970);
      uint16x128_t _2972 = _2960 + _2971;
      int32x128_t _2973 = _2961 + _2934;
      uint8x128_t _2974 = uint8x128_t_ops::load_gather(_input, _2973);
      uint16x128_t _2975 = uint16x128_t_ops::convert_from<uint8x128_t>(_2974);
      int32_t _2976 = _491 + 1;
      uint8_t _2977 = ((const uint8_t *)_mask)[_2976];
      uint8x128_t _2978 = uint8x128_t_ops::broadcast(_2977);
      uint16x128_t _2979 = uint16x128_t_ops::convert_from<uint8x128_t>(_2978);
      uint16x128_t _2980 = _2975 * _2979;
      uint16x128_t _2981 = _2980;
      int16x128_t _2982 = int16x128_t_ops::convert_from<uint16x128_t>(_2981);
      uint16x128_t _2983 = uint16x128_t_ops::convert_from<int16x128_t>(_2982);
      uint16x128_t _2984 = _2972 + _2983;
      int32x128_t _2985 = _2961 + _2949;
      uint8x128_t _2986 = uint8x128_t_ops::load_gather(_input, _2985);
      uint16x128_t _2987 = uint16x128_t_ops::convert_from<uint8x128_t>(_2986);
      int32_t _2988 = _490 + 1;
      uint8_t _2989 = ((const uint8_t *)_mask)[_2988];
      uint8x128_t _2990 = uint8x128_t_ops::broadcast(_2989);
      uint16x128_t _2991 = uint16x128_t_ops::convert_from<uint8x128_t>(_2990);
      uint16x128_t _2992 = _2987 * _2991;
      uint16x128_t _2993 = _2992;
      int16x128_t _2994 = int16x128_t_ops::convert_from<uint16x128_t>(_2993);
      uint16x128_t _2995 = uint16x128_t_ops::convert_from<int16x128_t>(_2994);
      uint16x128_t _2996 = _2984 + _2995;
      int32x128_t _2997 = int32x128_t_ops::max(_2914, _2915);
      int32x128_t _2998 = _2997 + _2920;
      uint8x128_t _2999 = uint8x128_t_ops::load_gather(_input, _2998);
      uint16x128_t _3000 = uint16x128_t_ops::convert_from<uint8x128_t>(_2999);
      uint8_t _3001 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _3002 = uint8x128_t_ops::broadcast(_3001);
      uint16x128_t _3003 = uint16x128_t_ops::convert_from<uint8x128_t>(_3002);
      uint16x128_t _3004 = _3000 * _3003;
      uint16x128_t _3005 = _3004;
      int16x128_t _3006 = int16x128_t_ops::convert_from<uint16x128_t>(_3005);
      uint16x128_t _3007 = uint16x128_t_ops::convert_from<int16x128_t>(_3006);
      uint16x128_t _3008 = _2996 + _3007;
      int32x128_t _3009 = _2997 + _2934;
      uint8x128_t _3010 = uint8x128_t_ops::load_gather(_input, _3009);
      uint16x128_t _3011 = uint16x128_t_ops::convert_from<uint8x128_t>(_3010);
      int32_t _3012 = _491 + 2;
      uint8_t _3013 = ((const uint8_t *)_mask)[_3012];
      uint8x128_t _3014 = uint8x128_t_ops::broadcast(_3013);
      uint16x128_t _3015 = uint16x128_t_ops::convert_from<uint8x128_t>(_3014);
      uint16x128_t _3016 = _3011 * _3015;
      uint16x128_t _3017 = _3016;
      int16x128_t _3018 = int16x128_t_ops::convert_from<uint16x128_t>(_3017);
      uint16x128_t _3019 = uint16x128_t_ops::convert_from<int16x128_t>(_3018);
      uint16x128_t _3020 = _3008 + _3019;
      int32x128_t _3021 = _2997 + _2949;
      uint8x128_t _3022 = uint8x128_t_ops::load_gather(_input, _3021);
      uint16x128_t _3023 = uint16x128_t_ops::convert_from<uint8x128_t>(_3022);
      int32_t _3024 = _490 + 2;
      uint8_t _3025 = ((const uint8_t *)_mask)[_3024];
      uint8x128_t _3026 = uint8x128_t_ops::broadcast(_3025);
      uint16x128_t _3027 = uint16x128_t_ops::convert_from<uint8x128_t>(_3026);
      uint16x128_t _3028 = _3023 * _3027;
      uint16x128_t _3029 = _3028;
      int16x128_t _3030 = int16x128_t_ops::convert_from<uint16x128_t>(_3029);
      uint16x128_t _3031 = uint16x128_t_ops::convert_from<int16x128_t>(_3030);
      uint16x128_t _3032 = _3020 + _3031;
      uint16_t _3033 = (uint16_t)(255ull);
      uint16x128_t _3034 = uint16x128_t_ops::broadcast(_3033);
      uint16x128_t _3035 = uint16x128_t_ops::min(_3032, _3034);
      uint8x128_t _3036 = uint8x128_t_ops::convert_from<uint16x128_t>(_3035);
      int32_t _3037 = _2904 * _42;
      int32_t _3038 = _2898 + _3037;
      uint8x128_t_ops::store(_3036, _output, _3038);
      int32_t _3039 = _output_s0_x_x * 128;
      int32_t _3040 = _3039 + -1;
      int32x128_t _3041 = int32x128_t_ops::ramp(_3040, 1);
      int32_t _3042 = _18 + -1;
      int32x128_t _3043 = int32x128_t_ops::broadcast(_3042);
      int32x128_t _3044 = int32x128_t_ops::min(_3041, _3043);
      int32_t _3045 = _2617 + 3;
      int32_t _3046 = ::halide_cpp_min(_3045, _21);
      int32_t _3047 = _2617 + 4;
      int32_t _3048 = ::halide_cpp_min(_3047, _21);
      int32_t _3049 = _2617 + 5;
      int32_t _3050 = ::halide_cpp_min(_3049, _21);
      int32x128_t _3051 = int32x128_t_ops::ramp(_3039, 1);
      int32x128_t _3052 = int32x128_t_ops::min(_3051, _3043);
      int32_t _3053 = _3039 + 1;
      int32x128_t _3054 = int32x128_t_ops::ramp(_3053, 1);
      int32x128_t _3055 = int32x128_t_ops::min(_3054, _3043);
      int32x128_t _3056 = int32x128_t_ops::broadcast(0);
      int32x128_t _3057 = int32x128_t_ops::max(_3044, _3056);
      int32_t _3058 = ::halide_cpp_max(_3046, 1);
      int32_t _3059 = _3058 + -1;
      int32_t _3060 = _3059 * _22;
      int32x128_t _3061 = int32x128_t_ops::broadcast(_3060);
      int32x128_t _3062 = _3057 + _3061;
      uint8x128_t _3063 = uint8x128_t_ops::load_gather(_input, _3062);
      uint16x128_t _3064 = uint16x128_t_ops::convert_from<uint8x128_t>(_3063);
      uint8_t _3065 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _3066 = uint8x128_t_ops::broadcast(_3065);
      uint16x128_t _3067 = uint16x128_t_ops::convert_from<uint8x128_t>(_3066);
      uint16x128_t _3068 = _3064 * _3067;
      uint16x128_t _3069 = _3068;
      int16x128_t _3070 = int16x128_t_ops::convert_from<uint16x128_t>(_3069);
      uint16x128_t _3071 = uint16x128_t_ops::convert_from<int16x128_t>(_3070);
      int32_t _3072 = ::halide_cpp_max(_3048, 1);
      int32_t _3073 = _3072 + -1;
      int32_t _3074 = _3073 * _22;
      int32x128_t _3075 = int32x128_t_ops::broadcast(_3074);
      int32x128_t _3076 = _3057 + _3075;
      uint8x128_t _3077 = uint8x128_t_ops::load_gather(_input, _3076);
      uint16x128_t _3078 = uint16x128_t_ops::convert_from<uint8x128_t>(_3077);
      uint8_t _3079 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _3080 = uint8x128_t_ops::broadcast(_3079);
      uint16x128_t _3081 = uint16x128_t_ops::convert_from<uint8x128_t>(_3080);
      uint16x128_t _3082 = _3078 * _3081;
      uint16x128_t _3083 = _3082;
      int16x128_t _3084 = int16x128_t_ops::convert_from<uint16x128_t>(_3083);
      uint16x128_t _3085 = uint16x128_t_ops::convert_from<int16x128_t>(_3084);
      uint16x128_t _3086 = _3071 + _3085;
      int32_t _3087 = ::halide_cpp_max(_3050, 1);
      int32_t _3088 = _3087 + -1;
      int32_t _3089 = _3088 * _22;
      int32x128_t _3090 = int32x128_t_ops::broadcast(_3089);
      int32x128_t _3091 = _3057 + _3090;
      uint8x128_t _3092 = uint8x128_t_ops::load_gather(_input, _3091);
      uint16x128_t _3093 = uint16x128_t_ops::convert_from<uint8x128_t>(_3092);
      uint8_t _3094 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _3095 = uint8x128_t_ops::broadcast(_3094);
      uint16x128_t _3096 = uint16x128_t_ops::convert_from<uint8x128_t>(_3095);
      uint16x128_t _3097 = _3093 * _3096;
      uint16x128_t _3098 = _3097;
      int16x128_t _3099 = int16x128_t_ops::convert_from<uint16x128_t>(_3098);
      uint16x128_t _3100 = uint16x128_t_ops::convert_from<int16x128_t>(_3099);
      uint16x128_t _3101 = _3086 + _3100;
      int32x128_t _3102 = int32x128_t_ops::max(_3052, _3056);
      int32x128_t _3103 = _3102 + _3061;
      uint8x128_t _3104 = uint8x128_t_ops::load_gather(_input, _3103);
      uint16x128_t _3105 = uint16x128_t_ops::convert_from<uint8x128_t>(_3104);
      uint8_t _3106 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _3107 = uint8x128_t_ops::broadcast(_3106);
      uint16x128_t _3108 = uint16x128_t_ops::convert_from<uint8x128_t>(_3107);
      uint16x128_t _3109 = _3105 * _3108;
      uint16x128_t _3110 = _3109;
      int16x128_t _3111 = int16x128_t_ops::convert_from<uint16x128_t>(_3110);
      uint16x128_t _3112 = uint16x128_t_ops::convert_from<int16x128_t>(_3111);
      uint16x128_t _3113 = _3101 + _3112;
      int32x128_t _3114 = _3102 + _3075;
      uint8x128_t _3115 = uint8x128_t_ops::load_gather(_input, _3114);
      uint16x128_t _3116 = uint16x128_t_ops::convert_from<uint8x128_t>(_3115);
      int32_t _3117 = _491 + 1;
      uint8_t _3118 = ((const uint8_t *)_mask)[_3117];
      uint8x128_t _3119 = uint8x128_t_ops::broadcast(_3118);
      uint16x128_t _3120 = uint16x128_t_ops::convert_from<uint8x128_t>(_3119);
      uint16x128_t _3121 = _3116 * _3120;
      uint16x128_t _3122 = _3121;
      int16x128_t _3123 = int16x128_t_ops::convert_from<uint16x128_t>(_3122);
      uint16x128_t _3124 = uint16x128_t_ops::convert_from<int16x128_t>(_3123);
      uint16x128_t _3125 = _3113 + _3124;
      int32x128_t _3126 = _3102 + _3090;
      uint8x128_t _3127 = uint8x128_t_ops::load_gather(_input, _3126);
      uint16x128_t _3128 = uint16x128_t_ops::convert_from<uint8x128_t>(_3127);
      int32_t _3129 = _490 + 1;
      uint8_t _3130 = ((const uint8_t *)_mask)[_3129];
      uint8x128_t _3131 = uint8x128_t_ops::broadcast(_3130);
      uint16x128_t _3132 = uint16x128_t_ops::convert_from<uint8x128_t>(_3131);
      uint16x128_t _3133 = _3128 * _3132;
      uint16x128_t _3134 = _3133;
      int16x128_t _3135 = int16x128_t_ops::convert_from<uint16x128_t>(_3134);
      uint16x128_t _3136 = uint16x128_t_ops::convert_from<int16x128_t>(_3135);
      uint16x128_t _3137 = _3125 + _3136;
      int32x128_t _3138 = int32x128_t_ops::max(_3055, _3056);
      int32x128_t _3139 = _3138 + _3061;
      uint8x128_t _3140 = uint8x128_t_ops::load_gather(_input, _3139);
      uint16x128_t _3141 = uint16x128_t_ops::convert_from<uint8x128_t>(_3140);
      uint8_t _3142 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _3143 = uint8x128_t_ops::broadcast(_3142);
      uint16x128_t _3144 = uint16x128_t_ops::convert_from<uint8x128_t>(_3143);
      uint16x128_t _3145 = _3141 * _3144;
      uint16x128_t _3146 = _3145;
      int16x128_t _3147 = int16x128_t_ops::convert_from<uint16x128_t>(_3146);
      uint16x128_t _3148 = uint16x128_t_ops::convert_from<int16x128_t>(_3147);
      uint16x128_t _3149 = _3137 + _3148;
      int32x128_t _3150 = _3138 + _3075;
      uint8x128_t _3151 = uint8x128_t_ops::load_gather(_input, _3150);
      uint16x128_t _3152 = uint16x128_t_ops::convert_from<uint8x128_t>(_3151);
      int32_t _3153 = _491 + 2;
      uint8_t _3154 = ((const uint8_t *)_mask)[_3153];
      uint8x128_t _3155 = uint8x128_t_ops::broadcast(_3154);
      uint16x128_t _3156 = uint16x128_t_ops::convert_from<uint8x128_t>(_3155);
      uint16x128_t _3157 = _3152 * _3156;
      uint16x128_t _3158 = _3157;
      int16x128_t _3159 = int16x128_t_ops::convert_from<uint16x128_t>(_3158);
      uint16x128_t _3160 = uint16x128_t_ops::convert_from<int16x128_t>(_3159);
      uint16x128_t _3161 = _3149 + _3160;
      int32x128_t _3162 = _3138 + _3090;
      uint8x128_t _3163 = uint8x128_t_ops::load_gather(_input, _3162);
      uint16x128_t _3164 = uint16x128_t_ops::convert_from<uint8x128_t>(_3163);
      int32_t _3165 = _490 + 2;
      uint8_t _3166 = ((const uint8_t *)_mask)[_3165];
      uint8x128_t _3167 = uint8x128_t_ops::broadcast(_3166);
      uint16x128_t _3168 = uint16x128_t_ops::convert_from<uint8x128_t>(_3167);
      uint16x128_t _3169 = _3164 * _3168;
      uint16x128_t _3170 = _3169;
      int16x128_t _3171 = int16x128_t_ops::convert_from<uint16x128_t>(_3170);
      uint16x128_t _3172 = uint16x128_t_ops::convert_from<int16x128_t>(_3171);
      uint16x128_t _3173 = _3161 + _3172;
      uint16_t _3174 = (uint16_t)(255ull);
      uint16x128_t _3175 = uint16x128_t_ops::broadcast(_3174);
      uint16x128_t _3176 = uint16x128_t_ops::min(_3173, _3175);
      uint8x128_t _3177 = uint8x128_t_ops::convert_from<uint16x128_t>(_3176);
      int32_t _3178 = _3045 * _42;
      int32_t _3179 = _3039 + _3178;
      uint8x128_t_ops::store(_3177, _output, _3179);
      int32_t _3180 = _output_s0_x_x * 128;
      int32_t _3181 = _3180 + -1;
      int32x128_t _3182 = int32x128_t_ops::ramp(_3181, 1);
      int32_t _3183 = _18 + -1;
      int32x128_t _3184 = int32x128_t_ops::broadcast(_3183);
      int32x128_t _3185 = int32x128_t_ops::min(_3182, _3184);
      int32_t _3186 = _2617 + 4;
      int32_t _3187 = ::halide_cpp_min(_3186, _21);
      int32_t _3188 = _2617 + 5;
      int32_t _3189 = ::halide_cpp_min(_3188, _21);
      int32_t _3190 = _2617 + 6;
      int32_t _3191 = ::halide_cpp_min(_3190, _21);
      int32x128_t _3192 = int32x128_t_ops::ramp(_3180, 1);
      int32x128_t _3193 = int32x128_t_ops::min(_3192, _3184);
      int32_t _3194 = _3180 + 1;
      int32x128_t _3195 = int32x128_t_ops::ramp(_3194, 1);
      int32x128_t _3196 = int32x128_t_ops::min(_3195, _3184);
      int32x128_t _3197 = int32x128_t_ops::broadcast(0);
      int32x128_t _3198 = int32x128_t_ops::max(_3185, _3197);
      int32_t _3199 = ::halide_cpp_max(_3187, 1);
      int32_t _3200 = _3199 + -1;
      int32_t _3201 = _3200 * _22;
      int32x128_t _3202 = int32x128_t_ops::broadcast(_3201);
      int32x128_t _3203 = _3198 + _3202;
      uint8x128_t _3204 = uint8x128_t_ops::load_gather(_input, _3203);
      uint16x128_t _3205 = uint16x128_t_ops::convert_from<uint8x128_t>(_3204);
      uint8_t _3206 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _3207 = uint8x128_t_ops::broadcast(_3206);
      uint16x128_t _3208 = uint16x128_t_ops::convert_from<uint8x128_t>(_3207);
      uint16x128_t _3209 = _3205 * _3208;
      uint16x128_t _3210 = _3209;
      int16x128_t _3211 = int16x128_t_ops::convert_from<uint16x128_t>(_3210);
      uint16x128_t _3212 = uint16x128_t_ops::convert_from<int16x128_t>(_3211);
      int32_t _3213 = ::halide_cpp_max(_3189, 1);
      int32_t _3214 = _3213 + -1;
      int32_t _3215 = _3214 * _22;
      int32x128_t _3216 = int32x128_t_ops::broadcast(_3215);
      int32x128_t _3217 = _3198 + _3216;
      uint8x128_t _3218 = uint8x128_t_ops::load_gather(_input, _3217);
      uint16x128_t _3219 = uint16x128_t_ops::convert_from<uint8x128_t>(_3218);
      uint8_t _3220 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _3221 = uint8x128_t_ops::broadcast(_3220);
      uint16x128_t _3222 = uint16x128_t_ops::convert_from<uint8x128_t>(_3221);
      uint16x128_t _3223 = _3219 * _3222;
      uint16x128_t _3224 = _3223;
      int16x128_t _3225 = int16x128_t_ops::convert_from<uint16x128_t>(_3224);
      uint16x128_t _3226 = uint16x128_t_ops::convert_from<int16x128_t>(_3225);
      uint16x128_t _3227 = _3212 + _3226;
      int32_t _3228 = ::halide_cpp_max(_3191, 1);
      int32_t _3229 = _3228 + -1;
      int32_t _3230 = _3229 * _22;
      int32x128_t _3231 = int32x128_t_ops::broadcast(_3230);
      int32x128_t _3232 = _3198 + _3231;
      uint8x128_t _3233 = uint8x128_t_ops::load_gather(_input, _3232);
      uint16x128_t _3234 = uint16x128_t_ops::convert_from<uint8x128_t>(_3233);
      uint8_t _3235 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _3236 = uint8x128_t_ops::broadcast(_3235);
      uint16x128_t _3237 = uint16x128_t_ops::convert_from<uint8x128_t>(_3236);
      uint16x128_t _3238 = _3234 * _3237;
      uint16x128_t _3239 = _3238;
      int16x128_t _3240 = int16x128_t_ops::convert_from<uint16x128_t>(_3239);
      uint16x128_t _3241 = uint16x128_t_ops::convert_from<int16x128_t>(_3240);
      uint16x128_t _3242 = _3227 + _3241;
      int32x128_t _3243 = int32x128_t_ops::max(_3193, _3197);
      int32x128_t _3244 = _3243 + _3202;
      uint8x128_t _3245 = uint8x128_t_ops::load_gather(_input, _3244);
      uint16x128_t _3246 = uint16x128_t_ops::convert_from<uint8x128_t>(_3245);
      uint8_t _3247 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _3248 = uint8x128_t_ops::broadcast(_3247);
      uint16x128_t _3249 = uint16x128_t_ops::convert_from<uint8x128_t>(_3248);
      uint16x128_t _3250 = _3246 * _3249;
      uint16x128_t _3251 = _3250;
      int16x128_t _3252 = int16x128_t_ops::convert_from<uint16x128_t>(_3251);
      uint16x128_t _3253 = uint16x128_t_ops::convert_from<int16x128_t>(_3252);
      uint16x128_t _3254 = _3242 + _3253;
      int32x128_t _3255 = _3243 + _3216;
      uint8x128_t _3256 = uint8x128_t_ops::load_gather(_input, _3255);
      uint16x128_t _3257 = uint16x128_t_ops::convert_from<uint8x128_t>(_3256);
      int32_t _3258 = _491 + 1;
      uint8_t _3259 = ((const uint8_t *)_mask)[_3258];
      uint8x128_t _3260 = uint8x128_t_ops::broadcast(_3259);
      uint16x128_t _3261 = uint16x128_t_ops::convert_from<uint8x128_t>(_3260);
      uint16x128_t _3262 = _3257 * _3261;
      uint16x128_t _3263 = _3262;
      int16x128_t _3264 = int16x128_t_ops::convert_from<uint16x128_t>(_3263);
      uint16x128_t _3265 = uint16x128_t_ops::convert_from<int16x128_t>(_3264);
      uint16x128_t _3266 = _3254 + _3265;
      int32x128_t _3267 = _3243 + _3231;
      uint8x128_t _3268 = uint8x128_t_ops::load_gather(_input, _3267);
      uint16x128_t _3269 = uint16x128_t_ops::convert_from<uint8x128_t>(_3268);
      int32_t _3270 = _490 + 1;
      uint8_t _3271 = ((const uint8_t *)_mask)[_3270];
      uint8x128_t _3272 = uint8x128_t_ops::broadcast(_3271);
      uint16x128_t _3273 = uint16x128_t_ops::convert_from<uint8x128_t>(_3272);
      uint16x128_t _3274 = _3269 * _3273;
      uint16x128_t _3275 = _3274;
      int16x128_t _3276 = int16x128_t_ops::convert_from<uint16x128_t>(_3275);
      uint16x128_t _3277 = uint16x128_t_ops::convert_from<int16x128_t>(_3276);
      uint16x128_t _3278 = _3266 + _3277;
      int32x128_t _3279 = int32x128_t_ops::max(_3196, _3197);
      int32x128_t _3280 = _3279 + _3202;
      uint8x128_t _3281 = uint8x128_t_ops::load_gather(_input, _3280);
      uint16x128_t _3282 = uint16x128_t_ops::convert_from<uint8x128_t>(_3281);
      uint8_t _3283 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _3284 = uint8x128_t_ops::broadcast(_3283);
      uint16x128_t _3285 = uint16x128_t_ops::convert_from<uint8x128_t>(_3284);
      uint16x128_t _3286 = _3282 * _3285;
      uint16x128_t _3287 = _3286;
      int16x128_t _3288 = int16x128_t_ops::convert_from<uint16x128_t>(_3287);
      uint16x128_t _3289 = uint16x128_t_ops::convert_from<int16x128_t>(_3288);
      uint16x128_t _3290 = _3278 + _3289;
      int32x128_t _3291 = _3279 + _3216;
      uint8x128_t _3292 = uint8x128_t_ops::load_gather(_input, _3291);
      uint16x128_t _3293 = uint16x128_t_ops::convert_from<uint8x128_t>(_3292);
      int32_t _3294 = _491 + 2;
      uint8_t _3295 = ((const uint8_t *)_mask)[_3294];
      uint8x128_t _3296 = uint8x128_t_ops::broadcast(_3295);
      uint16x128_t _3297 = uint16x128_t_ops::convert_from<uint8x128_t>(_3296);
      uint16x128_t _3298 = _3293 * _3297;
      uint16x128_t _3299 = _3298;
      int16x128_t _3300 = int16x128_t_ops::convert_from<uint16x128_t>(_3299);
      uint16x128_t _3301 = uint16x128_t_ops::convert_from<int16x128_t>(_3300);
      uint16x128_t _3302 = _3290 + _3301;
      int32x128_t _3303 = _3279 + _3231;
      uint8x128_t _3304 = uint8x128_t_ops::load_gather(_input, _3303);
      uint16x128_t _3305 = uint16x128_t_ops::convert_from<uint8x128_t>(_3304);
      int32_t _3306 = _490 + 2;
      uint8_t _3307 = ((const uint8_t *)_mask)[_3306];
      uint8x128_t _3308 = uint8x128_t_ops::broadcast(_3307);
      uint16x128_t _3309 = uint16x128_t_ops::convert_from<uint8x128_t>(_3308);
      uint16x128_t _3310 = _3305 * _3309;
      uint16x128_t _3311 = _3310;
      int16x128_t _3312 = int16x128_t_ops::convert_from<uint16x128_t>(_3311);
      uint16x128_t _3313 = uint16x128_t_ops::convert_from<int16x128_t>(_3312);
      uint16x128_t _3314 = _3302 + _3313;
      uint16_t _3315 = (uint16_t)(255ull);
      uint16x128_t _3316 = uint16x128_t_ops::broadcast(_3315);
      uint16x128_t _3317 = uint16x128_t_ops::min(_3314, _3316);
      uint8x128_t _3318 = uint8x128_t_ops::convert_from<uint16x128_t>(_3317);
      int32_t _3319 = _3186 * _42;
      int32_t _3320 = _3180 + _3319;
      uint8x128_t_ops::store(_3318, _output, _3320);
      int32_t _3321 = _output_s0_x_x * 128;
      int32_t _3322 = _3321 + -1;
      int32x128_t _3323 = int32x128_t_ops::ramp(_3322, 1);
      int32_t _3324 = _18 + -1;
      int32x128_t _3325 = int32x128_t_ops::broadcast(_3324);
      int32x128_t _3326 = int32x128_t_ops::min(_3323, _3325);
      int32_t _3327 = _2617 + 5;
      int32_t _3328 = ::halide_cpp_min(_3327, _21);
      int32_t _3329 = _2617 + 6;
      int32_t _3330 = ::halide_cpp_min(_3329, _21);
      int32_t _3331 = _2617 + 7;
      int32_t _3332 = ::halide_cpp_min(_3331, _21);
      int32x128_t _3333 = int32x128_t_ops::ramp(_3321, 1);
      int32x128_t _3334 = int32x128_t_ops::min(_3333, _3325);
      int32_t _3335 = _3321 + 1;
      int32x128_t _3336 = int32x128_t_ops::ramp(_3335, 1);
      int32x128_t _3337 = int32x128_t_ops::min(_3336, _3325);
      int32x128_t _3338 = int32x128_t_ops::broadcast(0);
      int32x128_t _3339 = int32x128_t_ops::max(_3326, _3338);
      int32_t _3340 = ::halide_cpp_max(_3328, 1);
      int32_t _3341 = _3340 + -1;
      int32_t _3342 = _3341 * _22;
      int32x128_t _3343 = int32x128_t_ops::broadcast(_3342);
      int32x128_t _3344 = _3339 + _3343;
      uint8x128_t _3345 = uint8x128_t_ops::load_gather(_input, _3344);
      uint16x128_t _3346 = uint16x128_t_ops::convert_from<uint8x128_t>(_3345);
      uint8_t _3347 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _3348 = uint8x128_t_ops::broadcast(_3347);
      uint16x128_t _3349 = uint16x128_t_ops::convert_from<uint8x128_t>(_3348);
      uint16x128_t _3350 = _3346 * _3349;
      uint16x128_t _3351 = _3350;
      int16x128_t _3352 = int16x128_t_ops::convert_from<uint16x128_t>(_3351);
      uint16x128_t _3353 = uint16x128_t_ops::convert_from<int16x128_t>(_3352);
      int32_t _3354 = ::halide_cpp_max(_3330, 1);
      int32_t _3355 = _3354 + -1;
      int32_t _3356 = _3355 * _22;
      int32x128_t _3357 = int32x128_t_ops::broadcast(_3356);
      int32x128_t _3358 = _3339 + _3357;
      uint8x128_t _3359 = uint8x128_t_ops::load_gather(_input, _3358);
      uint16x128_t _3360 = uint16x128_t_ops::convert_from<uint8x128_t>(_3359);
      uint8_t _3361 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _3362 = uint8x128_t_ops::broadcast(_3361);
      uint16x128_t _3363 = uint16x128_t_ops::convert_from<uint8x128_t>(_3362);
      uint16x128_t _3364 = _3360 * _3363;
      uint16x128_t _3365 = _3364;
      int16x128_t _3366 = int16x128_t_ops::convert_from<uint16x128_t>(_3365);
      uint16x128_t _3367 = uint16x128_t_ops::convert_from<int16x128_t>(_3366);
      uint16x128_t _3368 = _3353 + _3367;
      int32_t _3369 = ::halide_cpp_max(_3332, 1);
      int32_t _3370 = _3369 + -1;
      int32_t _3371 = _3370 * _22;
      int32x128_t _3372 = int32x128_t_ops::broadcast(_3371);
      int32x128_t _3373 = _3339 + _3372;
      uint8x128_t _3374 = uint8x128_t_ops::load_gather(_input, _3373);
      uint16x128_t _3375 = uint16x128_t_ops::convert_from<uint8x128_t>(_3374);
      uint8_t _3376 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _3377 = uint8x128_t_ops::broadcast(_3376);
      uint16x128_t _3378 = uint16x128_t_ops::convert_from<uint8x128_t>(_3377);
      uint16x128_t _3379 = _3375 * _3378;
      uint16x128_t _3380 = _3379;
      int16x128_t _3381 = int16x128_t_ops::convert_from<uint16x128_t>(_3380);
      uint16x128_t _3382 = uint16x128_t_ops::convert_from<int16x128_t>(_3381);
      uint16x128_t _3383 = _3368 + _3382;
      int32x128_t _3384 = int32x128_t_ops::max(_3334, _3338);
      int32x128_t _3385 = _3384 + _3343;
      uint8x128_t _3386 = uint8x128_t_ops::load_gather(_input, _3385);
      uint16x128_t _3387 = uint16x128_t_ops::convert_from<uint8x128_t>(_3386);
      uint8_t _3388 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _3389 = uint8x128_t_ops::broadcast(_3388);
      uint16x128_t _3390 = uint16x128_t_ops::convert_from<uint8x128_t>(_3389);
      uint16x128_t _3391 = _3387 * _3390;
      uint16x128_t _3392 = _3391;
      int16x128_t _3393 = int16x128_t_ops::convert_from<uint16x128_t>(_3392);
      uint16x128_t _3394 = uint16x128_t_ops::convert_from<int16x128_t>(_3393);
      uint16x128_t _3395 = _3383 + _3394;
      int32x128_t _3396 = _3384 + _3357;
      uint8x128_t _3397 = uint8x128_t_ops::load_gather(_input, _3396);
      uint16x128_t _3398 = uint16x128_t_ops::convert_from<uint8x128_t>(_3397);
      int32_t _3399 = _491 + 1;
      uint8_t _3400 = ((const uint8_t *)_mask)[_3399];
      uint8x128_t _3401 = uint8x128_t_ops::broadcast(_3400);
      uint16x128_t _3402 = uint16x128_t_ops::convert_from<uint8x128_t>(_3401);
      uint16x128_t _3403 = _3398 * _3402;
      uint16x128_t _3404 = _3403;
      int16x128_t _3405 = int16x128_t_ops::convert_from<uint16x128_t>(_3404);
      uint16x128_t _3406 = uint16x128_t_ops::convert_from<int16x128_t>(_3405);
      uint16x128_t _3407 = _3395 + _3406;
      int32x128_t _3408 = _3384 + _3372;
      uint8x128_t _3409 = uint8x128_t_ops::load_gather(_input, _3408);
      uint16x128_t _3410 = uint16x128_t_ops::convert_from<uint8x128_t>(_3409);
      int32_t _3411 = _490 + 1;
      uint8_t _3412 = ((const uint8_t *)_mask)[_3411];
      uint8x128_t _3413 = uint8x128_t_ops::broadcast(_3412);
      uint16x128_t _3414 = uint16x128_t_ops::convert_from<uint8x128_t>(_3413);
      uint16x128_t _3415 = _3410 * _3414;
      uint16x128_t _3416 = _3415;
      int16x128_t _3417 = int16x128_t_ops::convert_from<uint16x128_t>(_3416);
      uint16x128_t _3418 = uint16x128_t_ops::convert_from<int16x128_t>(_3417);
      uint16x128_t _3419 = _3407 + _3418;
      int32x128_t _3420 = int32x128_t_ops::max(_3337, _3338);
      int32x128_t _3421 = _3420 + _3343;
      uint8x128_t _3422 = uint8x128_t_ops::load_gather(_input, _3421);
      uint16x128_t _3423 = uint16x128_t_ops::convert_from<uint8x128_t>(_3422);
      uint8_t _3424 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _3425 = uint8x128_t_ops::broadcast(_3424);
      uint16x128_t _3426 = uint16x128_t_ops::convert_from<uint8x128_t>(_3425);
      uint16x128_t _3427 = _3423 * _3426;
      uint16x128_t _3428 = _3427;
      int16x128_t _3429 = int16x128_t_ops::convert_from<uint16x128_t>(_3428);
      uint16x128_t _3430 = uint16x128_t_ops::convert_from<int16x128_t>(_3429);
      uint16x128_t _3431 = _3419 + _3430;
      int32x128_t _3432 = _3420 + _3357;
      uint8x128_t _3433 = uint8x128_t_ops::load_gather(_input, _3432);
      uint16x128_t _3434 = uint16x128_t_ops::convert_from<uint8x128_t>(_3433);
      int32_t _3435 = _491 + 2;
      uint8_t _3436 = ((const uint8_t *)_mask)[_3435];
      uint8x128_t _3437 = uint8x128_t_ops::broadcast(_3436);
      uint16x128_t _3438 = uint16x128_t_ops::convert_from<uint8x128_t>(_3437);
      uint16x128_t _3439 = _3434 * _3438;
      uint16x128_t _3440 = _3439;
      int16x128_t _3441 = int16x128_t_ops::convert_from<uint16x128_t>(_3440);
      uint16x128_t _3442 = uint16x128_t_ops::convert_from<int16x128_t>(_3441);
      uint16x128_t _3443 = _3431 + _3442;
      int32x128_t _3444 = _3420 + _3372;
      uint8x128_t _3445 = uint8x128_t_ops::load_gather(_input, _3444);
      uint16x128_t _3446 = uint16x128_t_ops::convert_from<uint8x128_t>(_3445);
      int32_t _3447 = _490 + 2;
      uint8_t _3448 = ((const uint8_t *)_mask)[_3447];
      uint8x128_t _3449 = uint8x128_t_ops::broadcast(_3448);
      uint16x128_t _3450 = uint16x128_t_ops::convert_from<uint8x128_t>(_3449);
      uint16x128_t _3451 = _3446 * _3450;
      uint16x128_t _3452 = _3451;
      int16x128_t _3453 = int16x128_t_ops::convert_from<uint16x128_t>(_3452);
      uint16x128_t _3454 = uint16x128_t_ops::convert_from<int16x128_t>(_3453);
      uint16x128_t _3455 = _3443 + _3454;
      uint16_t _3456 = (uint16_t)(255ull);
      uint16x128_t _3457 = uint16x128_t_ops::broadcast(_3456);
      uint16x128_t _3458 = uint16x128_t_ops::min(_3455, _3457);
      uint8x128_t _3459 = uint8x128_t_ops::convert_from<uint16x128_t>(_3458);
      int32_t _3460 = _3327 * _42;
      int32_t _3461 = _3321 + _3460;
      uint8x128_t_ops::store(_3459, _output, _3461);
      int32_t _3462 = _output_s0_x_x * 128;
      int32_t _3463 = _3462 + -1;
      int32x128_t _3464 = int32x128_t_ops::ramp(_3463, 1);
      int32_t _3465 = _18 + -1;
      int32x128_t _3466 = int32x128_t_ops::broadcast(_3465);
      int32x128_t _3467 = int32x128_t_ops::min(_3464, _3466);
      int32_t _3468 = _2617 + 6;
      int32_t _3469 = ::halide_cpp_min(_3468, _21);
      int32_t _3470 = _2617 + 7;
      int32_t _3471 = ::halide_cpp_min(_3470, _21);
      int32_t _3472 = _2617 + 8;
      int32_t _3473 = ::halide_cpp_min(_3472, _21);
      int32x128_t _3474 = int32x128_t_ops::ramp(_3462, 1);
      int32x128_t _3475 = int32x128_t_ops::min(_3474, _3466);
      int32_t _3476 = _3462 + 1;
      int32x128_t _3477 = int32x128_t_ops::ramp(_3476, 1);
      int32x128_t _3478 = int32x128_t_ops::min(_3477, _3466);
      int32x128_t _3479 = int32x128_t_ops::broadcast(0);
      int32x128_t _3480 = int32x128_t_ops::max(_3467, _3479);
      int32_t _3481 = ::halide_cpp_max(_3469, 1);
      int32_t _3482 = _3481 + -1;
      int32_t _3483 = _3482 * _22;
      int32x128_t _3484 = int32x128_t_ops::broadcast(_3483);
      int32x128_t _3485 = _3480 + _3484;
      uint8x128_t _3486 = uint8x128_t_ops::load_gather(_input, _3485);
      uint16x128_t _3487 = uint16x128_t_ops::convert_from<uint8x128_t>(_3486);
      uint8_t _3488 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _3489 = uint8x128_t_ops::broadcast(_3488);
      uint16x128_t _3490 = uint16x128_t_ops::convert_from<uint8x128_t>(_3489);
      uint16x128_t _3491 = _3487 * _3490;
      uint16x128_t _3492 = _3491;
      int16x128_t _3493 = int16x128_t_ops::convert_from<uint16x128_t>(_3492);
      uint16x128_t _3494 = uint16x128_t_ops::convert_from<int16x128_t>(_3493);
      int32_t _3495 = ::halide_cpp_max(_3471, 1);
      int32_t _3496 = _3495 + -1;
      int32_t _3497 = _3496 * _22;
      int32x128_t _3498 = int32x128_t_ops::broadcast(_3497);
      int32x128_t _3499 = _3480 + _3498;
      uint8x128_t _3500 = uint8x128_t_ops::load_gather(_input, _3499);
      uint16x128_t _3501 = uint16x128_t_ops::convert_from<uint8x128_t>(_3500);
      uint8_t _3502 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _3503 = uint8x128_t_ops::broadcast(_3502);
      uint16x128_t _3504 = uint16x128_t_ops::convert_from<uint8x128_t>(_3503);
      uint16x128_t _3505 = _3501 * _3504;
      uint16x128_t _3506 = _3505;
      int16x128_t _3507 = int16x128_t_ops::convert_from<uint16x128_t>(_3506);
      uint16x128_t _3508 = uint16x128_t_ops::convert_from<int16x128_t>(_3507);
      uint16x128_t _3509 = _3494 + _3508;
      int32_t _3510 = ::halide_cpp_max(_3473, 1);
      int32_t _3511 = _3510 + -1;
      int32_t _3512 = _3511 * _22;
      int32x128_t _3513 = int32x128_t_ops::broadcast(_3512);
      int32x128_t _3514 = _3480 + _3513;
      uint8x128_t _3515 = uint8x128_t_ops::load_gather(_input, _3514);
      uint16x128_t _3516 = uint16x128_t_ops::convert_from<uint8x128_t>(_3515);
      uint8_t _3517 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _3518 = uint8x128_t_ops::broadcast(_3517);
      uint16x128_t _3519 = uint16x128_t_ops::convert_from<uint8x128_t>(_3518);
      uint16x128_t _3520 = _3516 * _3519;
      uint16x128_t _3521 = _3520;
      int16x128_t _3522 = int16x128_t_ops::convert_from<uint16x128_t>(_3521);
      uint16x128_t _3523 = uint16x128_t_ops::convert_from<int16x128_t>(_3522);
      uint16x128_t _3524 = _3509 + _3523;
      int32x128_t _3525 = int32x128_t_ops::max(_3475, _3479);
      int32x128_t _3526 = _3525 + _3484;
      uint8x128_t _3527 = uint8x128_t_ops::load_gather(_input, _3526);
      uint16x128_t _3528 = uint16x128_t_ops::convert_from<uint8x128_t>(_3527);
      uint8_t _3529 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _3530 = uint8x128_t_ops::broadcast(_3529);
      uint16x128_t _3531 = uint16x128_t_ops::convert_from<uint8x128_t>(_3530);
      uint16x128_t _3532 = _3528 * _3531;
      uint16x128_t _3533 = _3532;
      int16x128_t _3534 = int16x128_t_ops::convert_from<uint16x128_t>(_3533);
      uint16x128_t _3535 = uint16x128_t_ops::convert_from<int16x128_t>(_3534);
      uint16x128_t _3536 = _3524 + _3535;
      int32x128_t _3537 = _3525 + _3498;
      uint8x128_t _3538 = uint8x128_t_ops::load_gather(_input, _3537);
      uint16x128_t _3539 = uint16x128_t_ops::convert_from<uint8x128_t>(_3538);
      int32_t _3540 = _491 + 1;
      uint8_t _3541 = ((const uint8_t *)_mask)[_3540];
      uint8x128_t _3542 = uint8x128_t_ops::broadcast(_3541);
      uint16x128_t _3543 = uint16x128_t_ops::convert_from<uint8x128_t>(_3542);
      uint16x128_t _3544 = _3539 * _3543;
      uint16x128_t _3545 = _3544;
      int16x128_t _3546 = int16x128_t_ops::convert_from<uint16x128_t>(_3545);
      uint16x128_t _3547 = uint16x128_t_ops::convert_from<int16x128_t>(_3546);
      uint16x128_t _3548 = _3536 + _3547;
      int32x128_t _3549 = _3525 + _3513;
      uint8x128_t _3550 = uint8x128_t_ops::load_gather(_input, _3549);
      uint16x128_t _3551 = uint16x128_t_ops::convert_from<uint8x128_t>(_3550);
      int32_t _3552 = _490 + 1;
      uint8_t _3553 = ((const uint8_t *)_mask)[_3552];
      uint8x128_t _3554 = uint8x128_t_ops::broadcast(_3553);
      uint16x128_t _3555 = uint16x128_t_ops::convert_from<uint8x128_t>(_3554);
      uint16x128_t _3556 = _3551 * _3555;
      uint16x128_t _3557 = _3556;
      int16x128_t _3558 = int16x128_t_ops::convert_from<uint16x128_t>(_3557);
      uint16x128_t _3559 = uint16x128_t_ops::convert_from<int16x128_t>(_3558);
      uint16x128_t _3560 = _3548 + _3559;
      int32x128_t _3561 = int32x128_t_ops::max(_3478, _3479);
      int32x128_t _3562 = _3561 + _3484;
      uint8x128_t _3563 = uint8x128_t_ops::load_gather(_input, _3562);
      uint16x128_t _3564 = uint16x128_t_ops::convert_from<uint8x128_t>(_3563);
      uint8_t _3565 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _3566 = uint8x128_t_ops::broadcast(_3565);
      uint16x128_t _3567 = uint16x128_t_ops::convert_from<uint8x128_t>(_3566);
      uint16x128_t _3568 = _3564 * _3567;
      uint16x128_t _3569 = _3568;
      int16x128_t _3570 = int16x128_t_ops::convert_from<uint16x128_t>(_3569);
      uint16x128_t _3571 = uint16x128_t_ops::convert_from<int16x128_t>(_3570);
      uint16x128_t _3572 = _3560 + _3571;
      int32x128_t _3573 = _3561 + _3498;
      uint8x128_t _3574 = uint8x128_t_ops::load_gather(_input, _3573);
      uint16x128_t _3575 = uint16x128_t_ops::convert_from<uint8x128_t>(_3574);
      int32_t _3576 = _491 + 2;
      uint8_t _3577 = ((const uint8_t *)_mask)[_3576];
      uint8x128_t _3578 = uint8x128_t_ops::broadcast(_3577);
      uint16x128_t _3579 = uint16x128_t_ops::convert_from<uint8x128_t>(_3578);
      uint16x128_t _3580 = _3575 * _3579;
      uint16x128_t _3581 = _3580;
      int16x128_t _3582 = int16x128_t_ops::convert_from<uint16x128_t>(_3581);
      uint16x128_t _3583 = uint16x128_t_ops::convert_from<int16x128_t>(_3582);
      uint16x128_t _3584 = _3572 + _3583;
      int32x128_t _3585 = _3561 + _3513;
      uint8x128_t _3586 = uint8x128_t_ops::load_gather(_input, _3585);
      uint16x128_t _3587 = uint16x128_t_ops::convert_from<uint8x128_t>(_3586);
      int32_t _3588 = _490 + 2;
      uint8_t _3589 = ((const uint8_t *)_mask)[_3588];
      uint8x128_t _3590 = uint8x128_t_ops::broadcast(_3589);
      uint16x128_t _3591 = uint16x128_t_ops::convert_from<uint8x128_t>(_3590);
      uint16x128_t _3592 = _3587 * _3591;
      uint16x128_t _3593 = _3592;
      int16x128_t _3594 = int16x128_t_ops::convert_from<uint16x128_t>(_3593);
      uint16x128_t _3595 = uint16x128_t_ops::convert_from<int16x128_t>(_3594);
      uint16x128_t _3596 = _3584 + _3595;
      uint16_t _3597 = (uint16_t)(255ull);
      uint16x128_t _3598 = uint16x128_t_ops::broadcast(_3597);
      uint16x128_t _3599 = uint16x128_t_ops::min(_3596, _3598);
      uint8x128_t _3600 = uint8x128_t_ops::convert_from<uint16x128_t>(_3599);
      int32_t _3601 = _3468 * _42;
      int32_t _3602 = _3462 + _3601;
      uint8x128_t_ops::store(_3600, _output, _3602);
      int32_t _3603 = _output_s0_x_x * 128;
      int32_t _3604 = _3603 + -1;
      int32x128_t _3605 = int32x128_t_ops::ramp(_3604, 1);
      int32_t _3606 = _18 + -1;
      int32x128_t _3607 = int32x128_t_ops::broadcast(_3606);
      int32x128_t _3608 = int32x128_t_ops::min(_3605, _3607);
      int32_t _3609 = _2617 + 7;
      int32_t _3610 = ::halide_cpp_min(_3609, _21);
      int32_t _3611 = _2617 + 8;
      int32_t _3612 = ::halide_cpp_min(_3611, _21);
      int32_t _3613 = _2617 + 9;
      int32_t _3614 = ::halide_cpp_min(_3613, _21);
      int32x128_t _3615 = int32x128_t_ops::ramp(_3603, 1);
      int32x128_t _3616 = int32x128_t_ops::min(_3615, _3607);
      int32_t _3617 = _3603 + 1;
      int32x128_t _3618 = int32x128_t_ops::ramp(_3617, 1);
      int32x128_t _3619 = int32x128_t_ops::min(_3618, _3607);
      int32x128_t _3620 = int32x128_t_ops::broadcast(0);
      int32x128_t _3621 = int32x128_t_ops::max(_3608, _3620);
      int32_t _3622 = ::halide_cpp_max(_3610, 1);
      int32_t _3623 = _3622 + -1;
      int32_t _3624 = _3623 * _22;
      int32x128_t _3625 = int32x128_t_ops::broadcast(_3624);
      int32x128_t _3626 = _3621 + _3625;
      uint8x128_t _3627 = uint8x128_t_ops::load_gather(_input, _3626);
      uint16x128_t _3628 = uint16x128_t_ops::convert_from<uint8x128_t>(_3627);
      uint8_t _3629 = ((const uint8_t *)_mask)[_494];
      uint8x128_t _3630 = uint8x128_t_ops::broadcast(_3629);
      uint16x128_t _3631 = uint16x128_t_ops::convert_from<uint8x128_t>(_3630);
      uint16x128_t _3632 = _3628 * _3631;
      uint16x128_t _3633 = _3632;
      int16x128_t _3634 = int16x128_t_ops::convert_from<uint16x128_t>(_3633);
      uint16x128_t _3635 = uint16x128_t_ops::convert_from<int16x128_t>(_3634);
      int32_t _3636 = ::halide_cpp_max(_3612, 1);
      int32_t _3637 = _3636 + -1;
      int32_t _3638 = _3637 * _22;
      int32x128_t _3639 = int32x128_t_ops::broadcast(_3638);
      int32x128_t _3640 = _3621 + _3639;
      uint8x128_t _3641 = uint8x128_t_ops::load_gather(_input, _3640);
      uint16x128_t _3642 = uint16x128_t_ops::convert_from<uint8x128_t>(_3641);
      uint8_t _3643 = ((const uint8_t *)_mask)[_491];
      uint8x128_t _3644 = uint8x128_t_ops::broadcast(_3643);
      uint16x128_t _3645 = uint16x128_t_ops::convert_from<uint8x128_t>(_3644);
      uint16x128_t _3646 = _3642 * _3645;
      uint16x128_t _3647 = _3646;
      int16x128_t _3648 = int16x128_t_ops::convert_from<uint16x128_t>(_3647);
      uint16x128_t _3649 = uint16x128_t_ops::convert_from<int16x128_t>(_3648);
      uint16x128_t _3650 = _3635 + _3649;
      int32_t _3651 = ::halide_cpp_max(_3614, 1);
      int32_t _3652 = _3651 + -1;
      int32_t _3653 = _3652 * _22;
      int32x128_t _3654 = int32x128_t_ops::broadcast(_3653);
      int32x128_t _3655 = _3621 + _3654;
      uint8x128_t _3656 = uint8x128_t_ops::load_gather(_input, _3655);
      uint16x128_t _3657 = uint16x128_t_ops::convert_from<uint8x128_t>(_3656);
      uint8_t _3658 = ((const uint8_t *)_mask)[_490];
      uint8x128_t _3659 = uint8x128_t_ops::broadcast(_3658);
      uint16x128_t _3660 = uint16x128_t_ops::convert_from<uint8x128_t>(_3659);
      uint16x128_t _3661 = _3657 * _3660;
      uint16x128_t _3662 = _3661;
      int16x128_t _3663 = int16x128_t_ops::convert_from<uint16x128_t>(_3662);
      uint16x128_t _3664 = uint16x128_t_ops::convert_from<int16x128_t>(_3663);
      uint16x128_t _3665 = _3650 + _3664;
      int32x128_t _3666 = int32x128_t_ops::max(_3616, _3620);
      int32x128_t _3667 = _3666 + _3625;
      uint8x128_t _3668 = uint8x128_t_ops::load_gather(_input, _3667);
      uint16x128_t _3669 = uint16x128_t_ops::convert_from<uint8x128_t>(_3668);
      uint8_t _3670 = ((const uint8_t *)_mask)[_493];
      uint8x128_t _3671 = uint8x128_t_ops::broadcast(_3670);
      uint16x128_t _3672 = uint16x128_t_ops::convert_from<uint8x128_t>(_3671);
      uint16x128_t _3673 = _3669 * _3672;
      uint16x128_t _3674 = _3673;
      int16x128_t _3675 = int16x128_t_ops::convert_from<uint16x128_t>(_3674);
      uint16x128_t _3676 = uint16x128_t_ops::convert_from<int16x128_t>(_3675);
      uint16x128_t _3677 = _3665 + _3676;
      int32x128_t _3678 = _3666 + _3639;
      uint8x128_t _3679 = uint8x128_t_ops::load_gather(_input, _3678);
      uint16x128_t _3680 = uint16x128_t_ops::convert_from<uint8x128_t>(_3679);
      int32_t _3681 = _491 + 1;
      uint8_t _3682 = ((const uint8_t *)_mask)[_3681];
      uint8x128_t _3683 = uint8x128_t_ops::broadcast(_3682);
      uint16x128_t _3684 = uint16x128_t_ops::convert_from<uint8x128_t>(_3683);
      uint16x128_t _3685 = _3680 * _3684;
      uint16x128_t _3686 = _3685;
      int16x128_t _3687 = int16x128_t_ops::convert_from<uint16x128_t>(_3686);
      uint16x128_t _3688 = uint16x128_t_ops::convert_from<int16x128_t>(_3687);
      uint16x128_t _3689 = _3677 + _3688;
      int32x128_t _3690 = _3666 + _3654;
      uint8x128_t _3691 = uint8x128_t_ops::load_gather(_input, _3690);
      uint16x128_t _3692 = uint16x128_t_ops::convert_from<uint8x128_t>(_3691);
      int32_t _3693 = _490 + 1;
      uint8_t _3694 = ((const uint8_t *)_mask)[_3693];
      uint8x128_t _3695 = uint8x128_t_ops::broadcast(_3694);
      uint16x128_t _3696 = uint16x128_t_ops::convert_from<uint8x128_t>(_3695);
      uint16x128_t _3697 = _3692 * _3696;
      uint16x128_t _3698 = _3697;
      int16x128_t _3699 = int16x128_t_ops::convert_from<uint16x128_t>(_3698);
      uint16x128_t _3700 = uint16x128_t_ops::convert_from<int16x128_t>(_3699);
      uint16x128_t _3701 = _3689 + _3700;
      int32x128_t _3702 = int32x128_t_ops::max(_3619, _3620);
      int32x128_t _3703 = _3702 + _3625;
      uint8x128_t _3704 = uint8x128_t_ops::load_gather(_input, _3703);
      uint16x128_t _3705 = uint16x128_t_ops::convert_from<uint8x128_t>(_3704);
      uint8_t _3706 = ((const uint8_t *)_mask)[_492];
      uint8x128_t _3707 = uint8x128_t_ops::broadcast(_3706);
      uint16x128_t _3708 = uint16x128_t_ops::convert_from<uint8x128_t>(_3707);
      uint16x128_t _3709 = _3705 * _3708;
      uint16x128_t _3710 = _3709;
      int16x128_t _3711 = int16x128_t_ops::convert_from<uint16x128_t>(_3710);
      uint16x128_t _3712 = uint16x128_t_ops::convert_from<int16x128_t>(_3711);
      uint16x128_t _3713 = _3701 + _3712;
      int32x128_t _3714 = _3702 + _3639;
      uint8x128_t _3715 = uint8x128_t_ops::load_gather(_input, _3714);
      uint16x128_t _3716 = uint16x128_t_ops::convert_from<uint8x128_t>(_3715);
      int32_t _3717 = _491 + 2;
      uint8_t _3718 = ((const uint8_t *)_mask)[_3717];
      uint8x128_t _3719 = uint8x128_t_ops::broadcast(_3718);
      uint16x128_t _3720 = uint16x128_t_ops::convert_from<uint8x128_t>(_3719);
      uint16x128_t _3721 = _3716 * _3720;
      uint16x128_t _3722 = _3721;
      int16x128_t _3723 = int16x128_t_ops::convert_from<uint16x128_t>(_3722);
      uint16x128_t _3724 = uint16x128_t_ops::convert_from<int16x128_t>(_3723);
      uint16x128_t _3725 = _3713 + _3724;
      int32x128_t _3726 = _3702 + _3654;
      uint8x128_t _3727 = uint8x128_t_ops::load_gather(_input, _3726);
      uint16x128_t _3728 = uint16x128_t_ops::convert_from<uint8x128_t>(_3727);
      int32_t _3729 = _490 + 2;
      uint8_t _3730 = ((const uint8_t *)_mask)[_3729];
      uint8x128_t _3731 = uint8x128_t_ops::broadcast(_3730);
      uint16x128_t _3732 = uint16x128_t_ops::convert_from<uint8x128_t>(_3731);
      uint16x128_t _3733 = _3728 * _3732;
      uint16x128_t _3734 = _3733;
      int16x128_t _3735 = int16x128_t_ops::convert_from<uint16x128_t>(_3734);
      uint16x128_t _3736 = uint16x128_t_ops::convert_from<int16x128_t>(_3735);
      uint16x128_t _3737 = _3725 + _3736;
      uint16_t _3738 = (uint16_t)(255ull);
      uint16x128_t _3739 = uint16x128_t_ops::broadcast(_3738);
      uint16x128_t _3740 = uint16x128_t_ops::min(_3737, _3739);
      uint8x128_t _3741 = uint8x128_t_ops::convert_from<uint16x128_t>(_3740);
      int32_t _3742 = _3609 * _42;
      int32_t _3743 = _3603 + _3742;
      uint8x128_t_ops::store(_3741, _output, _3743);
     } // for _output_s0_x_x
    } // if _496 else
   } // for _output_s0_y_y_y
  } // for _output_s0_y_yo
 } // if _159
 return 0;
}

#ifdef __cplusplus
}  // extern "C"
#endif

